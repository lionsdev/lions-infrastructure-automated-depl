---
# =========================================================================
# LIONS INFRASTRUCTURE 5.0 - REDIS STATEFULSET TEMPLATE
# =========================================================================
# Description: Template Kubernetes StatefulSet pour d√©ploiement Redis
# Version: 5.0.0
# Maintainer: DevOps Team LIONS
# Documentation: https://docs.lions.dev/infrastructure/redis
# Compatible: Kubernetes 1.24+, Redis 7.x
# =========================================================================

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ lions_redis_service_name | default('redis') }}"
  namespace: "{{ lions_redis_namespace | default('database') }}"
  labels:
    # Labels standards LIONS
    app.kubernetes.io/name: "{{ lions_redis_service_name | default('redis') }}"
    app.kubernetes.io/instance: "{{ lions_redis_service_name | default('redis') }}-{{ lions_environment }}"
    app.kubernetes.io/version: "{{ lions_redis_version | default('7.2') }}"
    app.kubernetes.io/component: "database"
    app.kubernetes.io/part-of: "lions-infrastructure"
    app.kubernetes.io/managed-by: "ansible"

    # Labels sp√©cifiques
    lions.dev/environment: "{{ lions_environment }}"
    lions.dev/tier: "data"
    lions.dev/technology: "redis"
    lions.dev/backup-enabled: "{{ lions_redis_backup_enabled | default('true') | string }}"
    lions.dev/monitoring-enabled: "{{ lions_redis_monitoring_enabled | default('true') | string }}"

    # Labels legacy (compatibilit√©)
    app: "{{ lions_redis_service_name | default('redis') }}"
    version: "{{ lions_redis_version | default('7.2') }}"
    environment: "{{ lions_environment }}"
    technology: "redis"

  annotations:
    # Annotations LIONS
    lions.dev/description: "Redis {{ lions_redis_version | default('7.2') }} StatefulSet pour environnement {{ lions_environment }}"
    lions.dev/contact: "{{ lions_config_maintainer | default('devops@lions.dev') }}"
    lions.dev/documentation: "https://docs.lions.dev/infrastructure/redis"
    lions.dev/last-updated: "{{ ansible_date_time.iso8601 }}"

    # Annotations Kubernetes
    deployment.kubernetes.io/revision: "{{ lions_redis_deployment_revision | default('1') }}"
    kubernetes.io/description: "Redis database for LIONS Infrastructure"

    # Annotations de monitoring
    prometheus.io/scrape: "{{ lions_redis_monitoring_enabled | default('true') | string }}"
    grafana.com/dashboard: "redis-dashboard"

{% if lions_redis_backup_enabled | default('true') | bool %}
    # Annotations de backup
    backup.lions.dev/enabled: "true"
    backup.lions.dev/schedule: "{{ lions_redis_backup_schedule | default('0 2 * * *') }}"
    backup.lions.dev/retention: "{{ lions_backup_retention_days | default('30') }}d"
{% endif %}

spec:
  # Configuration du service
  serviceName: "{{ lions_redis_service_name | default('redis') }}"

  # Strat√©gie de mise √† jour
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
      maxUnavailable: 0

  # Configuration des r√©plicas selon l'environnement
  replicas: {{ lions_redis_replicas[lions_environment] | default(lions_redis_replicas_default | default(1)) }}

  # D√©lai avant suppression forc√©e
  podManagementPolicy: {{ lions_redis_pod_management_policy | default('OrderedReady') }}

  # S√©lecteur de pods
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ lions_redis_service_name | default('redis') }}"
      app.kubernetes.io/instance: "{{ lions_redis_service_name | default('redis') }}-{{ lions_environment }}"
      lions.dev/environment: "{{ lions_environment }}"

  # Template des pods
  template:
    metadata:
      labels:
        # Labels identiques au selector + labels additionnels
        app.kubernetes.io/name: "{{ lions_redis_service_name | default('redis') }}"
        app.kubernetes.io/instance: "{{ lions_redis_service_name | default('redis') }}-{{ lions_environment }}"
        app.kubernetes.io/version: "{{ lions_redis_version | default('7.2') }}"
        app.kubernetes.io/component: "database"
        app.kubernetes.io/part-of: "lions-infrastructure"
        app.kubernetes.io/managed-by: "ansible"
        lions.dev/environment: "{{ lions_environment }}"
        lions.dev/tier: "data"
        lions.dev/technology: "redis"

        # Labels pour le r√©seau et s√©curit√©
        lions.dev/network-policy: "database-tier"
        lions.dev/security-profile: "{{ lions_redis_security_profile | default('standard') }}"

        # Labels legacy
        app: "{{ lions_redis_service_name | default('redis') }}"
        version: "{{ lions_redis_version | default('7.2') }}"
        environment: "{{ lions_environment }}"

      annotations:
        # Annotations de monitoring
        prometheus.io/scrape: "{{ lions_redis_monitoring_enabled | default('true') | string }}"
        prometheus.io/path: "{{ lions_redis_prometheus_path | default('/metrics') }}"
        prometheus.io/port: "{{ lions_redis_prometheus_port | default('9121') }}"

        # Annotations de configuration
        config.lions.dev/hash: "{{ lions_redis_config_hash | default('') }}"
        config.lions.dev/version: "{{ lions_redis_config_version | default('1.0') }}"

        # Annotations de s√©curit√©
{% if lions_security_pod_security_standards == 'restricted' %}
        seccomp.security.alpha.kubernetes.io/pod: "runtime/default"
        container.apparmor.security.beta.kubernetes.io/redis: "runtime/default"
{% if lions_redis_monitoring_enabled | default('true') | bool %}
        container.apparmor.security.beta.kubernetes.io/redis-exporter: "runtime/default"
{% endif %}
{% endif %}

    spec:
      # Configuration du service account
      serviceAccountName: "{{ lions_redis_service_name | default('redis') }}"
      automountServiceAccountToken: {{ lions_redis_automount_sa_token | default('false') | string }}

      # Configuration de s√©curit√© du pod
      securityContext:
        # Utilisateur non-root
        runAsNonRoot: true
        runAsUser: {{ lions_redis_user_id | default('999') }}
        runAsGroup: {{ lions_redis_group_id | default('999') }}
        fsGroup: {{ lions_redis_fs_group_id | default('999') }}
        fsGroupChangePolicy: "OnRootMismatch"

        # S√©curit√© avanc√©e selon l'environnement
{% if lions_environment == 'production' or lions_security_pod_security_standards == 'restricted' %}
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
{% endif %}

      # Configuration DNS
      dnsPolicy: {{ lions_redis_dns_policy | default('ClusterFirst') }}
{% if lions_redis_dns_config is defined %}
      dnsConfig:
        {{- lions_redis_dns_config | to_nice_yaml | indent(8) }}
{% endif %}

      # Priorit√© et pr√©emption
{% if lions_redis_priority_class is defined %}
      priorityClassName: "{{ lions_redis_priority_class }}"
{% endif %}

      # Tol√©rance et affinit√©
      tolerations:
        {{- lions_redis_tolerations | default([]) | to_nice_yaml | indent(8) }}

      affinity:
        # Anti-affinit√© pour √©viter les pods sur le m√™me n≈ìud
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ lions_redis_service_name | default('redis') }}"
                    - key: lions.dev/environment
                      operator: In
                      values:
                        - "{{ lions_environment }}"
                topologyKey: kubernetes.io/hostname

        # Affinit√© de n≈ìud si configur√©e
{% if lions_redis_node_affinity is defined %}
        nodeAffinity:
          {{- lions_redis_node_affinity | to_nice_yaml | indent(10) }}
{% endif %}

      # S√©lecteur de n≈ìud
{% if lions_redis_node_selector is defined %}
      nodeSelector:
        {{- lions_redis_node_selector | to_nice_yaml | indent(8) }}
{% endif %}

      # P√©riode de gr√¢ce pour arr√™t
      terminationGracePeriodSeconds: {{ lions_redis_termination_grace_period | default('60') }}

      # Configuration des volumes
      volumes:
        # Configuration Redis
        - name: redis-config
          configMap:
            name: "{{ lions_redis_service_name | default('redis') }}-config"
            defaultMode: 0444

        # R√©pertoire temporaire
        - name: tmp
          emptyDir:
            sizeLimit: "{{ lions_redis_tmp_size | default('1Gi') }}"

        # Scripts d'initialisation
        - name: init-scripts
          configMap:
            name: "{{ lions_redis_service_name | default('redis') }}-scripts"
            defaultMode: 0555

{% if not lions_redis_persistent_storage | default('true') | bool %}
        # Stockage √©ph√©m√®re (d√©veloppement)
        - name: redis-data
          emptyDir:
            sizeLimit: "{{ lions_redis_storage_size | default('5Gi') }}"
{% endif %}

{% if lions_redis_tls_enabled | default('false') | bool %}
        # Certificats TLS
        - name: tls-certs
          secret:
            secretName: "{{ lions_redis_service_name | default('redis') }}-tls"
            defaultMode: 0400
{% endif %}

      # Containers d'initialisation
      initContainers:
        # Pr√©paration des donn√©es
        - name: redis-init
          image: "{{ lions_redis_init_image | default('busybox:1.36') }}"
          imagePullPolicy: {{ lions_redis_image_pull_policy | default('IfNotPresent') }}
          securityContext:
            runAsNonRoot: true
            runAsUser: {{ lions_redis_user_id | default('999') }}
            runAsGroup: {{ lions_redis_group_id | default('999') }}
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "üöÄ Initialisation Redis pour {{ lions_environment }}"

              # V√©rification des permissions
              if [ -w /data ]; then
                echo "‚úÖ R√©pertoire de donn√©es accessible en √©criture"
              else
                echo "‚ùå Erreur: R√©pertoire de donn√©es non accessible"
                exit 1
              fi

              # Pr√©paration des r√©pertoires
              mkdir -p /data/logs
              touch /data/logs/redis.log

              echo "‚úÖ Initialisation termin√©e"
          volumeMounts:
            - name: redis-data
              mountPath: /data
          resources:
            requests:
              cpu: "10m"
              memory: "16Mi"
            limits:
              cpu: "50m"
              memory: "64Mi"

      # Containers principaux
      containers:
        # Container Redis principal
        - name: redis
          image: "{{ lions_redis_image_registry | default('') }}redis:{{ lions_redis_version | default('7.2') }}"
          imagePullPolicy: {{ lions_redis_image_pull_policy | default('IfNotPresent') }}

          # Commande de d√©marrage
          command:
            - redis-server
            - /etc/redis/redis.conf
            - --dir
            - /data
{% if lions_redis_log_to_file | default('true') | bool %}
            - --logfile
            - /data/logs/redis.log
{% endif %}

          # Ports expos√©s
          ports:
            - name: redis
              containerPort: {{ lions_redis_port | default('6379') }}
              protocol: TCP
{% if lions_redis_cluster_enabled | default('false') | bool %}
            - name: cluster
              containerPort: {{ lions_redis_cluster_port | default('16379') }}
              protocol: TCP
{% endif %}

          # Variables d'environnement
          env:
            # Informations Kubernetes
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName

            # Configuration Redis
            - name: REDIS_PORT
              value: "{{ lions_redis_port | default('6379') }}"
            - name: LIONS_ENVIRONMENT
              value: "{{ lions_environment }}"

{% if lions_redis_password_enabled | default('false') | bool %}
            # Authentification Redis
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ lions_redis_password_secret | default('redis-auth') }}"
                  key: "{{ lions_redis_password_key | default('password') }}"
{% endif %}

{% if lions_redis_custom_env_vars is defined %}
            # Variables personnalis√©es
            {{- lions_redis_custom_env_vars | to_nice_yaml | indent(12) }}
{% endif %}

          # Configuration des ressources
          resources:
            requests:
              cpu: "{{ lions_redis_resources[lions_environment].requests.cpu | default(lions_resources_small_cpu_request) }}"
              memory: "{{ lions_redis_resources[lions_environment].requests.memory | default(lions_resources_small_memory_request) }}"
            limits:
              cpu: "{{ lions_redis_resources[lions_environment].limits.cpu | default(lions_resources_small_cpu_limit) }}"
              memory: "{{ lions_redis_resources[lions_environment].limits.memory | default(lions_resources_small_memory_limit) }}"

          # Sondes de sant√©
          startupProbe:
            {{- lions_redis_startup_probe | default({
              'tcpSocket': {
                'port': lions_redis_port | default('6379')
              },
              'initialDelaySeconds': 10,
              'periodSeconds': 5,
              'timeoutSeconds': 3,
              'successThreshold': 1,
              'failureThreshold': 30
            }) | to_nice_yaml | indent(12) }}

          readinessProbe:
            {{- lions_redis_readiness_probe | default({
              'exec': {
                'command': [
                  'redis-cli',
                  '-p', lions_redis_port | default('6379') | string,
                  'ping'
                ]
              },
              'initialDelaySeconds': 5,
              'periodSeconds': 10,
              'timeoutSeconds': 5,
              'successThreshold': 1,
              'failureThreshold': 3
            }) | to_nice_yaml | indent(12) }}

          livenessProbe:
            {{- lions_redis_liveness_probe | default({
              'exec': {
                'command': [
                  'redis-cli',
                  '-p', lions_redis_port | default('6379') | string,
                  'ping'
                ]
              },
              'initialDelaySeconds': 30,
              'periodSeconds': 30,
              'timeoutSeconds': 10,
              'successThreshold': 1,
              'failureThreshold': 3
            }) | to_nice_yaml | indent(12) }}

          # Points de montage
          volumeMounts:
            # Donn√©es persistantes
            - name: redis-data
              mountPath: /data

            # Configuration
            - name: redis-config
              mountPath: /etc/redis
              readOnly: true

            # R√©pertoire temporaire
            - name: tmp
              mountPath: /tmp

            # Scripts
            - name: init-scripts
              mountPath: /scripts
              readOnly: true

{% if lions_redis_tls_enabled | default('false') | bool %}
            # Certificats TLS
            - name: tls-certs
              mountPath: /etc/ssl/redis
              readOnly: true
{% endif %}

          # Configuration de s√©curit√© du container
          securityContext:
            runAsNonRoot: true
            runAsUser: {{ lions_redis_user_id | default('999') }}
            runAsGroup: {{ lions_redis_group_id | default('999') }}
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false  # Redis a besoin d'√©crire ses logs
            capabilities:
              drop: ["ALL"]
              add: ["CHOWN", "SETGID", "SETUID"]  # Minimal pour Redis

{% if lions_redis_monitoring_enabled | default('true') | bool %}
        # Container Redis Exporter pour Prometheus
        - name: redis-exporter
          image: "{{ lions_redis_exporter_image | default('oliver006/redis_exporter:v1.55.0') }}"
          imagePullPolicy: {{ lions_redis_image_pull_policy | default('IfNotPresent') }}

          # Arguments de configuration
          args:
            - "--redis.addr=redis://127.0.0.1:{{ lions_redis_port | default('6379') }}"
            - "--web.listen-address=:{{ lions_redis_prometheus_port | default('9121') }}"
            - "--log-format={{ lions_redis_exporter_log_format | default('txt') }}"
{% if lions_redis_password_enabled | default('false') | bool %}
            - "--redis.password=$(REDIS_PASSWORD)"
{% endif %}
{% if lions_redis_exporter_custom_args is defined %}
            {{- lions_redis_exporter_custom_args | to_nice_yaml | indent(12) }}
{% endif %}

          # Port d'exposition des m√©triques
          ports:
            - name: metrics
              containerPort: {{ lions_redis_prometheus_port | default('9121') }}
              protocol: TCP

          # Variables d'environnement pour l'exporter
          env:
            - name: REDIS_ADDR
              value: "redis://127.0.0.1:{{ lions_redis_port | default('6379') }}"
{% if lions_redis_password_enabled | default('false') | bool %}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ lions_redis_password_secret | default('redis-auth') }}"
                  key: "{{ lions_redis_password_key | default('password') }}"
{% endif %}

          # Ressources pour l'exporter
          resources:
            requests:
              cpu: "{{ lions_redis_exporter_resources.requests.cpu | default('10m') }}"
              memory: "{{ lions_redis_exporter_resources.requests.memory | default('32Mi') }}"
            limits:
              cpu: "{{ lions_redis_exporter_resources.limits.cpu | default('100m') }}"
              memory: "{{ lions_redis_exporter_resources.limits.memory | default('128Mi') }}"

          # Sondes de sant√© pour l'exporter
          readinessProbe:
            httpGet:
              path: /metrics
              port: {{ lions_redis_prometheus_port | default('9121') }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5

          livenessProbe:
            httpGet:
              path: /metrics
              port: {{ lions_redis_prometheus_port | default('9121') }}
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 10

          # Configuration de s√©curit√©
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534  # nobody
            runAsGroup: 65534
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
{% endif %}

{% if lions_redis_persistent_storage | default('true') | bool %}
  # Templates de volumes persistants
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: "{{ lions_redis_service_name | default('redis') }}"
          app.kubernetes.io/instance: "{{ lions_redis_service_name | default('redis') }}-{{ lions_environment }}"
          lions.dev/environment: "{{ lions_environment }}"
          lions.dev/component: "redis-data"
        annotations:
          lions.dev/backup-enabled: "{{ lions_redis_backup_enabled | default('true') | string }}"
          lions.dev/snapshot-schedule: "{{ lions_redis_snapshot_schedule | default('0 1 * * *') }}"
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: "{{ lions_redis_storage_class | default(lions_storage_class_default) }}"
        resources:
          requests:
            storage: "{{ lions_redis_storage_size | default('5Gi') }}"
{% endif %}

# =========================================================================
# FIN DU TEMPLATE REDIS STATEFULSET
# =========================================================================