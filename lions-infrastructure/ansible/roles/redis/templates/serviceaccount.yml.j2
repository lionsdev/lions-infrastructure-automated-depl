---
# =========================================================================
# LIONS INFRASTRUCTURE 5.0 - REDIS SERVICEACCOUNT TEMPLATE
# =========================================================================
# Titre: Template ServiceAccount Kubernetes pour Redis
# Description: ServiceAccount sécurisé pour Redis avec RBAC intégré
# Auteur: Équipe LIONS Infrastructure DevOps
# Date: {{ ansible_date_time.iso8601 }}
# Version: 5.0.0
# Documentation: https://docs.lions.dev/infrastructure/redis/serviceaccount
# =========================================================================

apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ redis_service_account_name | default('redis-sa') }}
  namespace: {{ redis_namespace | default(lions_redis_namespace) }}
  labels:
    # Labels standard Kubernetes
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ redis_instance_name | default('redis') }}
    app.kubernetes.io/version: {{ redis_version | default(lions_redis_version) }}
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: {{ lions_project_name | default('lions-infrastructure') }}
    app.kubernetes.io/managed-by: ansible

    # Labels LIONS spécifiques
    lions.dev/environment: {{ lions_environment }}
    lions.dev/project: {{ lions_project_name | default('lions-infrastructure') }}
    lions.dev/service-type: database
    lions.dev/technology: redis
    lions.dev/tier: data
    lions.dev/backup-enabled: "{{ redis_backup_enabled | default('true') }}"
    lions.dev/monitoring-enabled: "{{ redis_monitoring_enabled | default('true') }}"

    # Labels de gouvernance
    cost-center: {{ redis_cost_center | default('infrastructure') }}
    team: {{ redis_team | default('platform') }}
    criticality: {{ redis_criticality | default('high') }}

  annotations:
    # Métadonnées descriptives
    description: "ServiceAccount sécurisé pour Redis {{ redis_instance_name | default('redis') }}"
    version: "{{ redis_version | default(lions_redis_version) }}"
    deployed-by: "ansible-{{ ansible_user }}"
    deployment-date: "{{ ansible_date_time.iso8601 }}"

    # Configuration de sécurité
    security.lions.dev/pod-security-policy: "restricted"
    security.lions.dev/network-policy: "{{ redis_network_policy_enabled | default('true') }}"
    security.lions.dev/rbac-enabled: "{{ redis_rbac_enabled | default('true') }}"

    # Configuration de monitoring
    monitoring.lions.dev/scrape: "{{ redis_monitoring_enabled | default('true') }}"
    monitoring.lions.dev/port: "{{ redis_metrics_port | default('9121') }}"
    monitoring.lions.dev/path: "/metrics"

    # Configuration de backup
    backup.lions.dev/enabled: "{{ redis_backup_enabled | default('true') }}"
    backup.lions.dev/schedule: "{{ redis_backup_schedule | default('0 2 * * *') }}"
    backup.lions.dev/retention: "{{ redis_backup_retention | default(lions_backup_retention_days) }}"

    # Intégration Vault
{% if lions_vault_enabled | default(false) %}
    vault.lions.dev/enabled: "true"
    vault.lions.dev/role: "redis-{{ redis_instance_name | default('redis') }}"
    vault.lions.dev/secret-path: "secret/data/redis/{{ redis_instance_name | default('redis') }}"
{% endif %}

    # Documentation et support
    documentation: "https://docs.lions.dev/services/redis"
    runbook: "https://docs.lions.dev/runbooks/redis"
    support-team: "{{ redis_support_team | default('platform-team') }}"
    slack-channel: "{{ redis_slack_channel | default('#infrastructure') }}"

    # Annotations de configuration
    config.lions.dev/persistence-enabled: "{{ redis_persistence_enabled | default('true') }}"
    config.lions.dev/ha-enabled: "{{ redis_ha_enabled | default('false') }}"
    config.lions.dev/cluster-mode: "{{ redis_cluster_mode | default('false') }}"
    config.lions.dev/max-memory: "{{ redis_max_memory | default('1Gi') }}"

    # Annotations de conformité
    compliance.lions.dev/data-classification: "{{ redis_data_classification | default('internal') }}"
    compliance.lions.dev/retention-policy: "{{ redis_retention_policy | default('30d') }}"
    compliance.lions.dev/audit-enabled: "{{ redis_audit_enabled | default('true') }}"

# Configuration automatique des secrets
automountServiceAccountToken: {{ redis_automount_token | default('true') }}

# Secrets associés au ServiceAccount
{% if redis_image_pull_secrets is defined and redis_image_pull_secrets | length > 0 %}
imagePullSecrets:
{% for secret in redis_image_pull_secrets %}
  - name: {{ secret }}
{% endfor %}
{% endif %}

---
# =========================================================================
# RBAC: ROLE POUR REDIS
# =========================================================================
{% if redis_rbac_enabled | default(true) %}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ redis_service_account_name | default('redis-sa') }}-role
  namespace: {{ redis_namespace | default(lions_redis_namespace) }}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ redis_instance_name | default('redis') }}
    app.kubernetes.io/component: rbac
    lions.dev/environment: {{ lions_environment }}
  annotations:
    description: "Role RBAC pour Redis {{ redis_instance_name | default('redis') }}"
rules:
  # Permissions pour les ConfigMaps
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
    resourceNames:
      - "{{ redis_instance_name | default('redis') }}-config"

  # Permissions pour les Secrets
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
    resourceNames:
      - "{{ redis_instance_name | default('redis') }}-secret"
{% if lions_vault_enabled | default(false) %}
      - "{{ redis_instance_name | default('redis') }}-vault-secret"
{% endif %}

  # Permissions pour les Services
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch"]
    resourceNames:
      - "{{ redis_instance_name | default('redis') }}"
      - "{{ redis_instance_name | default('redis') }}-headless"

  # Permissions pour les Endpoints
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch"]

  # Permissions pour les PersistentVolumeClaims
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
    resourceNames:
      - "{{ redis_instance_name | default('redis') }}-data"

  # Permissions pour les Events (lecture seule)
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch"]

---
# =========================================================================
# RBAC: ROLEBINDING POUR REDIS
# =========================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ redis_service_account_name | default('redis-sa') }}-binding
  namespace: {{ redis_namespace | default(lions_redis_namespace) }}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ redis_instance_name | default('redis') }}
    app.kubernetes.io/component: rbac
    lions.dev/environment: {{ lions_environment }}
  annotations:
    description: "RoleBinding RBAC pour Redis {{ redis_instance_name | default('redis') }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ redis_service_account_name | default('redis-sa') }}-role
subjects:
  - kind: ServiceAccount
    name: {{ redis_service_account_name | default('redis-sa') }}
    namespace: {{ redis_namespace | default(lions_redis_namespace) }}
{% endif %}

---
# =========================================================================
# NETWORK POLICY POUR REDIS (SI ACTIVÉE)
# =========================================================================
{% if redis_network_policy_enabled | default(true) and lions_security_network_policies | default(true) %}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ redis_instance_name | default('redis') }}-network-policy
  namespace: {{ redis_namespace | default(lions_redis_namespace) }}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ redis_instance_name | default('redis') }}
    app.kubernetes.io/component: security
    lions.dev/environment: {{ lions_environment }}
  annotations:
    description: "Network Policy pour Redis {{ redis_instance_name | default('redis') }}"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: {{ redis_instance_name | default('redis') }}

  policyTypes:
    - Ingress
    - Egress

  ingress:
    # Autoriser les connexions depuis les applications autorisées
    - from:
        - namespaceSelector:
            matchLabels:
              name: {{ lions_keycloak_namespace | default('security') }}
        - namespaceSelector:
            matchLabels:
              name: {{ lions_quarkus_namespace | default('applications') }}
        - namespaceSelector:
            matchLabels:
              name: {{ lions_primereact_namespace | default('applications') }}
        - namespaceSelector:
            matchLabels:
              name: {{ lions_primefaces_namespace | default('applications') }}
      ports:
        - protocol: TCP
          port: {{ redis_port | default(lions_redis_port) }}

    # Autoriser le monitoring
    - from:
        - namespaceSelector:
            matchLabels:
              name: {{ lions_monitoring_namespace | default('monitoring') }}
      ports:
        - protocol: TCP
          port: {{ redis_metrics_port | default('9121') }}

  egress:
    # Autoriser les connexions DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

    # Autoriser les connexions vers Vault si activé
{% if lions_vault_enabled | default(false) %}
    - to:
        - namespaceSelector:
            matchLabels:
              name: {{ lions_vault_namespace | default('vault-system') }}
      ports:
        - protocol: TCP
          port: {{ lions_vault_port | default('8200') }}
{% endif %}
{% endif %}

---
# =========================================================================
# POD SECURITY POLICY (SI SUPPORTÉE)
# =========================================================================
{% if redis_pod_security_policy_enabled | default(false) %}
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: {{ redis_instance_name | default('redis') }}-psp
  namespace: {{ redis_namespace | default(lions_redis_namespace) }}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ redis_instance_name | default('redis') }}
    app.kubernetes.io/component: security
    lions.dev/environment: {{ lions_environment }}
  annotations:
    description: "Pod Security Policy pour Redis {{ redis_instance_name | default('redis') }}"
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName: 'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
{% endif %}