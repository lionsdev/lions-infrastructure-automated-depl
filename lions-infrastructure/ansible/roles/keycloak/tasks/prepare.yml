---
# =========================================================================
# LIONS INFRASTRUCTURE 5.0 - KEYCLOAK PREPARATION TASKS
# =========================================================================
# Description: Pr√©paration s√©curis√©e et robuste des ressources Keycloak
# Auteur: DevOps Team LIONS Infrastructure
# Date: 2025-05-27
# Version: 5.0.0
# Maintainer: devops@lions.dev
# =========================================================================

# =========================================================================
# VARIABLES ET PR√âREQUIS
# =========================================================================
- name: "PREPARATION | V√©rification des variables critiques"
  assert:
    that:
      - keycloak_namespace is defined
      - keycloak_service_name is defined
      - keycloak_version is defined
      - keycloak_admin_user is defined
    fail_msg: "‚ùå Variables critiques manquantes pour Keycloak"
    success_msg: "‚úÖ Variables critiques valid√©es"
  tags:
    - validation
    - keycloak
    - security

- name: "PREPARATION | Debug - Affichage de la configuration Keycloak"
  debug:
    msg:
      - "üîß Configuration Keycloak:"
      - "   - Namespace: {{ keycloak_namespace }}"
      - "   - Service: {{ keycloak_service_name }}"
      - "   - Version: {{ keycloak_version }}"
      - "   - Environment: {{ lions_environment }}"
      - "   - TLS Enabled: {{ lions_security_tls_enabled | default(true) }}"
      - "   - Monitoring Enabled: {{ lions_monitoring_enabled | default(true) }}"
  when: lions_debug_mode | default(false) | bool
  tags:
    - debug
    - keycloak

# =========================================================================
# PR√âPARATION DU NAMESPACE
# =========================================================================
- name: "PREPARATION | V√©rification de l'existence du namespace"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ keycloak_namespace }}"
  register: namespace_check
  failed_when: false
  tags:
    - namespace
    - keycloak

- name: "PREPARATION | Cr√©ation du namespace si n√©cessaire"
  kubernetes.core.k8s:
    name: "{{ keycloak_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
    definition:
      metadata:
        name: "{{ keycloak_namespace }}"
        labels:
          app.kubernetes.io/name: keycloak
          app.kubernetes.io/component: security
          app.kubernetes.io/part-of: lions-infrastructure
          app.kubernetes.io/version: "{{ keycloak_version }}"
          app.kubernetes.io/managed-by: ansible
          lions.dev/environment: "{{ lions_environment }}"
          lions.dev/tier: security
        annotations:
          lions.dev/created-by: "{{ ansible_user | default('lions-automation') }}"
          lions.dev/created-at: "{{ ansible_date_time.iso8601 }}"
  when: namespace_check.resources | length == 0
  register: namespace_creation
  tags:
    - namespace
    - keycloak

# =========================================================================
# PR√âPARATION DES R√âPERTOIRES DE TRAVAIL
# =========================================================================
- name: "PREPARATION | Cr√©ation du r√©pertoire temporaire pour les manifests"
  ansible.builtin.tempfile:
    state: directory
    suffix: ".keycloak.{{ ansible_date_time.epoch }}"
    prefix: "lions-"
  register: keycloak_temp_dir
  changed_when: false
  tags:
    - filesystem
    - keycloak

- name: "PREPARATION | Cr√©ation des sous-r√©pertoires de travail"
  ansible.builtin.file:
    path: "{{ keycloak_temp_dir.path }}/{{ item }}"
    state: directory
    mode: '0750'
  loop:
    - manifests
    - configs
    - secrets
    - backup
  register: work_directories
  tags:
    - filesystem
    - keycloak

# =========================================================================
# GESTION DES SECRETS ET S√âCURIT√â
# =========================================================================
- name: "SECURITY | V√©rification des secrets existants"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: "{{ keycloak_namespace }}"
    name: "{{ item.name }}"
  loop:
    - name: "{{ keycloak_admin_password_secret | default('keycloak-admin-secret') }}"
      description: "Secret administrateur Keycloak"
      required: true
    - name: "{{ keycloak_database_password_secret | default('keycloak-db-secret') }}"
      description: "Secret base de donn√©es Keycloak"
      required: true
    - name: "{{ keycloak_tls_secret | default('keycloak-tls-secret') }}"
      description: "Certificat TLS Keycloak"
      required: "{{ lions_security_tls_enabled | default(true) | bool }}"
  register: secrets_check
  failed_when: false
  tags:
    - security
    - secrets
    - keycloak

- name: "SECURITY | Analyse des secrets manquants"
  set_fact:
    missing_secrets: >-
      {{
        secrets_check.results |
        selectattr('resources', 'defined') |
        selectattr('resources', 'equalto', []) |
        map(attribute='item') |
        list
      }}
  tags:
    - security
    - secrets
    - keycloak

- name: "SECURITY | G√©n√©ration automatique des secrets manquants (dev uniquement)"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.name }}"
        namespace: "{{ keycloak_namespace }}"
        labels:
          app.kubernetes.io/name: keycloak
          app.kubernetes.io/component: security
          app.kubernetes.io/managed-by: ansible
          lions.dev/environment: "{{ lions_environment }}"
          lions.dev/auto-generated: "true"
        annotations:
          lions.dev/created-by: "{{ ansible_user | default('lions-automation') }}"
          lions.dev/created-at: "{{ ansible_date_time.iso8601 }}"
          lions.dev/warning: "Auto-generated secret for development only"
      type: Opaque
      data:
        password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') | b64encode }}"
        username: "{{ (item.name == keycloak_admin_password_secret | default('keycloak-admin-secret')) | ternary(keycloak_admin_user | default('admin'), 'keycloak') | b64encode }}"
    state: present
  loop: "{{ missing_secrets }}"
  when:
    - lions_environment == 'development'
    - item.required | bool
    - keycloak_auto_generate_secrets | default(false) | bool
  register: secrets_generation
  no_log: true
  tags:
    - security
    - secrets
    - keycloak
    - development

- name: "SECURITY | Alerte pour secrets manquants en production"
  ansible.builtin.fail:
    msg: |
      ‚ùå ERREUR CRITIQUE - Secrets manquants en environnement {{ lions_environment }}:
      
      {% for secret in missing_secrets %}
      {% if secret.required | bool %}
      - {{ secret.name }}: {{ secret.description }}
        Commande: kubectl create secret generic {{ secret.name }} \
                    --from-literal=username=<USERNAME> \
                    --from-literal=password=<PASSWORD> \
                    --namespace {{ keycloak_namespace }}
      {% endif %}
      {% endfor %}
      
      üîí Les secrets doivent √™tre cr√©√©s manuellement pour des raisons de s√©curit√©.
  when:
    - lions_environment in ['staging', 'production']
    - missing_secrets | selectattr('required', 'equalto', true) | list | length > 0
  tags:
    - security
    - secrets
    - keycloak
    - production

- name: "SECURITY | Avertissement pour secrets manquants en d√©veloppement"
  debug:
    msg: |
      ‚ö†Ô∏è  AVERTISSEMENT - Secrets manquants d√©tect√©s:
      
      {% for secret in missing_secrets %}
      {% if secret.required | bool %}
      - {{ secret.name }}: {{ secret.description }}
      {% endif %}
      {% endfor %}
      
      üí° En d√©veloppement, vous pouvez activer 'keycloak_auto_generate_secrets: true' 
         pour g√©n√©rer automatiquement des secrets temporaires.
  when:
    - lions_environment == 'development'
    - missing_secrets | selectattr('required', 'equalto', true) | list | length > 0
    - not (keycloak_auto_generate_secrets | default(false) | bool)
  tags:
    - security
    - secrets
    - keycloak
    - development

# =========================================================================
# G√âN√âRATION DES MANIFESTS KUBERNETES
# =========================================================================
- name: "MANIFESTS | Liste des templates √† g√©n√©rer"
  set_fact:
    keycloak_templates:
      - name: serviceaccount
        src: serviceaccount.yml.j2
        dest: serviceaccount.yml
        required: true
      - name: configmap
        src: configmap.yml.j2
        dest: configmap.yml
        required: true
      - name: persistentvolumeclaim
        src: persistentvolumeclaim.yml.j2
        dest: persistentvolumeclaim.yml
        required: "{{ keycloak_persistent_storage | default(true) | bool }}"
      - name: deployment
        src: deployment.yml.j2
        dest: deployment.yml
        required: true
      - name: service
        src: service.yml.j2
        dest: service.yml
        required: true
      - name: ingress
        src: ingress.yml.j2
        dest: ingress.yml
        required: "{{ keycloak_ingress_enabled | default(true) | bool }}"
      - name: servicemonitor
        src: servicemonitor.yml.j2
        dest: servicemonitor.yml
        required: "{{ lions_monitoring_enabled | default(true) | bool }}"
  tags:
    - manifests
    - keycloak

- name: "MANIFESTS | G√©n√©ration des manifests Kubernetes"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ keycloak_temp_dir.path }}/manifests/{{ item.dest }}"
    mode: '0640'
    backup: false
  loop: "{{ keycloak_templates }}"
  when: item.required | bool
  register: manifests_generation
  tags:
    - manifests
    - keycloak

- name: "MANIFESTS | Validation de la g√©n√©ration des manifests"
  ansible.builtin.stat:
    path: "{{ keycloak_temp_dir.path }}/manifests/{{ item.dest }}"
  loop: "{{ keycloak_templates }}"
  when: item.required | bool
  register: manifests_validation
  failed_when: not manifests_validation.stat.exists
  tags:
    - manifests
    - validation
    - keycloak

# =========================================================================
# VALIDATION YAML ET KUBERNETES
# =========================================================================
- name: "VALIDATION | V√©rification de la syntaxe YAML des manifests"
  ansible.builtin.include_tasks: validate_yaml.yml
  vars:
    yaml_file: "{{ keycloak_temp_dir.path }}/manifests/{{ item.dest }}"
    component_name: "keycloak-{{ item.name }}"
  loop: "{{ keycloak_templates }}"
  when: item.required | bool
  tags:
    - validation
    - yaml
    - keycloak

- name: "VALIDATION | Dry-run des manifests Kubernetes"
  kubernetes.core.k8s:
    state: present
    src: "{{ keycloak_temp_dir.path }}/manifests/{{ item.dest }}"
    dry_run: true
    validate:
      fail_on_error: true
      strict: true
  loop: "{{ keycloak_templates }}"
  when:
    - item.required | bool
    - lions_validation_enabled | default(true) | bool
  register: dryrun_validation
  tags:
    - validation
    - kubernetes
    - keycloak

# =========================================================================
# PR√âPARATION DES RESSOURCES DE BASE
# =========================================================================
- name: "RESOURCES | Cr√©ation du ServiceAccount Keycloak"
  kubernetes.core.k8s:
    state: present
    src: "{{ keycloak_temp_dir.path }}/manifests/serviceaccount.yml"
    wait: true
    wait_timeout: "{{ lions_timeout_default | default(300) }}"
    wait_condition:
      type: Ready
      status: "True"
  register: serviceaccount_creation
  retries: 3
  delay: 10
  until: serviceaccount_creation is succeeded
  tags:
    - resources
    - serviceaccount
    - keycloak

- name: "RESOURCES | Cr√©ation du ConfigMap Keycloak"
  kubernetes.core.k8s:
    state: present
    src: "{{ keycloak_temp_dir.path }}/manifests/configmap.yml"
    wait: true
    wait_timeout: "{{ lions_timeout_default | default(300) }}"
  register: configmap_creation
  retries: 3
  delay: 5
  until: configmap_creation is succeeded
  tags:
    - resources
    - configmap
    - keycloak

- name: "RESOURCES | Cr√©ation du PersistentVolumeClaim Keycloak"
  kubernetes.core.k8s:
    state: present
    src: "{{ keycloak_temp_dir.path }}/manifests/persistentvolumeclaim.yml"
    wait: true
    wait_timeout: "{{ lions_timeout_default | default(300) }}"
    wait_condition:
      type: Bound
      status: "True"
  when: keycloak_persistent_storage | default(true) | bool
  register: pvc_creation
  retries: 5
  delay: 15
  until: pvc_creation is succeeded
  tags:
    - resources
    - storage
    - keycloak

# =========================================================================
# V√âRIFICATIONS POST-PR√âPARATION
# =========================================================================
- name: "VERIFICATION | V√©rification de l'√©tat des ressources cr√©√©es"
  kubernetes.core.k8s_info:
    api_version: "{{ item.api_version }}"
    kind: "{{ item.kind }}"
    namespace: "{{ keycloak_namespace }}"
    name: "{{ item.name }}"
  loop:
    - api_version: v1
      kind: ServiceAccount
      name: "{{ keycloak_service_name }}"
    - api_version: v1
      kind: ConfigMap
      name: "{{ keycloak_service_name }}-config"
    - api_version: v1
      kind: PersistentVolumeClaim
      name: "{{ keycloak_service_name }}-data"
  register: resources_verification
  failed_when: resources_verification.resources | length == 0
  tags:
    - verification
    - keycloak

- name: "VERIFICATION | Contr√¥le de la sant√© du cluster"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
  register: cluster_health
  failed_when:
    - cluster_health.resources | length == 0
    - cluster_health.resources | selectattr('status.conditions', 'defined') | selectattr('status.conditions', 'selectattr', 'type', 'equalto', 'Ready') | selectattr('status.conditions', 'selectattr', 'status', 'equalto', 'True') | list | length == 0
  tags:
    - verification
    - cluster
    - keycloak

# =========================================================================
# NETTOYAGE ET FINALISATION
# =========================================================================
- name: "CLEANUP | Enregistrement des chemins des manifests"
  set_fact:
    keycloak_manifest_paths: >-
      {{
        keycloak_templates |
        selectattr('required', 'equalto', true) |
        map('regex_replace', '^(.*)$', keycloak_temp_dir.path + '/manifests/\1.dest') |
        list
      }}
  tags:
    - cleanup
    - keycloak

- name: "CLEANUP | Sauvegarde des manifests (optionnel)"
  ansible.builtin.copy:
    src: "{{ keycloak_temp_dir.path }}/manifests/"
    dest: "{{ keycloak_backup_manifests_path | default('/tmp/keycloak-manifests-' + ansible_date_time.epoch) }}/"
    mode: '0640'
    remote_src: true
  when: keycloak_backup_manifests | default(false) | bool
  tags:
    - cleanup
    - backup
    - keycloak

# =========================================================================
# LOGS ET RAPPORT FINAL
# =========================================================================
- name: "RAPPORT | R√©sum√© de la pr√©paration Keycloak"
  debug:
    msg:
      - "‚úÖ Pr√©paration Keycloak termin√©e avec succ√®s"
      - ""
      - "üìä R√©sum√© des op√©rations:"
      - "   - Namespace: {{ keycloak_namespace }} ({{ 'cr√©√©' if namespace_creation.changed else 'existant' }})"
      - "   - ServiceAccount: {{ 'cr√©√©' if serviceaccount_creation.changed else 'existant' }}"
      - "   - ConfigMap: {{ 'cr√©√©' if configmap_creation.changed else 'existant' }}"
      - "   - PVC: {{ 'cr√©√©' if (pvc_creation.changed and keycloak_persistent_storage | default(true) | bool) else ('non requis' if not keycloak_persistent_storage | default(true) | bool else 'existant') }}"
      - ""
      - "üîß Configuration:"
      - "   - Version Keycloak: {{ keycloak_version }}"
      - "   - Environnement: {{ lions_environment }}"
      - "   - Stockage persistant: {{ keycloak_persistent_storage | default(true) | bool }}"
      - "   - TLS activ√©: {{ lions_security_tls_enabled | default(true) | bool }}"
      - "   - Monitoring activ√©: {{ lions_monitoring_enabled | default(true) | bool }}"
      - ""
      - "üìÇ Manifests g√©n√©r√©s dans: {{ keycloak_temp_dir.path }}/manifests/"
  tags:
    - report
    - keycloak

- name: "RAPPORT | Exportation des variables pour les t√¢ches suivantes"
  set_fact:
    keycloak_preparation_completed: true
    keycloak_manifests_path: "{{ keycloak_temp_dir.path }}/manifests"
    keycloak_preparation_timestamp: "{{ ansible_date_time.iso8601 }}"
  tags:
    - export
    - keycloak

# =========================================================================
# FIN DE LA PR√âPARATION KEYCLOAK
# =========================================================================