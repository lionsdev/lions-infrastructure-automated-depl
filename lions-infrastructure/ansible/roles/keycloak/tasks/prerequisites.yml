---
# =========================================================================
# LIONS INFRASTRUCTURE 5.0 - KEYCLOAK PREREQUISITES
# =========================================================================
# Description: V√©rification et pr√©paration des pr√©requis pour le d√©ploiement de Keycloak
# Version: 5.0.0
# Maintainer: DevOps Team LIONS
# Date: "{{ ansible_date_time.date }}"
# Documentation: https://docs.lions.dev/infrastructure/keycloak/prerequisites
# =========================================================================

# =========================================================================
# SECTION 1: VALIDATION DES VARIABLES CRITIQUES
# =========================================================================
- name: "üîç [VALIDATION] V√©rification des variables critiques Keycloak"
  block:
    - name: "Validation de la configuration Keycloak"
      assert:
        that:
          - keycloak_namespace is defined and keycloak_namespace != ""
          - keycloak_service_name is defined and keycloak_service_name != ""
          - keycloak_version is defined and keycloak_version != ""
          - keycloak_port is defined and keycloak_port != ""
          - lions_environment is defined and lions_environment != ""
        fail_msg: "‚ùå Variables critiques Keycloak manquantes ou vides"
        success_msg: "‚úÖ Variables critiques Keycloak valid√©es"
      tags: ['validation', 'keycloak']

    - name: "Validation de la configuration des ressources"
      assert:
        that:
          - keycloak_resources_cpu_request is defined
          - keycloak_resources_memory_request is defined
          - keycloak_resources_cpu_limit is defined
          - keycloak_resources_memory_limit is defined
        fail_msg: "‚ùå Configuration des ressources Keycloak incompl√®te"
        success_msg: "‚úÖ Configuration des ressources Keycloak valid√©e"
      tags: ['validation', 'resources']

  rescue:
    - name: "‚ùå √âchec de la validation des variables"
      fail:
        msg: |
          La validation des variables critiques a √©chou√©.
          V√©rifiez que toutes les variables requises sont d√©finies dans:
          - ansible/vars/common.yml
          - ansible/vars/{{ lions_environment }}.yml
          - ansible/roles/keycloak/vars/main.yml

# =========================================================================
# SECTION 2: V√âRIFICATION DE L'INFRASTRUCTURE KUBERNETES
# =========================================================================
- name: "üèóÔ∏è [INFRASTRUCTURE] V√©rification de l'√©tat du cluster Kubernetes"
  block:
    - name: "V√©rification de la connectivit√© au cluster K8s"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: k8s_nodes_info
      failed_when: false
      tags: ['infrastructure', 'k8s']

    - name: "Validation de la connectivit√© K8s"
      assert:
        that:
          - k8s_nodes_info is succeeded
          - k8s_nodes_info.resources | length > 0
        fail_msg: "‚ùå Impossible de se connecter au cluster Kubernetes"
        success_msg: "‚úÖ Connectivit√© au cluster Kubernetes valid√©e"

    - name: "Collecte des informations sur les n≈ìuds"
      set_fact:
        k8s_cluster_info:
          nodes_count: "{{ k8s_nodes_info.resources | length }}"
          nodes_ready: "{{ k8s_nodes_info.resources | json_query('[?status.conditions[?type==`Ready` && status==`True`]]') | length }}"
          kubernetes_version: "{{ k8s_nodes_info.resources[0].status.nodeInfo.kubeletVersion | default('unknown') }}"

    - name: "Affichage des informations cluster"
      debug:
        msg: |
          üìä Informations du cluster Kubernetes:
          - N≈ìuds total: {{ k8s_cluster_info.nodes_count }}
          - N≈ìuds pr√™ts: {{ k8s_cluster_info.nodes_ready }}
          - Version K8s: {{ k8s_cluster_info.kubernetes_version }}
      tags: ['information']

  rescue:
    - name: "‚ùå √âchec de v√©rification de l'infrastructure K8s"
      fail:
        msg: |
          Impossible de v√©rifier l'√©tat du cluster Kubernetes.
          V√©rifiez que:
          - Le cluster K8s est accessible
          - Les credentials kubectl sont configur√©s
          - Le service kube-apiserver fonctionne

# =========================================================================
# SECTION 3: GESTION DES NAMESPACES
# =========================================================================
- name: "üìÅ [NAMESPACE] Gestion du namespace Keycloak"
  block:
    - name: "V√©rification de l'existence du namespace {{ keycloak_namespace }}"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ keycloak_namespace }}"
      register: keycloak_namespace_info
      tags: ['namespace']

    - name: "Cr√©ation du namespace {{ keycloak_namespace }}"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ keycloak_namespace }}"
            labels:
              app.kubernetes.io/name: "keycloak"
              app.kubernetes.io/component: "identity-provider"
              app.kubernetes.io/part-of: "lions-infrastructure"
              app.kubernetes.io/managed-by: "ansible"
              app.kubernetes.io/version: "{{ keycloak_version }}"
              lions.dev/environment: "{{ lions_environment }}"
              lions.dev/service-type: "security"
            annotations:
              lions.dev/created-by: "ansible-{{ ansible_user | default('automation') }}"
              lions.dev/created-date: "{{ ansible_date_time.iso8601 }}"
              lions.dev/description: "Namespace for Keycloak identity and access management"
      when: keycloak_namespace_info.resources | length == 0
      tags: ['namespace', 'creation']

    - name: "Validation des permissions dans le namespace"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "keycloak-access-validation"
            namespace: "{{ keycloak_namespace }}"
            labels:
              lions.dev/test: "access-validation"
          data:
            validation: "{{ ansible_date_time.iso8601 }}"
            environment: "{{ lions_environment }}"
      register: access_validation_result
      tags: ['validation', 'permissions']

    - name: "Nettoyage du ConfigMap de validation"
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: ConfigMap
        name: "keycloak-access-validation"
        namespace: "{{ keycloak_namespace }}"
      when: access_validation_result is succeeded
      tags: ['cleanup']

  rescue:
    - name: "‚ùå √âchec de gestion du namespace"
      fail:
        msg: |
          Impossible de cr√©er ou d'acc√©der au namespace {{ keycloak_namespace }}.
          V√©rifiez que vous avez les permissions suffisantes.

# =========================================================================
# SECTION 4: V√âRIFICATION DES D√âPENDANCES CRITIQUES
# =========================================================================
- name: "üîó [DEPENDENCIES] V√©rification des d√©pendances critiques"
  block:
    # V√©rification de PostgreSQL
    - name: "V√©rification du service PostgreSQL"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "{{ keycloak_database_service }}"
        namespace: "{{ keycloak_database_namespace }}"
      register: postgres_service_info
      tags: ['dependencies', 'database']

    - name: "Validation de la disponibilit√© PostgreSQL"
      set_fact:
        postgres_available: "{{ postgres_service_info.resources | length > 0 }}"

    - name: "Test de connectivit√© PostgreSQL"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: "postgres-connectivity-test"
            namespace: "{{ keycloak_namespace }}"
            labels:
              lions.dev/test: "connectivity"
          spec:
            restartPolicy: Never
            containers:
              - name: postgres-test
                image: "postgres:{{ postgres_version | default('15') }}-alpine"
                command:
                  - "/bin/sh"
                  - "-c"
                  - |
                    pg_isready -h {{ keycloak_database_service }}.{{ keycloak_database_namespace }}.svc.cluster.local -p {{ postgres_port | default('5432') }} -U {{ keycloak_database_user | default('keycloak') }}
                env:
                  - name: PGPASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: "{{ keycloak_database_secret }}"
                        key: "password"
                        optional: true
      register: postgres_test_creation
      when: postgres_available
      failed_when: false
      tags: ['connectivity', 'database']

    # Attendre et v√©rifier le r√©sultat du test
    - name: "Attente du r√©sultat du test PostgreSQL"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        name: "postgres-connectivity-test"
        namespace: "{{ keycloak_namespace }}"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 60
      register: postgres_test_result
      when: postgres_available and postgres_test_creation is succeeded
      failed_when: false
      tags: ['connectivity']

    # Nettoyage du pod de test
    - name: "Nettoyage du pod de test PostgreSQL"
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Pod
        name: "postgres-connectivity-test"
        namespace: "{{ keycloak_namespace }}"
      when: postgres_test_creation is succeeded
      tags: ['cleanup']

  rescue:
    - name: "‚ö†Ô∏è Avertissement sur les d√©pendances"
      debug:
        msg: |
          ‚ö†Ô∏è Certaines d√©pendances ne sont pas disponibles:
          - PostgreSQL: {{ 'Disponible' if postgres_available else 'Non disponible' }}
          
          Keycloak pourra √™tre d√©ploy√© mais pourrait ne pas fonctionner correctement
          sans toutes ses d√©pendances.

# =========================================================================
# SECTION 5: V√âRIFICATION DES COMPOSANTS D'INFRASTRUCTURE
# =========================================================================
- name: "üõ†Ô∏è [INFRASTRUCTURE] V√©rification des composants d'infrastructure"
  block:
    # V√©rification de l'Ingress Controller
    - name: "Detection de l'Ingress Controller"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        namespace: "{{ item.namespace }}"
        label_selectors:
          - "{{ item.selector }}"
      register: ingress_controllers
      loop:
        - { namespace: "kube-system", selector: "app.kubernetes.io/name=traefik" }
        - { namespace: "ingress-nginx", selector: "app.kubernetes.io/name=ingress-nginx" }
        - { namespace: "nginx-ingress", selector: "app=nginx-ingress" }
      failed_when: false
      tags: ['infrastructure', 'ingress']

    - name: "Identification de l'Ingress Controller actif"
      set_fact:
        active_ingress_controller: >-
          {%- for result in ingress_controllers.results -%}
            {%- if result.resources | length > 0 -%}
              {%- if 'traefik' in result.item.selector -%}traefik
              {%- elif 'ingress-nginx' in result.item.selector -%}nginx
              {%- elif 'nginx-ingress' in result.item.selector -%}nginx-legacy
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}

    # V√©rification de cert-manager
    - name: "V√©rification de cert-manager"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "cert-manager"
        namespace: "cert-manager"
      register: cert_manager_info
      failed_when: false
      tags: ['infrastructure', 'tls']

    # V√©rification des issuer TLS
    - name: "V√©rification des ClusterIssuer TLS"
      kubernetes.core.k8s_info:
        api_version: cert-manager.io/v1
        kind: ClusterIssuer
      register: cluster_issuers_info
      failed_when: false
      tags: ['infrastructure', 'tls']

    - name: "R√©sum√© de l'infrastructure disponible"
      debug:
        msg: |
          üèóÔ∏è √âtat de l'infrastructure:
          - Ingress Controller: {{ active_ingress_controller | default('Aucun d√©tect√©') }}
          - cert-manager: {{ 'Disponible' if cert_manager_info.resources | length > 0 else 'Non disponible' }}
          - ClusterIssuers: {{ cluster_issuers_info.resources | length if cluster_issuers_info is succeeded else 0 }}
          - TLS activ√©: {{ keycloak_tls_enabled | default(false) }}
      tags: ['information']

# =========================================================================
# SECTION 6: V√âRIFICATION DE VAULT (SI ACTIV√â)
# =========================================================================
- name: "üîê [VAULT] V√©rification de HashiCorp Vault"
  block:
    - name: "V√©rification du service Vault"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "{{ vault_service_name | default('vault') }}"
        namespace: "{{ vault_namespace | default('vault-system') }}"
      register: vault_service_info
      tags: ['vault', 'security']

    - name: "Test de connectivit√© Vault"
      uri:
        url: "{{ vault_addr | default('http://vault.vault-system.svc.cluster.local:8200') }}/v1/sys/health"
        method: GET
        status_code: [200, 429, 472, 473, 501, 503]
        timeout: 10
      register: vault_health_check
      when: vault_service_info.resources | length > 0
      failed_when: false
      tags: ['vault', 'connectivity']

    - name: "√âtat de Vault"
      debug:
        msg: |
          üîê √âtat de HashiCorp Vault:
          - Service disponible: {{ 'Oui' if vault_service_info.resources | length > 0 else 'Non' }}
          - Statut sant√©: {{ vault_health_check.status | default('Non test√©') if vault_health_check is defined else 'Non test√©' }}
          - Vault sera utilis√© pour: Secrets Keycloak
      tags: ['information']

  when: vault_enabled | default(false)

# =========================================================================
# SECTION 7: V√âRIFICATION DES RESSOURCES SYST√àME
# =========================================================================
- name: "üìä [RESOURCES] V√©rification des ressources syst√®me"
  block:
    - name: "Collecte des m√©triques de ressources des n≈ìuds"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: nodes_resources
      tags: ['resources', 'monitoring']

    - name: "Calcul des ressources disponibles"
      set_fact:
        cluster_resources:
          total_cpu: "{{ nodes_resources.resources | json_query('[].status.capacity.cpu') | map('int') | sum }}"
          total_memory: "{{ nodes_resources.resources | json_query('[].status.capacity.memory') | map('regex_replace', 'Ki$', '') | map('int') | sum }}"
          allocatable_cpu: "{{ nodes_resources.resources | json_query('[].status.allocatable.cpu') | map('int') | sum }}"
          allocatable_memory: "{{ nodes_resources.resources | json_query('[].status.allocatable.memory') | map('regex_replace', 'Ki$', '') | map('int') | sum }}"

    - name: "Validation des ressources requises"
      assert:
        that:
          - cluster_resources.allocatable_cpu | int >= (keycloak_resources_cpu_request | regex_replace('m$', '') | int / 1000)
          - (cluster_resources.allocatable_memory | int * 1024) >= (keycloak_resources_memory_request | regex_replace('Mi$', '') | int * 1024 * 1024)
        fail_msg: |
          ‚ùå Ressources insuffisantes pour d√©ployer Keycloak:
          - CPU requis: {{ keycloak_resources_cpu_request }}
          - M√©moire requise: {{ keycloak_resources_memory_request }}
          - CPU disponible: {{ cluster_resources.allocatable_cpu }}
          - M√©moire disponible: {{ (cluster_resources.allocatable_memory | int / 1024) | round }}Mi
        success_msg: "‚úÖ Ressources syst√®me suffisantes pour Keycloak"
      tags: ['validation', 'resources']

# =========================================================================
# SECTION 8: CR√âATION DES RESSOURCES PR√âPARATOIRES
# =========================================================================
- name: "üîß [PREPARATION] Cr√©ation des ressources pr√©paratoires"
  block:
    - name: "Cr√©ation des labels par d√©faut pour le namespace"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ keycloak_namespace }}"
            labels:
              pod-security.kubernetes.io/enforce: "{{ pod_security_standard | default('restricted') }}"
              pod-security.kubernetes.io/audit: "{{ pod_security_standard | default('restricted') }}"
              pod-security.kubernetes.io/warn: "{{ pod_security_standard | default('restricted') }}"
      when: pod_security_enabled | default(true)
      tags: ['security', 'pod-security']

    - name: "Cr√©ation d'une NetworkPolicy par d√©faut"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: "keycloak-default-network-policy"
            namespace: "{{ keycloak_namespace }}"
            labels:
              app.kubernetes.io/name: "keycloak"
              app.kubernetes.io/component: "network-policy"
          spec:
            podSelector:
              matchLabels:
                app.kubernetes.io/name: "keycloak"
            policyTypes:
              - Ingress
              - Egress
            ingress:
              - from:
                  - namespaceSelector:
                      matchLabels:
                        name: "{{ ingress_namespace | default('kube-system') }}"
                ports:
                  - protocol: TCP
                    port: {{ keycloak_port }}
            egress:
              - to:
                  - namespaceSelector:
                      matchLabels:
                        name: "{{ keycloak_database_namespace }}"
                ports:
                  - protocol: TCP
                    port: {{ postgres_port | default('5432') }}
              - to: []
                ports:
                  - protocol: TCP
                    port: 53
                  - protocol: UDP
                    port: 53
      when: network_policies_enabled | default(true)
      tags: ['security', 'network-policy']

# =========================================================================
# SECTION 9: R√âSUM√â ET VALIDATION FINALE
# =========================================================================
- name: "üìã [SUMMARY] R√©sum√© de la validation des pr√©requis"
  debug:
    msg: |
      üéØ R√âSUM√â DE LA VALIDATION DES PR√âREQUIS KEYCLOAK:
      
      ‚úÖ Configuration:
      - Namespace: {{ keycloak_namespace }}
      - Version: {{ keycloak_version }}
      - Environnement: {{ lions_environment }}
      - Port: {{ keycloak_port }}
      
      ‚úÖ Infrastructure:
      - Cluster K8s: Op√©rationnel ({{ k8s_cluster_info.nodes_ready }}/{{ k8s_cluster_info.nodes_count }} n≈ìuds)
      - Ingress Controller: {{ active_ingress_controller | default('Non d√©tect√©') }}
      - cert-manager: {{ 'Disponible' if cert_manager_info.resources | length > 0 else 'Non disponible' }}
      
      ‚úÖ D√©pendances:
      - PostgreSQL: {{ 'Disponible' if postgres_available else 'Non disponible' }}
      - Vault: {{ 'Activ√©' if vault_enabled | default(false) else 'D√©sactiv√©' }}
      
      ‚úÖ S√©curit√©:
      - TLS: {{ 'Activ√©' if keycloak_tls_enabled | default(false) else 'D√©sactiv√©' }}
      - NetworkPolicy: {{ 'Activ√©' if network_policies_enabled | default(true) else 'D√©sactiv√©' }}
      - Pod Security: {{ 'Activ√©' if pod_security_enabled | default(true) else 'D√©sactiv√©' }}
      
      üöÄ Keycloak est pr√™t √† √™tre d√©ploy√©!
  tags: ['summary', 'information']

- name: "‚úÖ Validation finale des pr√©requis"
  debug:
    msg: "Tous les pr√©requis pour le d√©ploiement de Keycloak ont √©t√© valid√©s avec succ√®s."
  tags: ['validation', 'completion']---
# =========================================================================
# LIONS INFRASTRUCTURE 5.0 - KEYCLOAK PREREQUISITES
# =========================================================================
# Description: V√©rification et pr√©paration des pr√©requis pour le d√©ploiement de Keycloak
# Version: 5.0.0
# Maintainer: DevOps Team LIONS
# Date: "{{ ansible_date_time.date }}"
# Documentation: https://docs.lions.dev/infrastructure/keycloak/prerequisites
# =========================================================================

# =========================================================================
# SECTION 1: VALIDATION DES VARIABLES CRITIQUES
# =========================================================================
- name: "üîç [VALIDATION] V√©rification des variables critiques Keycloak"
  block:
    - name: "Validation de la configuration Keycloak"
      assert:
        that:
          - keycloak_namespace is defined and keycloak_namespace != ""
          - keycloak_service_name is defined and keycloak_service_name != ""
          - keycloak_version is defined and keycloak_version != ""
          - keycloak_port is defined and keycloak_port != ""
          - lions_environment is defined and lions_environment != ""
        fail_msg: "‚ùå Variables critiques Keycloak manquantes ou vides"
        success_msg: "‚úÖ Variables critiques Keycloak valid√©es"
      tags: ['validation', 'keycloak']

    - name: "Validation de la configuration des ressources"
      assert:
        that:
          - keycloak_resources_cpu_request is defined
          - keycloak_resources_memory_request is defined
          - keycloak_resources_cpu_limit is defined
          - keycloak_resources_memory_limit is defined
        fail_msg: "‚ùå Configuration des ressources Keycloak incompl√®te"
        success_msg: "‚úÖ Configuration des ressources Keycloak valid√©e"
      tags: ['validation', 'resources']

  rescue:
    - name: "‚ùå √âchec de la validation des variables"
      fail:
        msg: |
          La validation des variables critiques a √©chou√©.
          V√©rifiez que toutes les variables requises sont d√©finies dans:
          - ansible/vars/common.yml
          - ansible/vars/{{ lions_environment }}.yml
          - ansible/roles/keycloak/vars/main.yml

# =========================================================================
# SECTION 2: V√âRIFICATION DE L'INFRASTRUCTURE KUBERNETES
# =========================================================================
- name: "üèóÔ∏è [INFRASTRUCTURE] V√©rification de l'√©tat du cluster Kubernetes"
  block:
    - name: "V√©rification de la connectivit√© au cluster K8s"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: k8s_nodes_info
      failed_when: false
      tags: ['infrastructure', 'k8s']

    - name: "Validation de la connectivit√© K8s"
      assert:
        that:
          - k8s_nodes_info is succeeded
          - k8s_nodes_info.resources | length > 0
        fail_msg: "‚ùå Impossible de se connecter au cluster Kubernetes"
        success_msg: "‚úÖ Connectivit√© au cluster Kubernetes valid√©e"

    - name: "Collecte des informations sur les n≈ìuds"
      set_fact:
        k8s_cluster_info:
          nodes_count: "{{ k8s_nodes_info.resources | length }}"
          nodes_ready: "{{ k8s_nodes_info.resources | json_query('[?status.conditions[?type==`Ready` && status==`True`]]') | length }}"
          kubernetes_version: "{{ k8s_nodes_info.resources[0].status.nodeInfo.kubeletVersion | default('unknown') }}"

    - name: "Affichage des informations cluster"
      debug:
        msg: |
          üìä Informations du cluster Kubernetes:
          - N≈ìuds total: {{ k8s_cluster_info.nodes_count }}
          - N≈ìuds pr√™ts: {{ k8s_cluster_info.nodes_ready }}
          - Version K8s: {{ k8s_cluster_info.kubernetes_version }}
      tags: ['information']

  rescue:
    - name: "‚ùå √âchec de v√©rification de l'infrastructure K8s"
      fail:
        msg: |
          Impossible de v√©rifier l'√©tat du cluster Kubernetes.
          V√©rifiez que:
          - Le cluster K8s est accessible
          - Les credentials kubectl sont configur√©s
          - Le service kube-apiserver fonctionne

# =========================================================================
# SECTION 3: GESTION DES NAMESPACES
# =========================================================================
- name: "üìÅ [NAMESPACE] Gestion du namespace Keycloak"
  block:
    - name: "V√©rification de l'existence du namespace {{ keycloak_namespace }}"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ keycloak_namespace }}"
      register: keycloak_namespace_info
      tags: ['namespace']

    - name: "Cr√©ation du namespace {{ keycloak_namespace }}"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ keycloak_namespace }}"
            labels:
              app.kubernetes.io/name: "keycloak"
              app.kubernetes.io/component: "identity-provider"
              app.kubernetes.io/part-of: "lions-infrastructure"
              app.kubernetes.io/managed-by: "ansible"
              app.kubernetes.io/version: "{{ keycloak_version }}"
              lions.dev/environment: "{{ lions_environment }}"
              lions.dev/service-type: "security"
            annotations:
              lions.dev/created-by: "ansible-{{ ansible_user | default('automation') }}"
              lions.dev/created-date: "{{ ansible_date_time.iso8601 }}"
              lions.dev/description: "Namespace for Keycloak identity and access management"
      when: keycloak_namespace_info.resources | length == 0
      tags: ['namespace', 'creation']

    - name: "Validation des permissions dans le namespace"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "keycloak-access-validation"
            namespace: "{{ keycloak_namespace }}"
            labels:
              lions.dev/test: "access-validation"
          data:
            validation: "{{ ansible_date_time.iso8601 }}"
            environment: "{{ lions_environment }}"
      register: access_validation_result
      tags: ['validation', 'permissions']

    - name: "Nettoyage du ConfigMap de validation"
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: ConfigMap
        name: "keycloak-access-validation"
        namespace: "{{ keycloak_namespace }}"
      when: access_validation_result is succeeded
      tags: ['cleanup']

  rescue:
    - name: "‚ùå √âchec de gestion du namespace"
      fail:
        msg: |
          Impossible de cr√©er ou d'acc√©der au namespace {{ keycloak_namespace }}.
          V√©rifiez que vous avez les permissions suffisantes.

# =========================================================================
# SECTION 4: V√âRIFICATION DES D√âPENDANCES CRITIQUES
# =========================================================================
- name: "üîó [DEPENDENCIES] V√©rification des d√©pendances critiques"
  block:
    # V√©rification de PostgreSQL
    - name: "V√©rification du service PostgreSQL"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "{{ keycloak_database_service }}"
        namespace: "{{ keycloak_database_namespace }}"
      register: postgres_service_info
      tags: ['dependencies', 'database']

    - name: "Validation de la disponibilit√© PostgreSQL"
      set_fact:
        postgres_available: "{{ postgres_service_info.resources | length > 0 }}"

    - name: "Test de connectivit√© PostgreSQL"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: "postgres-connectivity-test"
            namespace: "{{ keycloak_namespace }}"
            labels:
              lions.dev/test: "connectivity"
          spec:
            restartPolicy: Never
            containers:
              - name: postgres-test
                image: "postgres:{{ postgres_version | default('15') }}-alpine"
                command:
                  - "/bin/sh"
                  - "-c"
                  - |
                    pg_isready -h {{ keycloak_database_service }}.{{ keycloak_database_namespace }}.svc.cluster.local -p {{ postgres_port | default('5432') }} -U {{ keycloak_database_user | default('keycloak') }}
                env:
                  - name: PGPASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: "{{ keycloak_database_secret }}"
                        key: "password"
                        optional: true
      register: postgres_test_creation
      when: postgres_available
      failed_when: false
      tags: ['connectivity', 'database']

    # Attendre et v√©rifier le r√©sultat du test
    - name: "Attente du r√©sultat du test PostgreSQL"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        name: "postgres-connectivity-test"
        namespace: "{{ keycloak_namespace }}"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 60
      register: postgres_test_result
      when: postgres_available and postgres_test_creation is succeeded
      failed_when: false
      tags: ['connectivity']

    # Nettoyage du pod de test
    - name: "Nettoyage du pod de test PostgreSQL"
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Pod
        name: "postgres-connectivity-test"
        namespace: "{{ keycloak_namespace }}"
      when: postgres_test_creation is succeeded
      tags: ['cleanup']

  rescue:
    - name: "‚ö†Ô∏è Avertissement sur les d√©pendances"
      debug:
        msg: |
          ‚ö†Ô∏è Certaines d√©pendances ne sont pas disponibles:
          - PostgreSQL: {{ 'Disponible' if postgres_available else 'Non disponible' }}
          
          Keycloak pourra √™tre d√©ploy√© mais pourrait ne pas fonctionner correctement
          sans toutes ses d√©pendances.

# =========================================================================
# SECTION 5: V√âRIFICATION DES COMPOSANTS D'INFRASTRUCTURE
# =========================================================================
- name: "üõ†Ô∏è [INFRASTRUCTURE] V√©rification des composants d'infrastructure"
  block:
    # V√©rification de l'Ingress Controller
    - name: "Detection de l'Ingress Controller"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        namespace: "{{ item.namespace }}"
        label_selectors:
          - "{{ item.selector }}"
      register: ingress_controllers
      loop:
        - { namespace: "kube-system", selector: "app.kubernetes.io/name=traefik" }
        - { namespace: "ingress-nginx", selector: "app.kubernetes.io/name=ingress-nginx" }
        - { namespace: "nginx-ingress", selector: "app=nginx-ingress" }
      failed_when: false
      tags: ['infrastructure', 'ingress']

    - name: "Identification de l'Ingress Controller actif"
      set_fact:
        active_ingress_controller: >-
          {%- for result in ingress_controllers.results -%}
            {%- if result.resources | length > 0 -%}
              {%- if 'traefik' in result.item.selector -%}traefik
              {%- elif 'ingress-nginx' in result.item.selector -%}nginx
              {%- elif 'nginx-ingress' in result.item.selector -%}nginx-legacy
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}

    # V√©rification de cert-manager
    - name: "V√©rification de cert-manager"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "cert-manager"
        namespace: "cert-manager"
      register: cert_manager_info
      failed_when: false
      tags: ['infrastructure', 'tls']

    # V√©rification des issuer TLS
    - name: "V√©rification des ClusterIssuer TLS"
      kubernetes.core.k8s_info:
        api_version: cert-manager.io/v1
        kind: ClusterIssuer
      register: cluster_issuers_info
      failed_when: false
      tags: ['infrastructure', 'tls']

    - name: "R√©sum√© de l'infrastructure disponible"
      debug:
        msg: |
          üèóÔ∏è √âtat de l'infrastructure:
          - Ingress Controller: {{ active_ingress_controller | default('Aucun d√©tect√©') }}
          - cert-manager: {{ 'Disponible' if cert_manager_info.resources | length > 0 else 'Non disponible' }}
          - ClusterIssuers: {{ cluster_issuers_info.resources | length if cluster_issuers_info is succeeded else 0 }}
          - TLS activ√©: {{ keycloak_tls_enabled | default(false) }}
      tags: ['information']

# =========================================================================
# SECTION 6: V√âRIFICATION DE VAULT (SI ACTIV√â)
# =========================================================================
- name: "üîê [VAULT] V√©rification de HashiCorp Vault"
  block:
    - name: "V√©rification du service Vault"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "{{ vault_service_name | default('vault') }}"
        namespace: "{{ vault_namespace | default('vault-system') }}"
      register: vault_service_info
      tags: ['vault', 'security']

    - name: "Test de connectivit√© Vault"
      uri:
        url: "{{ vault_addr | default('http://vault.vault-system.svc.cluster.local:8200') }}/v1/sys/health"
        method: GET
        status_code: [200, 429, 472, 473, 501, 503]
        timeout: 10
      register: vault_health_check
      when: vault_service_info.resources | length > 0
      failed_when: false
      tags: ['vault', 'connectivity']

    - name: "√âtat de Vault"
      debug:
        msg: |
          üîê √âtat de HashiCorp Vault:
          - Service disponible: {{ 'Oui' if vault_service_info.resources | length > 0 else 'Non' }}
          - Statut sant√©: {{ vault_health_check.status | default('Non test√©') if vault_health_check is defined else 'Non test√©' }}
          - Vault sera utilis√© pour: Secrets Keycloak
      tags: ['information']

  when: vault_enabled | default(false)

# =========================================================================
# SECTION 7: V√âRIFICATION DES RESSOURCES SYST√àME
# =========================================================================
- name: "üìä [RESOURCES] V√©rification des ressources syst√®me"
  block:
    - name: "Collecte des m√©triques de ressources des n≈ìuds"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: nodes_resources
      tags: ['resources', 'monitoring']

    - name: "Calcul des ressources disponibles"
      set_fact:
        cluster_resources:
          total_cpu: "{{ nodes_resources.resources | json_query('[].status.capacity.cpu') | map('int') | sum }}"
          total_memory: "{{ nodes_resources.resources | json_query('[].status.capacity.memory') | map('regex_replace', 'Ki$', '') | map('int') | sum }}"
          allocatable_cpu: "{{ nodes_resources.resources | json_query('[].status.allocatable.cpu') | map('int') | sum }}"
          allocatable_memory: "{{ nodes_resources.resources | json_query('[].status.allocatable.memory') | map('regex_replace', 'Ki$', '') | map('int') | sum }}"

    - name: "Validation des ressources requises"
      assert:
        that:
          - cluster_resources.allocatable_cpu | int >= (keycloak_resources_cpu_request | regex_replace('m$', '') | int / 1000)
          - (cluster_resources.allocatable_memory | int * 1024) >= (keycloak_resources_memory_request | regex_replace('Mi$', '') | int * 1024 * 1024)
        fail_msg: |
          ‚ùå Ressources insuffisantes pour d√©ployer Keycloak:
          - CPU requis: {{ keycloak_resources_cpu_request }}
          - M√©moire requise: {{ keycloak_resources_memory_request }}
          - CPU disponible: {{ cluster_resources.allocatable_cpu }}
          - M√©moire disponible: {{ (cluster_resources.allocatable_memory | int / 1024) | round }}Mi
        success_msg: "‚úÖ Ressources syst√®me suffisantes pour Keycloak"
      tags: ['validation', 'resources']

# =========================================================================
# SECTION 8: CR√âATION DES RESSOURCES PR√âPARATOIRES
# =========================================================================
- name: "üîß [PREPARATION] Cr√©ation des ressources pr√©paratoires"
  block:
    - name: "Cr√©ation des labels par d√©faut pour le namespace"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ keycloak_namespace }}"
            labels:
              pod-security.kubernetes.io/enforce: "{{ pod_security_standard | default('restricted') }}"
              pod-security.kubernetes.io/audit: "{{ pod_security_standard | default('restricted') }}"
              pod-security.kubernetes.io/warn: "{{ pod_security_standard | default('restricted') }}"
      when: pod_security_enabled | default(true)
      tags: ['security', 'pod-security']

    - name: "Cr√©ation d'une NetworkPolicy par d√©faut"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: "keycloak-default-network-policy"
            namespace: "{{ keycloak_namespace }}"
            labels:
              app.kubernetes.io/name: "keycloak"
              app.kubernetes.io/component: "network-policy"
          spec:
            podSelector:
              matchLabels:
                app.kubernetes.io/name: "keycloak"
            policyTypes:
              - Ingress
              - Egress
            ingress:
              - from:
                  - namespaceSelector:
                      matchLabels:
                        name: "{{ ingress_namespace | default('kube-system') }}"
                ports:
                  - protocol: TCP
                    port: {{ keycloak_port }}
            egress:
              - to:
                  - namespaceSelector:
                      matchLabels:
                        name: "{{ keycloak_database_namespace }}"
                ports:
                  - protocol: TCP
                    port: {{ postgres_port | default('5432') }}
              - to: []
                ports:
                  - protocol: TCP
                    port: 53
                  - protocol: UDP
                    port: 53
      when: network_policies_enabled | default(true)
      tags: ['security', 'network-policy']

# =========================================================================
# SECTION 9: R√âSUM√â ET VALIDATION FINALE
# =========================================================================
- name: "üìã [SUMMARY] R√©sum√© de la validation des pr√©requis"
  debug:
    msg: |
      üéØ R√âSUM√â DE LA VALIDATION DES PR√âREQUIS KEYCLOAK:
      
      ‚úÖ Configuration:
      - Namespace: {{ keycloak_namespace }}
      - Version: {{ keycloak_version }}
      - Environnement: {{ lions_environment }}
      - Port: {{ keycloak_port }}
      
      ‚úÖ Infrastructure:
      - Cluster K8s: Op√©rationnel ({{ k8s_cluster_info.nodes_ready }}/{{ k8s_cluster_info.nodes_count }} n≈ìuds)
      - Ingress Controller: {{ active_ingress_controller | default('Non d√©tect√©') }}
      - cert-manager: {{ 'Disponible' if cert_manager_info.resources | length > 0 else 'Non disponible' }}
      
      ‚úÖ D√©pendances:
      - PostgreSQL: {{ 'Disponible' if postgres_available else 'Non disponible' }}
      - Vault: {{ 'Activ√©' if vault_enabled | default(false) else 'D√©sactiv√©' }}
      
      ‚úÖ S√©curit√©:
      - TLS: {{ 'Activ√©' if keycloak_tls_enabled | default(false) else 'D√©sactiv√©' }}
      - NetworkPolicy: {{ 'Activ√©' if network_policies_enabled | default(true) else 'D√©sactiv√©' }}
      - Pod Security: {{ 'Activ√©' if pod_security_enabled | default(true) else 'D√©sactiv√©' }}
      
      üöÄ Keycloak est pr√™t √† √™tre d√©ploy√©!
  tags: ['summary', 'information']

- name: "‚úÖ Validation finale des pr√©requis"
  debug:
    msg: "Tous les pr√©requis pour le d√©ploiement de Keycloak ont √©t√© valid√©s avec succ√®s."
  tags: ['validation', 'completion']