---
# =========================================================================
# LIONS INFRASTRUCTURE 5.0 - DÉPLOIEMENT APPLICATION QUARKUS
# =========================================================================
# Description: Déploiement robuste et sécurisé d'applications Quarkus sur K8s
# Version: 5.0.0
# Maintainer: DevOps Team LIONS
# Documentation: https://docs.lions.dev/infrastructure/roles/quarkus
# =========================================================================

# =========================================================================
# PHASE 1 - VALIDATION PRÉ-DÉPLOIEMENT
# =========================================================================

- name: "QUARKUS | Validation de l'état du cluster Kubernetes"
  k8s_info:
    api_version: v1
    kind: Node
  register: cluster_nodes
  failed_when: cluster_nodes.resources | length == 0
  tags: [validation, pre-deploy]

- name: "QUARKUS | Validation de la disponibilité du namespace"
  k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ quarkus_namespace }}"
  register: namespace_check
  failed_when: false
  tags: [validation, pre-deploy]

- name: "QUARKUS | Création du namespace si nécessaire"
  k8s:
    name: "{{ quarkus_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
    definition:
      metadata:
        labels:
          name: "{{ quarkus_namespace }}"
          app.kubernetes.io/name: "{{ quarkus_namespace }}"
          app.kubernetes.io/component: "application"
          app.kubernetes.io/part-of: "lions-infrastructure"
          app.kubernetes.io/managed-by: "ansible"
          lions.dev/environment: "{{ lions_environment }}"
          lions.dev/service-type: "backend"
  when: namespace_check.resources | length == 0
  tags: [validation, pre-deploy]

- name: "QUARKUS | Validation des variables critiques"
  assert:
    that:
      - quarkus_app_name is defined and quarkus_app_name | length > 0
      - quarkus_image is defined and quarkus_image | length > 0
      - quarkus_namespace is defined and quarkus_namespace | length > 0
      - quarkus_port is defined and quarkus_port | int > 0
    fail_msg: "Variables critiques manquantes pour le déploiement Quarkus"
    success_msg: "Variables critiques validées avec succès"
  tags: [validation, pre-deploy]

# =========================================================================
# PHASE 2 - RÉCUPÉRATION DES SECRETS VIA VAULT
# =========================================================================

- name: "QUARKUS | Récupération des secrets depuis Vault"
  vault_secret:
    path: "{{ vault_secret_path }}/quarkus/{{ quarkus_app_name }}"
    key: "{{ item }}"
  register: vault_secrets
  loop:
    - database_password
    - jwt_secret
    - admin_password
    - encryption_key
  when:
    - vault_integration_enabled | default(true) | bool
    - vault_secret_path is defined
  failed_when: false
  no_log: true
  tags: [secrets, vault]

- name: "QUARKUS | Génération de secrets par défaut si Vault indisponible"
  set_fact:
    quarkus_secrets:
      database_password: "{{ vault_secrets.results[0].value | default(ansible_password | password_hash('sha256') | truncate(16, true, '')) }}"
      jwt_secret: "{{ vault_secrets.results[1].value | default(ansible_date_time.epoch + quarkus_app_name | hash('sha256') | truncate(32, true, '')) }}"
      admin_password: "{{ vault_secrets.results[2].value | default('admin123' if lions_environment == 'development' else ansible_password | password_hash('sha256') | truncate(12, true, '')) }}"
      encryption_key: "{{ vault_secrets.results[3].value | default(ansible_date_time.epoch + 'lions' | hash('sha256') | truncate(32, true, '')) }}"
  no_log: true
  tags: [secrets, fallback]

# =========================================================================
# PHASE 3 - PRÉPARATION DES TEMPLATES KUBERNETES
# =========================================================================

- name: "QUARKUS | Création du répertoire temporaire pour les manifests"
  tempfile:
    state: directory
    prefix: "quarkus_{{ quarkus_app_name }}_"
  register: quarkus_temp_dir
  tags: [templates, prepare]

- name: "QUARKUS | Génération du ServiceAccount"
  template:
    src: "serviceaccount.yml.j2"
    dest: "{{ quarkus_temp_dir.path }}/serviceaccount.yml"
    mode: '0600'
  vars:
    app_name: "{{ quarkus_app_name }}"
    app_namespace: "{{ quarkus_namespace }}"
    app_labels: "{{ quarkus_labels }}"
  tags: [templates, serviceaccount]

- name: "QUARKUS | Génération du ConfigMap"
  template:
    src: "configmap.yml.j2"
    dest: "{{ quarkus_temp_dir.path }}/configmap.yml"
    mode: '0600'
  vars:
    app_name: "{{ quarkus_app_name }}"
    app_namespace: "{{ quarkus_namespace }}"
    app_labels: "{{ quarkus_labels }}"
    app_config: "{{ quarkus_config }}"
  tags: [templates, configmap]

- name: "QUARKUS | Génération du Secret"
  template:
    src: "secret.yml.j2"
    dest: "{{ quarkus_temp_dir.path }}/secret.yml"
    mode: '0600'
  vars:
    app_name: "{{ quarkus_app_name }}"
    app_namespace: "{{ quarkus_namespace }}"
    app_labels: "{{ quarkus_labels }}"
    app_secrets: "{{ quarkus_secrets }}"
  no_log: true
  tags: [templates, secrets]

- name: "QUARKUS | Génération du Deployment"
  template:
    src: "deployment.yml.j2"
    dest: "{{ quarkus_temp_dir.path }}/deployment.yml"
    mode: '0600'
  vars:
    app_name: "{{ quarkus_app_name }}"
    app_namespace: "{{ quarkus_namespace }}"
    app_labels: "{{ quarkus_labels }}"
    app_image: "{{ quarkus_image }}"
    app_port: "{{ quarkus_port }}"
    app_resources: "{{ quarkus_resources }}"
    app_env_vars: "{{ quarkus_env_vars }}"
  tags: [templates, deployment]

- name: "QUARKUS | Génération du Service"
  template:
    src: "service.yml.j2"
    dest: "{{ quarkus_temp_dir.path }}/service.yml"
    mode: '0600'
  vars:
    app_name: "{{ quarkus_app_name }}"
    app_namespace: "{{ quarkus_namespace }}"
    app_labels: "{{ quarkus_labels }}"
    app_port: "{{ quarkus_port }}"
    service_type: "{{ quarkus_service_type | default('ClusterIP') }}"
  tags: [templates, service]

- name: "QUARKUS | Génération de l'Ingress"
  template:
    src: "ingress.yml.j2"
    dest: "{{ quarkus_temp_dir.path }}/ingress.yml"
    mode: '0600'
  vars:
    app_name: "{{ quarkus_app_name }}"
    app_namespace: "{{ quarkus_namespace }}"
    app_labels: "{{ quarkus_labels }}"
    app_hostname: "{{ quarkus_hostname }}"
    app_tls_enabled: "{{ quarkus_tls_enabled | default(lions_security_tls_enabled) }}"
  when: quarkus_ingress_enabled | default(true) | bool
  tags: [templates, ingress]

- name: "QUARKUS | Génération du ServiceMonitor pour Prometheus"
  template:
    src: "servicemonitor.yml.j2"
    dest: "{{ quarkus_temp_dir.path }}/servicemonitor.yml"
    mode: '0600'
  vars:
    app_name: "{{ quarkus_app_name }}"
    app_namespace: "{{ quarkus_namespace }}"
    app_labels: "{{ quarkus_labels }}"
    app_metrics_port: "{{ quarkus_metrics_port | default(8080) }}"
    app_metrics_path: "{{ quarkus_metrics_path | default('/q/metrics') }}"
  when:
    - lions_monitoring_enabled | default(true) | bool
    - quarkus_monitoring_enabled | default(true) | bool
  tags: [templates, monitoring]

# =========================================================================
# PHASE 4 - DÉPLOIEMENT KUBERNETES
# =========================================================================

- name: "QUARKUS | Déploiement du ServiceAccount"
  k8s:
    state: present
    src: "{{ quarkus_temp_dir.path }}/serviceaccount.yml"
    wait: true
    wait_condition:
      type: "ServiceAccount"
      status: "True"
    wait_timeout: "{{ lions_timeout_default | default(300) }}"
  register: quarkus_serviceaccount_result
  tags: [deploy, serviceaccount]

- name: "QUARKUS | Déploiement du ConfigMap"
  k8s:
    state: present
    src: "{{ quarkus_temp_dir.path }}/configmap.yml"
    wait: true
    wait_timeout: "{{ lions_timeout_default | default(300) }}"
  register: quarkus_configmap_result
  tags: [deploy, configmap]

- name: "QUARKUS | Déploiement du Secret"
  k8s:
    state: present
    src: "{{ quarkus_temp_dir.path }}/secret.yml"
    wait: true
    wait_timeout: "{{ lions_timeout_default | default(300) }}"
  register: quarkus_secret_result
  no_log: true
  tags: [deploy, secrets]

- name: "QUARKUS | Déploiement du Service"
  k8s:
    state: present
    src: "{{ quarkus_temp_dir.path }}/service.yml"
    wait: true
    wait_condition:
      type: "Ready"
      status: "True"
    wait_timeout: "{{ lions_timeout_default | default(300) }}"
  register: quarkus_service_result
  tags: [deploy, service]

- name: "QUARKUS | Déploiement de l'application (Deployment)"
  k8s:
    state: present
    src: "{{ quarkus_temp_dir.path }}/deployment.yml"
    wait: true
    wait_condition:
      type: "Progressing"
      status: "True"
      reason: "NewReplicaSetAvailable"
    wait_timeout: "{{ lions_timeout_deployment | default(1800) }}"
  register: quarkus_deployment_result
  tags: [deploy, deployment]

- name: "QUARKUS | Déploiement de l'Ingress"
  k8s:
    state: present
    src: "{{ quarkus_temp_dir.path }}/ingress.yml"
    wait: true
    wait_timeout: "{{ lions_timeout_default | default(300) }}"
  register: quarkus_ingress_result
  when: quarkus_ingress_enabled | default(true) | bool
  tags: [deploy, ingress]

- name: "QUARKUS | Déploiement du ServiceMonitor"
  k8s:
    state: present
    src: "{{ quarkus_temp_dir.path }}/servicemonitor.yml"
    wait: true
    wait_timeout: "{{ lions_timeout_default | default(300) }}"
  register: quarkus_servicemonitor_result
  when:
    - lions_monitoring_enabled | default(true) | bool
    - quarkus_monitoring_enabled | default(true) | bool
  tags: [deploy, monitoring]

# =========================================================================
# PHASE 5 - VALIDATION POST-DÉPLOIEMENT
# =========================================================================

- name: "QUARKUS | Attente de la disponibilité des pods"
  k8s_info:
    api_version: apps/v1
    kind: Deployment
    namespace: "{{ quarkus_namespace }}"
    name: "{{ quarkus_app_name }}"
    wait: true
    wait_condition:
      type: "Available"
      status: "True"
    wait_timeout: "{{ lions_timeout_deployment | default(1800) }}"
  register: quarkus_deployment_status
  tags: [validation, post-deploy]

- name: "QUARKUS | Vérification de l'état des ReplicaSets"
  k8s_info:
    api_version: apps/v1
    kind: ReplicaSet
    namespace: "{{ quarkus_namespace }}"
    label_selectors:
      - "app={{ quarkus_app_name }}"
  register: quarkus_replicasets
  tags: [validation, post-deploy]

- name: "QUARKUS | Récupération des informations des pods"
  k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ quarkus_namespace }}"
    label_selectors:
      - "app={{ quarkus_app_name }}"
    field_selectors:
      - "status.phase=Running"
  register: quarkus_pods_running
  tags: [validation, post-deploy]

- name: "QUARKUS | Validation du nombre de pods en fonctionnement"
  assert:
    that:
      - quarkus_pods_running.resources | length >= (quarkus_replicas | default(1) | int)
    fail_msg: "Nombre insuffisant de pods en fonctionnement: {{ quarkus_pods_running.resources | length }}/{{ quarkus_replicas | default(1) }}"
    success_msg: "Tous les pods sont en fonctionnement: {{ quarkus_pods_running.resources | length }}/{{ quarkus_replicas | default(1) }}"
  tags: [validation, post-deploy]

# =========================================================================
# PHASE 6 - TESTS DE SANTÉ ET CONNECTIVITÉ
# =========================================================================

- name: "QUARKUS | Attente de l'initialisation de l'application"
  pause:
    seconds: "{{ quarkus_startup_delay | default(30) }}"
  tags: [health-check, post-deploy]

- name: "QUARKUS | Test de connectivité interne (readiness)"
  uri:
    url: "http://{{ quarkus_app_name }}.{{ quarkus_namespace }}.svc.cluster.local:{{ quarkus_port }}{{ quarkus_readiness_path | default('/q/health/ready') }}"
    method: GET
    status_code: 200
    timeout: 10
  register: quarkus_readiness_check
  retries: "{{ quarkus_health_retries | default(12) }}"
  delay: "{{ quarkus_health_delay | default(10) }}"
  until: quarkus_readiness_check is succeeded
  ignore_errors: true
  tags: [health-check, post-deploy]

- name: "QUARKUS | Test de santé interne (liveness)"
  uri:
    url: "http://{{ quarkus_app_name }}.{{ quarkus_namespace }}.svc.cluster.local:{{ quarkus_port }}{{ quarkus_liveness_path | default('/q/health/live') }}"
    method: GET
    status_code: 200
    timeout: 10
  register: quarkus_liveness_check
  retries: "{{ quarkus_health_retries | default(12) }}"
  delay: "{{ quarkus_health_delay | default(10) }}"
  until: quarkus_liveness_check is succeeded
  ignore_errors: true
  tags: [health-check, post-deploy]

- name: "QUARKUS | Test de connectivité externe (si Ingress activé)"
  uri:
    url: "{{ 'https' if quarkus_tls_enabled | default(lions_security_tls_enabled) else 'http' }}://{{ quarkus_hostname }}{{ quarkus_readiness_path | default('/q/health/ready') }}"
    method: GET
    status_code: 200
    timeout: 10
    validate_certs: "{{ not (lions_security_tls_staging | default(true)) }}"
  register: quarkus_external_check
  retries: "{{ quarkus_health_retries | default(12) }}"
  delay: "{{ quarkus_health_delay | default(10) }}"
  until: quarkus_external_check is succeeded
  ignore_errors: true
  when:
    - quarkus_ingress_enabled | default(true) | bool
    - quarkus_hostname is defined
  tags: [health-check, external, post-deploy]

# =========================================================================
# PHASE 7 - COLLECTE D'INFORMATIONS ET DIAGNOSTIC
# =========================================================================

- name: "QUARKUS | Collecte des logs des pods en cas d'échec"
  shell: |
    kubectl logs -n {{ quarkus_namespace }} {{ item.metadata.name }} --tail=50
  loop: "{{ quarkus_pods_running.resources }}"
  register: quarkus_pod_logs
  when:
    - quarkus_readiness_check is failed or quarkus_liveness_check is failed
    - quarkus_pods_running.resources | length > 0
  ignore_errors: true
  changed_when: false
  loop_control:
    label: "{{ item.metadata.name }}"
  tags: [diagnostic, logs]

- name: "QUARKUS | Collecte des événements du namespace"
  shell: |
    kubectl get events -n {{ quarkus_namespace }} --field-selector involvedObject.name={{ quarkus_app_name }} --sort-by='.lastTimestamp' --no-headers
  register: quarkus_events
  when: quarkus_readiness_check is failed or quarkus_liveness_check is failed
  ignore_errors: true
  changed_when: false
  tags: [diagnostic, events]

- name: "QUARKUS | Affichage des informations de diagnostic"
  debug:
    msg: |
      === DIAGNOSTIC QUARKUS APPLICATION ===
      Application: {{ quarkus_app_name }}
      Namespace: {{ quarkus_namespace }}
      Status Pods: {{ quarkus_pods_running.resources | length }}/{{ quarkus_replicas | default(1) }}
      Readiness Check: {{ 'SUCCESS' if quarkus_readiness_check is succeeded else 'FAILED' }}
      Liveness Check: {{ 'SUCCESS' if quarkus_liveness_check is succeeded else 'FAILED' }}
      External Check: {{ 'SUCCESS' if quarkus_external_check is succeeded else 'FAILED' if quarkus_ingress_enabled | default(true) else 'SKIPPED' }}
      
      {% if quarkus_events is defined and quarkus_events.stdout %}
      Événements récents:
      {{ quarkus_events.stdout }}
      {% endif %}
  when: lions_debug_mode | default(false) | bool or quarkus_readiness_check is failed
  tags: [diagnostic, debug]

# =========================================================================
# PHASE 8 - NETTOYAGE ET FINALISATION
# =========================================================================

- name: "QUARKUS | Suppression des fichiers temporaires"
  file:
    path: "{{ quarkus_temp_dir.path }}"
    state: absent
  when:
    - quarkus_temp_dir is defined
    - not (lions_debug_mode | default(false) | bool)
  tags: [cleanup, post-deploy]

- name: "QUARKUS | Mise à jour du statut de déploiement"
  set_fact:
    quarkus_deployment_status_final:
      app_name: "{{ quarkus_app_name }}"
      namespace: "{{ quarkus_namespace }}"
      success: "{{ quarkus_readiness_check is succeeded and quarkus_liveness_check is succeeded }}"
      pods_running: "{{ quarkus_pods_running.resources | length }}"
      pods_expected: "{{ quarkus_replicas | default(1) }}"
      ready: "{{ quarkus_readiness_check is succeeded }}"
      live: "{{ quarkus_liveness_check is succeeded }}"
      external_accessible: "{{ quarkus_external_check is succeeded if quarkus_ingress_enabled | default(true) else omit }}"
      deployment_time: "{{ ansible_date_time.iso8601 }}"
      temp_dir: "{{ quarkus_temp_dir.path if lions_debug_mode | default(false) else omit }}"
  tags: [status, post-deploy]

# =========================================================================
# PHASE 9 - VALIDATION FINALE ET RAPPORT
# =========================================================================

- name: "QUARKUS | Échec du déploiement si les tests de santé ont échoué"
  fail:
    msg: |
      ❌ ÉCHEC DU DÉPLOIEMENT QUARKUS
      
      Application: {{ quarkus_app_name }}
      Namespace: {{ quarkus_namespace }}
      
      Problèmes détectés:
      {% if quarkus_readiness_check is failed %}
      - Test de readiness échoué
      {% endif %}
      {% if quarkus_liveness_check is failed %}
      - Test de liveness échoué
      {% endif %}
      {% if quarkus_external_check is defined and quarkus_external_check is failed %}
      - Connectivité externe échouée
      {% endif %}
      
      Consultez les logs pour plus d'informations:
      kubectl logs -n {{ quarkus_namespace }} -l app={{ quarkus_app_name }}
      kubectl describe deployment -n {{ quarkus_namespace }} {{ quarkus_app_name }}
  when:
    - quarkus_readiness_check is failed or quarkus_liveness_check is failed
    - not (quarkus_allow_partial_deployment | default(false) | bool)
  tags: [validation, final]

- name: "QUARKUS | Rapport de déploiement réussi"
  debug:
    msg: |
      ✅ DÉPLOIEMENT QUARKUS RÉUSSI
      
      Application: {{ quarkus_app_name }}
      Namespace: {{ quarkus_namespace }}
      Pods actifs: {{ quarkus_pods_running.resources | length }}/{{ quarkus_replicas | default(1) }}
      
      Endpoints:
      - Service interne: {{ quarkus_app_name }}.{{ quarkus_namespace }}.svc.cluster.local:{{ quarkus_port }}
      {% if quarkus_ingress_enabled | default(true) and quarkus_hostname is defined %}
      - URL externe: {{ 'https' if quarkus_tls_enabled | default(lions_security_tls_enabled) else 'http' }}://{{ quarkus_hostname }}
      {% endif %}
      
      Santé:
      - Readiness: ✅ {{ quarkus_readiness_path | default('/q/health/ready') }}
      - Liveness: ✅ {{ quarkus_liveness_path | default('/q/health/live') }}
      {% if quarkus_monitoring_enabled | default(true) %}
      - Métriques: ✅ {{ quarkus_metrics_path | default('/q/metrics') }}
      {% endif %}
      
      Temps de déploiement: {{ ansible_date_time.iso8601 }}
  when: quarkus_readiness_check is succeeded and quarkus_liveness_check is succeeded
  tags: [success, final]