---
# =========================================================================
# LIONS INFRASTRUCTURE 5.0 - VALIDATION POSTGRESQL
# =========================================================================
# Description: Validation compl√®te post-d√©ploiement pour PostgreSQL
# Version: 5.0.0
# Maintainer: DevOps Team LIONS Infrastructure
# Documentation: https://docs.lions.dev/infrastructure/postgres/validation
# =========================================================================

# =========================================================================
# INITIALISATION ET VARIABLES DE VALIDATION
# =========================================================================
- name: "PostgreSQL Validation | Initialize validation context"
  set_fact:
    postgres_validation_start_time: "{{ ansible_date_time.epoch }}"
    postgres_validation_results: {}
    postgres_validation_errors: []
    postgres_validation_warnings: []
    postgres_service_fqdn: "{{ lions_postgres_service_name }}.{{ lions_postgres_namespace }}.svc.{{ lions_k8s_dns_domain | default('cluster.local') }}"
    postgres_external_url: "{% if lions_security_tls_enabled | bool %}https://{% else %}http://{% endif %}{{ lions_postgres_service_name }}.{{ lions_dns_full_domain }}"

- name: "PostgreSQL Validation | Display validation parameters"
  debug:
    msg:
      - "üîç Starting PostgreSQL validation for {{ lions_postgres_service_name }}"
      - "üìç Environment: {{ lions_environment }}"
      - "üè∑Ô∏è  Namespace: {{ lions_postgres_namespace }}"
      - "üîó Service FQDN: {{ postgres_service_fqdn }}"
      - "‚è±Ô∏è  Timeout: {{ lions_timeout_default }}s"
  when: lions_debug_mode | bool

# =========================================================================
# VALIDATION DE L'INFRASTRUCTURE KUBERNETES
# =========================================================================
- name: "PostgreSQL Validation | Check namespace existence"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ lions_postgres_namespace }}"
  register: postgres_namespace_check
  failed_when: false

- name: "PostgreSQL Validation | Validate namespace"
  assert:
    that:
      - postgres_namespace_check.resources | length > 0
      - postgres_namespace_check.resources[0].status.phase == "Active"
    fail_msg: "Namespace {{ lions_postgres_namespace }} is not available or not in Active state"
    success_msg: "‚úÖ Namespace {{ lions_postgres_namespace }} is active"

- name: "PostgreSQL Validation | Get StatefulSet information"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: StatefulSet
    name: "{{ lions_postgres_service_name }}"
    namespace: "{{ lions_postgres_namespace }}"
  register: postgres_statefulset_info
  failed_when: false

- name: "PostgreSQL Validation | Validate StatefulSet"
  assert:
    that:
      - postgres_statefulset_info.resources | length > 0
      - postgres_statefulset_info.resources[0].status.readyReplicas is defined
      - postgres_statefulset_info.resources[0].status.readyReplicas >= 1
    fail_msg: "PostgreSQL StatefulSet is not ready or has no ready replicas"
    success_msg: "‚úÖ PostgreSQL StatefulSet has {{ postgres_statefulset_info.resources[0].status.readyReplicas }} ready replica(s)"

- name: "PostgreSQL Validation | Get Pod information"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ lions_postgres_namespace }}"
    label_selectors:
      - "app={{ lions_postgres_service_name }}"
    field_selectors:
      - "status.phase=Running"
  register: postgres_pods_info
  failed_when: false

- name: "PostgreSQL Validation | Validate Pod availability"
  assert:
    that:
      - postgres_pods_info.resources | length > 0
      - postgres_pods_info.resources | selectattr('status.phase', 'equalto', 'Running') | list | length > 0
    fail_msg: "No running PostgreSQL pods found"
    success_msg: "‚úÖ Found {{ postgres_pods_info.resources | length }} running PostgreSQL pod(s)"

- name: "PostgreSQL Validation | Set primary pod reference"
  set_fact:
    postgres_primary_pod: "{{ postgres_pods_info.resources[0].metadata.name }}"

# =========================================================================
# VALIDATION DE LA CONNECTIVIT√â ET SANT√â DE POSTGRESQL
# =========================================================================
- name: "PostgreSQL Validation | Check PostgreSQL readiness"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      pg_isready -U {{ lions_postgres_admin_user | default('postgres') }} 
                 -h localhost 
                 -p {{ lions_postgres_port }}
                 -t {{ lions_timeout_default }}
  register: postgres_readiness_check
  until: postgres_readiness_check.rc == 0
  retries: "{{ (lions_timeout_deployment | int / 30) | int }}"
  delay: 30
  failed_when: false

- name: "PostgreSQL Validation | Validate PostgreSQL readiness"
  assert:
    that:
      - postgres_readiness_check.rc == 0
    fail_msg: "‚ùå PostgreSQL is not ready after {{ lions_timeout_deployment }}s timeout"
    success_msg: "‚úÖ PostgreSQL is ready and accepting connections"

- name: "PostgreSQL Validation | Test database connection"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -d {{ lions_postgres_database }} 
           -c "SELECT 1 as connection_test;" 
           -t -A
  register: postgres_connection_test
  failed_when: false

- name: "PostgreSQL Validation | Validate database connection"
  assert:
    that:
      - postgres_connection_test.rc == 0
      - "'1' in postgres_connection_test.stdout"
    fail_msg: "‚ùå Cannot connect to PostgreSQL database {{ lions_postgres_database }}"
    success_msg: "‚úÖ Successfully connected to database {{ lions_postgres_database }}"

# =========================================================================
# VALIDATION DES INFORMATIONS SYST√àME
# =========================================================================
- name: "PostgreSQL Validation | Get PostgreSQL version"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -c "SELECT version();" 
           -t -A
  register: postgres_version_info
  failed_when: false

- name: "PostgreSQL Validation | Get database list"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -c "SELECT datname FROM pg_database WHERE datistemplate = false;" 
           -t -A
  register: postgres_databases_list
  failed_when: false

- name: "PostgreSQL Validation | Get active connections count"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -c "SELECT count(*) FROM pg_stat_activity WHERE state = 'active';" 
           -t -A
  register: postgres_active_connections
  failed_when: false

# =========================================================================
# VALIDATION DE LA CONFIGURATION
# =========================================================================
- name: "PostgreSQL Validation | Get critical configuration parameters"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -c "SELECT name, setting, unit FROM pg_settings 
               WHERE name IN ('max_connections', 'shared_buffers', 'effective_cache_size', 
                            'work_mem', 'maintenance_work_mem', 'checkpoint_completion_target',
                            'wal_buffers', 'default_statistics_target');" 
           -A -t
  register: postgres_config_check
  failed_when: false

- name: "PostgreSQL Validation | Validate max_connections setting"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -c "SELECT setting FROM pg_settings WHERE name = 'max_connections';" 
           -t -A
  register: postgres_max_conn_check
  failed_when: false

- name: "PostgreSQL Validation | Check max_connections is adequate"
  set_fact:
    postgres_max_conn_warning: true
  when:
    - postgres_max_conn_check.rc == 0
    - postgres_max_conn_check.stdout | int < 100
  failed_when: false

# =========================================================================
# VALIDATION DE LA HAUTE DISPONIBILIT√â (SI ACTIV√âE)
# =========================================================================
- name: "PostgreSQL Validation | Check replication status (HA mode)"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -c "SELECT client_addr, state, sent_lsn, write_lsn, flush_lsn, replay_lsn 
               FROM pg_stat_replication;" 
           -A -t
  register: postgres_replication_status
  failed_when: false
  when:
    - lions_postgres_ha_enabled | default(false) | bool
    - postgres_pods_info.resources | length > 1

- name: "PostgreSQL Validation | Validate replication (HA mode)"
  assert:
    that:
      - postgres_replication_status.rc == 0
      - postgres_replication_status.stdout | length > 0
    fail_msg: "‚ùå PostgreSQL replication is not working in HA mode"
    success_msg: "‚úÖ PostgreSQL replication is active"
  when:
    - lions_postgres_ha_enabled | default(false) | bool
    - postgres_pods_info.resources | length > 1

# =========================================================================
# VALIDATION DU MONITORING ET M√âTRIQUES
# =========================================================================
- name: "PostgreSQL Validation | Check Prometheus metrics endpoint"
  uri:
    url: "http://{{ postgres_service_fqdn }}:{{ lions_postgres_metrics_port | default('9187') }}/metrics"
    method: GET
    status_code: 200
    timeout: 30
  register: postgres_metrics_check
  failed_when: false
  when: lions_monitoring_enabled | bool

- name: "PostgreSQL Validation | Validate metrics availability"
  set_fact:
    postgres_metrics_available: "{{ postgres_metrics_check.status == 200 }}"
  when: lions_monitoring_enabled | bool

- name: "PostgreSQL Validation | Check ServiceMonitor exists"
  kubernetes.core.k8s_info:
    api_version: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: "{{ lions_postgres_service_name }}"
    namespace: "{{ lions_postgres_namespace }}"
  register: postgres_servicemonitor_check
  failed_when: false
  when: lions_monitoring_enabled | bool

# =========================================================================
# VALIDATION DES PERFORMANCES
# =========================================================================
- name: "PostgreSQL Validation | Run performance baseline test"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -d {{ lions_postgres_database }}
           -c "SELECT pg_stat_reset(); 
               SELECT pg_sleep(1); 
               CREATE TABLE IF NOT EXISTS validation_test (id SERIAL PRIMARY KEY, data TEXT);
               INSERT INTO validation_test (data) VALUES ('performance_test');
               SELECT COUNT(*) FROM validation_test;
               DROP TABLE validation_test;"
           -t -A
  register: postgres_performance_test
  failed_when: false
  timeout: 60

- name: "PostgreSQL Validation | Validate performance test"
  assert:
    that:
      - postgres_performance_test.rc == 0
    fail_msg: "‚ùå PostgreSQL performance test failed"
    success_msg: "‚úÖ PostgreSQL performance test completed successfully"

# =========================================================================
# VALIDATION DE LA S√âCURIT√â
# =========================================================================
- name: "PostgreSQL Validation | Check security settings"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -c "SELECT name, setting FROM pg_settings 
               WHERE name IN ('ssl', 'log_connections', 'log_disconnections', 
                            'log_statement', 'password_encryption');" 
           -A -t
  register: postgres_security_settings
  failed_when: false

- name: "PostgreSQL Validation | Check user privileges"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      psql -U {{ lions_postgres_admin_user | default('postgres') }} 
           -c "SELECT rolname, rolsuper, rolcreaterole, rolcreatedb 
               FROM pg_roles WHERE rolname != 'postgres';" 
           -A -t
  register: postgres_user_privileges
  failed_when: false

# =========================================================================
# VALIDATION DU STOCKAGE
# =========================================================================
- name: "PostgreSQL Validation | Check persistent volume claims"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: "{{ lions_postgres_namespace }}"
    label_selectors:
      - "app={{ lions_postgres_service_name }}"
  register: postgres_pvc_info
  failed_when: false

- name: "PostgreSQL Validation | Validate storage"
  assert:
    that:
      - postgres_pvc_info.resources | length > 0
      - postgres_pvc_info.resources | selectattr('status.phase', 'equalto', 'Bound') | list | length > 0
    fail_msg: "‚ùå PostgreSQL persistent volumes are not properly bound"
    success_msg: "‚úÖ PostgreSQL storage is properly configured"

- name: "PostgreSQL Validation | Check disk usage"
  kubernetes.core.k8s_exec:
    namespace: "{{ lions_postgres_namespace }}"
    pod: "{{ postgres_primary_pod }}"
    command: |
      df -h /var/lib/postgresql/data | tail -1 | awk '{print $5}' | sed 's/%//'
  register: postgres_disk_usage
  failed_when: false

- name: "PostgreSQL Validation | Validate disk usage"
  set_fact:
    postgres_disk_warning: true
  when:
    - postgres_disk_usage.rc == 0
    - postgres_disk_usage.stdout | int > 80
  failed_when: false

# =========================================================================
# VALIDATION DES SAUVEGARDES
# =========================================================================
- name: "PostgreSQL Validation | Check backup configuration"
  kubernetes.core.k8s_info:
    api_version: batch/v1
    kind: CronJob
    name: "{{ lions_postgres_service_name }}-backup"
    namespace: "{{ lions_postgres_namespace }}"
  register: postgres_backup_cronjob
  failed_when: false
  when: lions_backup_enabled | bool

- name: "PostgreSQL Validation | Validate backup setup"
  assert:
    that:
      - postgres_backup_cronjob.resources | length > 0
      - postgres_backup_cronjob.resources[0].spec.schedule is defined
    fail_msg: "‚ùå PostgreSQL backup CronJob is not configured"
    success_msg: "‚úÖ PostgreSQL backup is configured"
  when: lions_backup_enabled | bool

# =========================================================================
# COMPILATION DES R√âSULTATS DE VALIDATION
# =========================================================================
- name: "PostgreSQL Validation | Compile validation results"
  set_fact:
    postgres_validation_results:
      timestamp: "{{ ansible_date_time.iso8601 }}"
      environment: "{{ lions_environment }}"
      service_name: "{{ lions_postgres_service_name }}"
      namespace: "{{ lions_postgres_namespace }}"
      version: "{{ postgres_version_info.stdout | default('Unknown') }}"
      status: "{{ 'HEALTHY' if postgres_readiness_check.rc == 0 and postgres_connection_test.rc == 0 else 'UNHEALTHY' }}"

      connectivity:
        readiness: "{{ postgres_readiness_check.rc == 0 }}"
        connection_test: "{{ postgres_connection_test.rc == 0 }}"
        service_fqdn: "{{ postgres_service_fqdn }}"
        external_url: "{{ postgres_external_url }}"

      infrastructure:
        namespace_active: "{{ postgres_namespace_check.resources[0].status.phase == 'Active' }}"
        statefulset_ready: "{{ postgres_statefulset_info.resources[0].status.readyReplicas >= 1 }}"
        pods_running: "{{ postgres_pods_info.resources | length }}"
        storage_bound: "{{ postgres_pvc_info.resources | selectattr('status.phase', 'equalto', 'Bound') | list | length > 0 }}"

      configuration:
        databases: "{{ postgres_databases_list.stdout_lines | default([]) }}"
        active_connections: "{{ postgres_active_connections.stdout | default('0') }}"
        max_connections: "{{ postgres_max_conn_check.stdout | default('Unknown') }}"
        disk_usage_percent: "{{ postgres_disk_usage.stdout | default('Unknown') }}"

      high_availability:
        enabled: "{{ lions_postgres_ha_enabled | default(false) }}"
        replication_active: "{{ postgres_replication_status.rc == 0 if postgres_replication_status is defined else false }}"
        replica_count: "{{ postgres_pods_info.resources | length }}"

      monitoring:
        enabled: "{{ lions_monitoring_enabled }}"
        metrics_available: "{{ postgres_metrics_available | default(false) }}"
        servicemonitor_exists: "{{ postgres_servicemonitor_check.resources | length > 0 if postgres_servicemonitor_check is defined else false }}"

      backup:
        enabled: "{{ lions_backup_enabled }}"
        cronjob_configured: "{{ postgres_backup_cronjob.resources | length > 0 if postgres_backup_cronjob is defined else false }}"

      security:
        tls_enabled: "{{ lions_security_tls_enabled }}"
        network_policies: "{{ lions_security_network_policies }}"
        rbac_enabled: "{{ lions_security_rbac_enabled }}"

      performance:
        baseline_test: "{{ postgres_performance_test.rc == 0 }}"

      warnings:
        - "{{ 'Max connections is low (' + postgres_max_conn_check.stdout + ')' if postgres_max_conn_warning | default(false) else '' }}"
        - "{{ 'Disk usage is high (' + postgres_disk_usage.stdout + '%)' if postgres_disk_warning | default(false) else '' }}"
        - "{{ 'Metrics endpoint not accessible' if lions_monitoring_enabled and not postgres_metrics_available | default(false) else '' }}"

      validation_duration: "{{ ansible_date_time.epoch | int - postgres_validation_start_time | int }}"

# =========================================================================
# G√âN√âRATION DU RAPPORT DE VALIDATION
# =========================================================================
- name: "PostgreSQL Validation | Display validation summary"
  debug:
    msg:
      - "üéØ PostgreSQL Validation Summary"
      - "=================================="
      - "Service: {{ postgres_validation_results.service_name }}"
      - "Status: {{ postgres_validation_results.status }}"
      - "Version: {{ postgres_validation_results.version }}"
      - "Environment: {{ postgres_validation_results.environment }}"
      - "Namespace: {{ postgres_validation_results.namespace }}"
      - ""
      - "‚úÖ Connectivity: {{ 'OK' if postgres_validation_results.connectivity.readiness else 'FAILED' }}"
      - "‚úÖ Infrastructure: {{ 'OK' if postgres_validation_results.infrastructure.statefulset_ready else 'FAILED' }}"
      - "‚úÖ Storage: {{ 'OK' if postgres_validation_results.infrastructure.storage_bound else 'FAILED' }}"
      - "‚úÖ Performance: {{ 'OK' if postgres_validation_results.performance.baseline_test else 'FAILED' }}"
      - "üìä Monitoring: {{ 'ENABLED' if postgres_validation_results.monitoring.enabled else 'DISABLED' }}"
      - "üîí Security: {{ 'CONFIGURED' if postgres_validation_results.security.tls_enabled else 'BASIC' }}"
      - "üíæ Backup: {{ 'CONFIGURED' if postgres_validation_results.backup.enabled else 'DISABLED' }}"
      - "‚ö° HA: {{ 'ENABLED' if postgres_validation_results.high_availability.enabled else 'DISABLED' }}"
      - ""
      - "Active Connections: {{ postgres_validation_results.configuration.active_connections }}"
      - "Max Connections: {{ postgres_validation_results.configuration.max_connections }}"
      - "Disk Usage: {{ postgres_validation_results.configuration.disk_usage_percent }}%"
      - "Validation Duration: {{ postgres_validation_results.validation_duration }}s"

- name: "PostgreSQL Validation | Display warnings"
  debug:
    msg: "‚ö†Ô∏è  WARNING: {{ item }}"
  loop: "{{ postgres_validation_results.warnings }}"
  when:
    - item != ""
    - item is defined

- name: "PostgreSQL Validation | Save validation report"
  copy:
    content: |
      # PostgreSQL Validation Report
      ## Generated: {{ postgres_validation_results.timestamp }}
      
      ### Service Information
      - **Service Name**: {{ postgres_validation_results.service_name }}
      - **Environment**: {{ postgres_validation_results.environment }}
      - **Namespace**: {{ postgres_validation_results.namespace }}
      - **Version**: {{ postgres_validation_results.version }}
      - **Overall Status**: {{ postgres_validation_results.status }}
      
      ### Connectivity
      - **Service FQDN**: {{ postgres_validation_results.connectivity.service_fqdn }}
      - **External URL**: {{ postgres_validation_results.connectivity.external_url }}
      - **Readiness Check**: {{ 'PASS' if postgres_validation_results.connectivity.readiness else 'FAIL' }}
      - **Connection Test**: {{ 'PASS' if postgres_validation_results.connectivity.connection_test else 'FAIL' }}
      
      ### Infrastructure
      - **Namespace Status**: {{ 'Active' if postgres_validation_results.infrastructure.namespace_active else 'Inactive' }}
      - **StatefulSet Status**: {{ 'Ready' if postgres_validation_results.infrastructure.statefulset_ready else 'Not Ready' }}
      - **Running Pods**: {{ postgres_validation_results.infrastructure.pods_running }}
      - **Storage Status**: {{ 'Bound' if postgres_validation_results.infrastructure.storage_bound else 'Not Bound' }}
      
      ### Configuration
      - **Databases**: {{ postgres_validation_results.configuration.databases | join(', ') }}
      - **Active Connections**: {{ postgres_validation_results.configuration.active_connections }}
      - **Max Connections**: {{ postgres_validation_results.configuration.max_connections }}
      - **Disk Usage**: {{ postgres_validation_results.configuration.disk_usage_percent }}%
      
      ### High Availability
      - **HA Enabled**: {{ postgres_validation_results.high_availability.enabled }}
      - **Replication Active**: {{ postgres_validation_results.high_availability.replication_active }}
      - **Replica Count**: {{ postgres_validation_results.high_availability.replica_count }}
      
      ### Monitoring
      - **Monitoring Enabled**: {{ postgres_validation_results.monitoring.enabled }}
      - **Metrics Available**: {{ postgres_validation_results.monitoring.metrics_available }}
      - **ServiceMonitor Exists**: {{ postgres_validation_results.monitoring.servicemonitor_exists }}
      
      ### Backup
      - **Backup Enabled**: {{ postgres_validation_results.backup.enabled }}
      - **CronJob Configured**: {{ postgres_validation_results.backup.cronjob_configured }}
      
      ### Security
      - **TLS Enabled**: {{ postgres_validation_results.security.tls_enabled }}
      - **Network Policies**: {{ postgres_validation_results.security.network_policies }}
      - **RBAC Enabled**: {{ postgres_validation_results.security.rbac_enabled }}
      
      ### Performance
      - **Baseline Test**: {{ 'PASS' if postgres_validation_results.performance.baseline_test else 'FAIL' }}
      
      ### Warnings
      {% for warning in postgres_validation_results.warnings %}
      {% if warning != "" %}
      - ‚ö†Ô∏è  {{ warning }}
      {% endif %}
      {% endfor %}
      
      ### Validation Metadata
      - **Duration**: {{ postgres_validation_results.validation_duration }} seconds
      - **Report Generated**: {{ postgres_validation_results.timestamp }}
      - **LIONS Infrastructure Version**: 5.0.0
      
      ---
      *This report was generated automatically by LIONS Infrastructure validation system.*
    dest: "{{ lions_log_base_path | default('/var/log/lions') }}/validation/postgres-{{ lions_environment }}-{{ ansible_date_time.date }}-{{ ansible_date_time.time }}.md"
    mode: '0644'
  delegate_to: localhost
  run_once: true

# =========================================================================
# VALIDATION FINALE ET SORTIE
# =========================================================================
- name: "PostgreSQL Validation | Final assertion"
  assert:
    that:
      - postgres_validation_results.status == "HEALTHY"
      - postgres_validation_results.connectivity.readiness
      - postgres_validation_results.connectivity.connection_test
      - postgres_validation_results.infrastructure.statefulset_ready
      - postgres_validation_results.infrastructure.storage_bound
    fail_msg: |
      ‚ùå PostgreSQL validation failed. Check the validation report for details.
      Service Status: {{ postgres_validation_results.status }}
    success_msg: |
      ‚úÖ PostgreSQL validation completed successfully!
      
      üéØ Service {{ postgres_validation_results.service_name }} is HEALTHY
      üìç Environment: {{ postgres_validation_results.environment }}
      üîó Access URL: {{ postgres_validation_results.connectivity.external_url }}
      ‚è±Ô∏è  Validation completed in {{ postgres_validation_results.validation_duration }}s

- name: "PostgreSQL Validation | Set validation completion flag"
  set_fact:
    postgres_validation_completed: true
    postgres_validation_success: "{{ postgres_validation_results.status == 'HEALTHY' }}"