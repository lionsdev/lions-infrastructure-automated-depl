---
# =========================================================================
# LIONS INFRASTRUCTURE 5.0 - R√îLE POSTGRESQL
# =========================================================================
# Description: Orchestrateur principal pour le d√©ploiement PostgreSQL
# Version: 5.0.0
# Maintainer: DevOps Team <devops@lions.dev>
# Documentation: https://docs.lions.dev/infrastructure/database/postgresql
# =========================================================================

# =========================================================================
# M√âTADONN√âES ET CONFIGURATION
# =========================================================================
- name: "PostgreSQL | Initialisation des m√©tadonn√©es de d√©ploiement"
  set_fact:
    postgres_deployment_metadata:
      role_name: "postgresql"
      role_version: "5.0.0"
      deployment_id: "{{ ansible_date_time.epoch }}"
      environment: "{{ lions_environment | default('development') }}"
      namespace: "{{ lions_postgres_namespace | default('database') }}"
      started_at: "{{ ansible_date_time.iso8601 }}"
      started_by: "{{ ansible_user_id | default('system') }}"
    postgres_deployment_config:
      dry_run: "{{ lions_dry_run | default(false) | bool }}"
      debug_mode: "{{ lions_debug_mode | default(false) | bool }}"
      skip_validation: "{{ postgres_skip_validation | default(false) | bool }}"
      force_recreate: "{{ postgres_force_recreate | default(false) | bool }}"
  tags:
    - postgres
    - metadata
    - always

- name: "PostgreSQL | Affichage des informations de d√©ploiement"
  debug:
    msg:
      - "üöÄ D√©marrage du d√©ploiement PostgreSQL"
      - "üìä Environnement: {{ postgres_deployment_metadata.environment }}"
      - "üè∑Ô∏è  Namespace: {{ postgres_deployment_metadata.namespace }}"
      - "üÜî ID de d√©ploiement: {{ postgres_deployment_metadata.deployment_id }}"
      - "‚è∞ D√©marr√© le: {{ postgres_deployment_metadata.started_at }}"
      - "üë§ Initi√© par: {{ postgres_deployment_metadata.started_by }}"
      - "üîß Mode debug: {{ postgres_deployment_config.debug_mode }}"
      - "üß™ Dry run: {{ postgres_deployment_config.dry_run }}"
  when: postgres_deployment_config.debug_mode | bool
  tags:
    - postgres
    - debug
    - always

# =========================================================================
# GESTION DES ERREURS ET ROLLBACK
# =========================================================================
- name: "PostgreSQL | Configuration de la gestion d'erreurs"
  set_fact:
    postgres_error_handling:
      max_retries: "{{ postgres_max_retries | default(3) }}"
      retry_delay: "{{ postgres_retry_delay | default(10) }}"
      rollback_on_failure: "{{ postgres_rollback_on_failure | default(true) | bool }}"
      error_log_file: "/tmp/postgres-deployment-{{ postgres_deployment_metadata.deployment_id }}.log"
  tags:
    - postgres
    - error-handling
    - always

# =========================================================================
# V√âRIFICATIONS PR√âALABLES CRITIQUES
# =========================================================================
- name: "PostgreSQL | V√©rification de l'√©tat de l'environnement"
  block:
    - name: "PostgreSQL | V√©rification de l'accessibilit√© du cluster Kubernetes"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ postgres_deployment_metadata.namespace }}"
      register: postgres_namespace_check
      failed_when: false

    - name: "PostgreSQL | V√©rification des variables d'environnement critiques"
      assert:
        that:
          - lions_postgres_enabled is defined
          - lions_postgres_enabled | bool
          - lions_postgres_version is defined
          - lions_postgres_version | length > 0
          - postgres_deployment_metadata.namespace is defined
        fail_msg: "Variables d'environnement PostgreSQL manquantes ou incorrectes"
        success_msg: "Variables d'environnement PostgreSQL valid√©es"

  rescue:
    - name: "PostgreSQL | Gestion d'erreur - V√©rifications pr√©alables"
      fail:
        msg: "‚ùå √âchec des v√©rifications pr√©alables PostgreSQL: {{ ansible_failed_result.msg | default('Erreur inconnue') }}"

  tags:
    - postgres
    - preflight
    - validation

# =========================================================================
# PHASE 1: PR√âREQUIS ET D√âPENDANCES
# =========================================================================
- name: "PostgreSQL | Phase 1 - V√©rification des pr√©requis"
  block:
    - name: "PostgreSQL | Inclusion des t√¢ches de pr√©requis"
      include_tasks: prerequisites.yml
      vars:
        current_phase: "prerequisites"
        phase_description: "V√©rification des pr√©requis syst√®me et Kubernetes"

  rescue:
    - name: "PostgreSQL | √âchec Phase 1 - Pr√©requis"
      set_fact:
        postgres_deployment_failed: true
        postgres_failure_phase: "prerequisites"
        postgres_failure_reason: "{{ ansible_failed_result.msg | default('√âchec des pr√©requis') }}"

    - name: "PostgreSQL | Log d'erreur Phase 1"
      lineinfile:
        path: "{{ postgres_error_handling.error_log_file }}"
        line: "[{{ ansible_date_time.iso8601 }}] ERREUR Phase 1 (Pr√©requis): {{ postgres_failure_reason }}"
        create: yes

    - name: "PostgreSQL | Arr√™t du d√©ploiement - Phase 1"
      fail:
        msg: "‚ùå D√©ploiement PostgreSQL interrompu en Phase 1 (Pr√©requis): {{ postgres_failure_reason }}"

  tags:
    - postgres
    - prerequisites
    - phase-1

# =========================================================================
# PHASE 2: PR√âPARATION DES RESSOURCES
# =========================================================================
- name: "PostgreSQL | Phase 2 - Pr√©paration des ressources"
  block:
    - name: "PostgreSQL | Inclusion des t√¢ches de pr√©paration"
      include_tasks: prepare.yml
      vars:
        current_phase: "preparation"
        phase_description: "Cr√©ation des ressources Kubernetes de base"

  rescue:
    - name: "PostgreSQL | √âchec Phase 2 - Pr√©paration"
      set_fact:
        postgres_deployment_failed: true
        postgres_failure_phase: "preparation"
        postgres_failure_reason: "{{ ansible_failed_result.msg | default('√âchec de la pr√©paration') }}"

    - name: "PostgreSQL | Log d'erreur Phase 2"
      lineinfile:
        path: "{{ postgres_error_handling.error_log_file }}"
        line: "[{{ ansible_date_time.iso8601 }}] ERREUR Phase 2 (Pr√©paration): {{ postgres_failure_reason }}"
        create: yes

    - name: "PostgreSQL | Nettoyage partiel apr√®s √©chec Phase 2"
      include_tasks: cleanup.yml
      vars:
        cleanup_scope: "preparation"
      when: postgres_error_handling.rollback_on_failure | bool

    - name: "PostgreSQL | Arr√™t du d√©ploiement - Phase 2"
      fail:
        msg: "‚ùå D√©ploiement PostgreSQL interrompu en Phase 2 (Pr√©paration): {{ postgres_failure_reason }}"

  when: postgres_deployment_failed is not defined
  tags:
    - postgres
    - preparation
    - phase-2

# =========================================================================
# PHASE 3: D√âPLOIEMENT PRINCIPAL
# =========================================================================
- name: "PostgreSQL | Phase 3 - D√©ploiement principal"
  block:
    - name: "PostgreSQL | Inclusion des t√¢ches de d√©ploiement"
      include_tasks: deploy.yml
      vars:
        current_phase: "deployment"
        phase_description: "D√©ploiement des composants PostgreSQL"

  rescue:
    - name: "PostgreSQL | √âchec Phase 3 - D√©ploiement"
      set_fact:
        postgres_deployment_failed: true
        postgres_failure_phase: "deployment"
        postgres_failure_reason: "{{ ansible_failed_result.msg | default('√âchec du d√©ploiement') }}"

    - name: "PostgreSQL | Log d'erreur Phase 3"
      lineinfile:
        path: "{{ postgres_error_handling.error_log_file }}"
        line: "[{{ ansible_date_time.iso8601 }}] ERREUR Phase 3 (D√©ploiement): {{ postgres_failure_reason }}"
        create: yes

    - name: "PostgreSQL | Rollback complet apr√®s √©chec Phase 3"
      include_tasks: rollback.yml
      vars:
        rollback_reason: "√âchec du d√©ploiement principal"
      when: postgres_error_handling.rollback_on_failure | bool

    - name: "PostgreSQL | Arr√™t du d√©ploiement - Phase 3"
      fail:
        msg: "‚ùå D√©ploiement PostgreSQL interrompu en Phase 3 (D√©ploiement): {{ postgres_failure_reason }}"

  when: postgres_deployment_failed is not defined
  tags:
    - postgres
    - deployment
    - phase-3

# =========================================================================
# PHASE 4: CONFIGURATION DU MONITORING
# =========================================================================
- name: "PostgreSQL | Phase 4 - Configuration du monitoring"
  block:
    - name: "PostgreSQL | Inclusion des t√¢ches de monitoring"
      include_tasks: monitoring.yml
      vars:
        current_phase: "monitoring"
        phase_description: "Configuration des m√©triques et alertes PostgreSQL"

  rescue:
    - name: "PostgreSQL | Avertissement Phase 4 - Monitoring"
      debug:
        msg:
          - "‚ö†Ô∏è  √âchec de la configuration du monitoring PostgreSQL"
          - "‚ÑπÔ∏è  Le d√©ploiement principal a r√©ussi, mais les m√©triques peuvent √™tre indisponibles"
          - "üîç Erreur: {{ ansible_failed_result.msg | default('Erreur de monitoring inconnue') }}"

    - name: "PostgreSQL | Log d'avertissement Phase 4"
      lineinfile:
        path: "{{ postgres_error_handling.error_log_file }}"
        line: "[{{ ansible_date_time.iso8601 }}] AVERTISSEMENT Phase 4 (Monitoring): {{ ansible_failed_result.msg | default('Erreur de monitoring') }}"
        create: yes

    - name: "PostgreSQL | Marquage du monitoring comme d√©faillant"
      set_fact:
        postgres_monitoring_failed: true

  when:
    - postgres_deployment_failed is not defined
    - lions_monitoring_enabled | default(true) | bool
  tags:
    - postgres
    - monitoring
    - phase-4

# =========================================================================
# PHASE 5: VALIDATION POST-D√âPLOIEMENT
# =========================================================================
- name: "PostgreSQL | Phase 5 - Validation post-d√©ploiement"
  block:
    - name: "PostgreSQL | Inclusion des t√¢ches de validation"
      include_tasks: validate.yml
      vars:
        current_phase: "validation"
        phase_description: "Validation de l'√©tat et des fonctionnalit√©s PostgreSQL"

  rescue:
    - name: "PostgreSQL | √âchec Phase 5 - Validation"
      set_fact:
        postgres_deployment_failed: true
        postgres_failure_phase: "validation"
        postgres_failure_reason: "{{ ansible_failed_result.msg | default('√âchec de la validation') }}"

    - name: "PostgreSQL | Log d'erreur Phase 5"
      lineinfile:
        path: "{{ postgres_error_handling.error_log_file }}"
        line: "[{{ ansible_date_time.iso8601 }}] ERREUR Phase 5 (Validation): {{ postgres_failure_reason }}"
        create: yes

    - name: "PostgreSQL | D√©cision sur le rollback apr√®s validation"
      debug:
        msg: "‚ö†Ô∏è  Validation √©chou√©e mais PostgreSQL peut √™tre partiellement fonctionnel"

    - name: "PostgreSQL | Arr√™t avec avertissement - Phase 5"
      fail:
        msg: "‚ö†Ô∏è  D√©ploiement PostgreSQL termin√© avec des erreurs de validation: {{ postgres_failure_reason }}"

  when:
    - postgres_deployment_failed is not defined
    - not postgres_deployment_config.skip_validation | bool
  tags:
    - postgres
    - validation
    - phase-5

# =========================================================================
# PHASE 6: CONFIGURATION DE LA SAUVEGARDE
# =========================================================================
- name: "PostgreSQL | Phase 6 - Configuration de la sauvegarde"
  block:
    - name: "PostgreSQL | Inclusion des t√¢ches de sauvegarde"
      include_tasks: backup.yml
      vars:
        current_phase: "backup"
        phase_description: "Configuration des strat√©gies de sauvegarde PostgreSQL"

  rescue:
    - name: "PostgreSQL | Avertissement Phase 6 - Sauvegarde"
      debug:
        msg:
          - "‚ö†Ô∏è  √âchec de la configuration de sauvegarde PostgreSQL"
          - "‚ÑπÔ∏è  PostgreSQL fonctionne mais les sauvegardes automatiques sont d√©sactiv√©es"
          - "üîç Erreur: {{ ansible_failed_result.msg | default('Erreur de sauvegarde inconnue') }}"

    - name: "PostgreSQL | Log d'avertissement Phase 6"
      lineinfile:
        path: "{{ postgres_error_handling.error_log_file }}"
        line: "[{{ ansible_date_time.iso8601 }}] AVERTISSEMENT Phase 6 (Sauvegarde): {{ ansible_failed_result.msg | default('Erreur de sauvegarde') }}"
        create: yes

    - name: "PostgreSQL | Marquage de la sauvegarde comme d√©faillante"
      set_fact:
        postgres_backup_failed: true

  when:
    - postgres_deployment_failed is not defined
    - lions_backup_enabled | default(true) | bool
    - lions_postgres_backup_enabled | default(true) | bool
  tags:
    - postgres
    - backup
    - phase-6

# =========================================================================
# FINALISATION ET RAPPORT DE D√âPLOIEMENT
# =========================================================================
- name: "PostgreSQL | G√©n√©ration du rapport de d√©ploiement"
  set_fact:
    postgres_deployment_report:
      status: "{{ 'FAILED' if postgres_deployment_failed | default(false) else 'SUCCESS' }}"
      environment: "{{ postgres_deployment_metadata.environment }}"
      namespace: "{{ postgres_deployment_metadata.namespace }}"
      deployment_id: "{{ postgres_deployment_metadata.deployment_id }}"
      started_at: "{{ postgres_deployment_metadata.started_at }}"
      completed_at: "{{ ansible_date_time.iso8601 }}"
      duration: "{{ (ansible_date_time.epoch | int) - (postgres_deployment_metadata.deployment_id | int) }}"
      failed_phase: "{{ postgres_failure_phase | default('N/A') }}"
      failure_reason: "{{ postgres_failure_reason | default('N/A') }}"
      monitoring_status: "{{ 'FAILED' if postgres_monitoring_failed | default(false) else 'OK' }}"
      backup_status: "{{ 'FAILED' if postgres_backup_failed | default(false) else 'OK' }}"
      postgres_version: "{{ lions_postgres_version }}"
      postgres_service_name: "{{ lions_postgres_service_name }}"
      postgres_endpoint: "{{ lions_postgres_service_name }}.{{ postgres_deployment_metadata.namespace }}.svc.cluster.local:{{ lions_postgres_port }}"
  tags:
    - postgres
    - report
    - always

- name: "PostgreSQL | Affichage du rapport de d√©ploiement"
  debug:
    msg:
      - "=============================================="
      - "üìä RAPPORT DE D√âPLOIEMENT POSTGRESQL"
      - "=============================================="
      - "üìà Statut: {{ postgres_deployment_report.status }}"
      - "üåç Environnement: {{ postgres_deployment_report.environment }}"
      - "üè∑Ô∏è  Namespace: {{ postgres_deployment_report.namespace }}"
      - "üÜî ID de d√©ploiement: {{ postgres_deployment_report.deployment_id }}"
      - "‚è∞ Dur√©e: {{ postgres_deployment_report.duration }}s"
      - "üêò Version PostgreSQL: {{ postgres_deployment_report.postgres_version }}"
      - "üîó Point de connexion: {{ postgres_deployment_report.postgres_endpoint }}"
      - "üìä Monitoring: {{ postgres_deployment_report.monitoring_status }}"
      - "üíæ Sauvegarde: {{ postgres_deployment_report.backup_status }}"
      - "{{ '‚ùå Phase d\'√©chec: ' + postgres_deployment_report.failed_phase if postgres_deployment_report.status == 'FAILED' else '‚úÖ D√©ploiement r√©ussi' }}"
      - "{{ 'üîç Raison: ' + postgres_deployment_report.failure_reason if postgres_deployment_report.status == 'FAILED' else '' }}"
      - "=============================================="
  tags:
    - postgres
    - report
    - always

- name: "PostgreSQL | Sauvegarde du rapport de d√©ploiement"
  copy:
    content: "{{ postgres_deployment_report | to_nice_json }}"
    dest: "/tmp/postgres-deployment-report-{{ postgres_deployment_metadata.deployment_id }}.json"
  delegate_to: localhost
  tags:
    - postgres
    - report

# =========================================================================
# NETTOYAGE ET FINALISATION
# =========================================================================
- name: "PostgreSQL | Nettoyage des fichiers temporaires"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ postgres_error_handling.error_log_file }}"
  when:
    - postgres_deployment_report.status == "SUCCESS"
    - not postgres_deployment_config.debug_mode | bool
  ignore_errors: yes
  tags:
    - postgres
    - cleanup

- name: "PostgreSQL | Message de finalisation"
  debug:
    msg: |
      {% if postgres_deployment_report.status == 'SUCCESS' %}
      üéâ D√©ploiement PostgreSQL termin√© avec succ√®s !
      
      üìã Informations de connexion:
      - H√¥te: {{ postgres_deployment_report.postgres_endpoint }}
      - Port: {{ lions_postgres_port }}
      - Base de donn√©es: {{ lions_postgres_database }}
      
      üìö Documentation disponible √†: https://docs.lions.dev/infrastructure/database/postgresql
      {% else %}
      üí• D√©ploiement PostgreSQL √©chou√© en phase {{ postgres_deployment_report.failed_phase }}
      
      üîç Consultez les logs d'erreur pour plus de d√©tails:
      - Fichier d'erreur: {{ postgres_error_handling.error_log_file }}
      - Rapport JSON: /tmp/postgres-deployment-report-{{ postgres_deployment_metadata.deployment_id }}.json
      
      üõ†Ô∏è  Guide de d√©pannage: https://docs.lions.dev/infrastructure/troubleshooting/postgresql
      {% endif %}
  tags:
    - postgres
    - always