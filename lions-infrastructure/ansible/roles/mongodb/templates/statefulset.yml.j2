---
# Titre: Template de StatefulSet Kubernetes pour MongoDB
# Description: Définit le StatefulSet Kubernetes pour MongoDB
# Auteur: Équipe LIONS Infrastructure
# Date: 2025-05-08
# Version: 1.0.0

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ app_name }}"
  namespace: "{{ app_namespace }}"
  labels:
    app: "{{ app_name }}"
    version: "{{ app_version }}"
    environment: "{{ app_environment }}"
    technology: "mongodb"
  annotations:
    description: "Déploiement de MongoDB {{ app_name }} ({{ app_version }}) en environnement {{ app_environment }}"
    deployment.kubernetes.io/revision: "1"
spec:
  serviceName: "{{ app_name }}"
  replicas: {{ mongodb_replicas[app_environment] | default(1) }}
  selector:
    matchLabels:
      app: "{{ app_name }}"
  template:
    metadata:
      labels:
        app: "{{ app_name }}"
        version: "{{ app_version }}"
        environment: "{{ app_environment }}"
        technology: "mongodb"
      annotations:
        prometheus.io/scrape: "{{ mongodb_prometheus_scrape | string | lower }}"
        prometheus.io/path: "{{ mongodb_prometheus_path }}"
        prometheus.io/port: "{{ mongodb_prometheus_port }}"
    spec:
      serviceAccountName: "{{ app_name }}"
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - "{{ app_name }}"
                topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
      containers:
        - name: "{{ app_name }}"
          image: "mongo:{{ mongodb_version }}"
          imagePullPolicy: IfNotPresent
          ports:
            - name: mongodb
              containerPort: {{ mongodb_default_port }}
              protocol: TCP
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: "{{ mongodb_admin_user }}"
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ mongodb_admin_password_secret }}"
                  key: password
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
{% if mongodb_replica_set_enabled | bool %}
            - name: MONGO_REPLSET
              value: "{{ mongodb_replica_set_name }}"
            - name: MONGO_REPLSET_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ mongodb_replica_set_key_secret }}"
                  key: key
{% endif %}
          envFrom:
            - configMapRef:
                name: "{{ app_name }}-config"
          resources:
            requests:
              cpu: "{{ mongodb_resources[app_environment].requests.cpu }}"
              memory: "{{ mongodb_resources[app_environment].requests.memory }}"
            limits:
              cpu: "{{ mongodb_resources[app_environment].limits.cpu }}"
              memory: "{{ mongodb_resources[app_environment].limits.memory }}"
          readinessProbe:
            {{- mongodb_readiness_probe | to_nice_yaml(indent=2) | indent(12) }}
          livenessProbe:
            {{- mongodb_liveness_probe | to_nice_yaml(indent=2) | indent(12) }}
          volumeMounts:
            - name: data
              mountPath: /data/db
            - name: config
              mountPath: /config
              readOnly: true
            - name: tmp
              mountPath: /tmp
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
{% if mongodb_prometheus_scrape | bool %}
        - name: mongodb-exporter
          image: "percona/mongodb_exporter:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: metrics
              containerPort: {{ mongodb_prometheus_port }}
              protocol: TCP
          env:
            - name: MONGODB_URI
              value: "mongodb://$(MONGO_INITDB_ROOT_USERNAME):$(MONGO_INITDB_ROOT_PASSWORD)@localhost:{{ mongodb_default_port }}/admin?ssl={{ 'true' if mongodb_tls_enabled else 'false' }}"
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
{% endif %}
      volumes:
        - name: config
          configMap:
            name: "{{ app_name }}-config"
        - name: tmp
          emptyDir: {}
{% if not mongodb_persistent_storage | bool %}
        - name: data
          emptyDir: {}
{% endif %}
{% if mongodb_persistent_storage | bool %}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "{{ mongodb_storage_class }}"
        resources:
          requests:
            storage: "{{ mongodb_storage_size }}"
{% endif %}