---
# Titre: Playbook de sauvegarde
# Description: Effectue des sauvegardes des données critiques
# Auteur: Équipe LIONS Infrastructure
# Date: 2025-05-08
# Version: 1.0.0

- name: Sauvegarde des données de l'infrastructure LIONS
  hosts: all
  become: true
  gather_facts: true
  
  vars:
    backup_timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"
    backup_root_dir: "/var/backups/lions"
    backup_dir: "{{ backup_root_dir }}/{{ backup_timestamp }}"
    backup_log_file: "/var/log/lions/backups/backup-{{ backup_timestamp }}.log"
    backup_retention_days: 7
    backup_components:
      - name: "Bases de données PostgreSQL"
        enabled: true
      - name: "Bases de données MongoDB"
        enabled: true
      - name: "Volumes persistants Kubernetes"
        enabled: true
      - name: "Configurations Kubernetes"
        enabled: true
      - name: "Certificats et secrets"
        enabled: true
  
  tasks:
    - name: Création des répertoires de sauvegarde et de logs
      file:
        path: "{{ item }}"
        state: directory
        mode: '0750'
      with_items:
        - "{{ backup_root_dir }}"
        - "{{ backup_dir }}"
        - "{{ backup_dir }}/databases"
        - "{{ backup_dir }}/kubernetes"
        - "{{ backup_dir }}/certificates"
        - "/var/log/lions/backups"
      ignore_errors: yes
    
    - name: Affichage du début de la sauvegarde
      debug:
        msg: "Début des tâches de sauvegarde - {{ ansible_date_time.iso8601 }}"
    
    - name: Enregistrement du début de la sauvegarde
      lineinfile:
        path: "{{ backup_log_file }}"
        line: "Début des tâches de sauvegarde - {{ ansible_date_time.iso8601 }}"
        create: yes
        mode: '0640'
      ignore_errors: yes
    
    # Sauvegarde des bases de données PostgreSQL
    - name: Sauvegarde des bases de données PostgreSQL
      block:
        - name: Récupération de la liste des namespaces avec PostgreSQL
          shell: kubectl get pods --all-namespaces -l technology=postgres -o jsonpath='{range .items[*]}{.metadata.namespace}{"\n"}{end}' | sort | uniq
          register: postgres_namespaces
          changed_when: false
          ignore_errors: yes
        
        - name: Affichage des namespaces PostgreSQL
          debug:
            msg: "Namespaces PostgreSQL trouvés: {{ postgres_namespaces.stdout_lines }}"
          when: postgres_namespaces.stdout != ""
        
        - name: Sauvegarde de chaque base de données PostgreSQL
          block:
            - name: Récupération des pods PostgreSQL dans le namespace
              shell: kubectl get pods -n {{ item }} -l technology=postgres -o jsonpath='{.items[0].metadata.name}'
              register: postgres_pod
              changed_when: false
            
            - name: Récupération de la liste des bases de données
              shell: kubectl exec -n {{ item }} {{ postgres_pod.stdout }} -- psql -U postgres -t -c "SELECT datname FROM pg_database WHERE datname NOT IN ('template0', 'template1', 'postgres')"
              register: postgres_databases
              changed_when: false
            
            - name: Sauvegarde de chaque base de données
              shell: |
                kubectl exec -n {{ item }} {{ postgres_pod.stdout }} -- pg_dump -U postgres -Fc {{ db | trim }} > {{ backup_dir }}/databases/{{ item }}-{{ db | trim }}-{{ backup_timestamp }}.dump
              with_items: "{{ postgres_databases.stdout_lines }}"
              loop_control:
                loop_var: db
              register: postgres_backup_results
              ignore_errors: yes
            
            - name: Enregistrement des résultats de sauvegarde PostgreSQL
              lineinfile:
                path: "{{ backup_log_file }}"
                line: "Sauvegarde PostgreSQL pour {{ item.item }} - {{ 'Succès' if item.rc == 0 else 'Échec' }}"
                create: yes
              with_items: "{{ postgres_backup_results.results }}"
              ignore_errors: yes
          when: postgres_pod.stdout is defined and postgres_pod.stdout != ""
          loop: "{{ postgres_namespaces.stdout_lines }}"
          ignore_errors: yes
        
        - name: Enregistrement de la sauvegarde PostgreSQL
          lineinfile:
            path: "{{ backup_log_file }}"
            line: "Sauvegarde des bases de données PostgreSQL terminée - {{ ansible_date_time.iso8601 }}"
            create: yes
          ignore_errors: yes
      when: backup_components | selectattr('name', 'equalto', 'Bases de données PostgreSQL') | selectattr('enabled') | list | length > 0
      ignore_errors: yes
    
    # Sauvegarde des bases de données MongoDB
    - name: Sauvegarde des bases de données MongoDB
      block:
        - name: Récupération de la liste des namespaces avec MongoDB
          shell: kubectl get pods --all-namespaces -l technology=mongodb -o jsonpath='{range .items[*]}{.metadata.namespace}{"\n"}{end}' | sort | uniq
          register: mongodb_namespaces
          changed_when: false
          ignore_errors: yes
        
        - name: Affichage des namespaces MongoDB
          debug:
            msg: "Namespaces MongoDB trouvés: {{ mongodb_namespaces.stdout_lines }}"
          when: mongodb_namespaces.stdout != ""
        
        - name: Sauvegarde de chaque base de données MongoDB
          block:
            - name: Récupération des pods MongoDB dans le namespace
              shell: kubectl get pods -n {{ item }} -l technology=mongodb -o jsonpath='{.items[0].metadata.name}'
              register: mongodb_pod
              changed_when: false
            
            - name: Récupération de la liste des bases de données
              shell: kubectl exec -n {{ item }} {{ mongodb_pod.stdout }} -- mongosh --quiet --eval "db.adminCommand('listDatabases').databases.forEach(function(d) { if(d.name != 'admin' && d.name != 'config' && d.name != 'local') { print(d.name); } })"
              register: mongodb_databases
              changed_when: false
            
            - name: Sauvegarde de chaque base de données
              shell: |
                kubectl exec -n {{ item }} {{ mongodb_pod.stdout }} -- mongodump --db={{ db | trim }} --archive=/tmp/{{ db | trim }}.archive
                kubectl cp {{ item }}/{{ mongodb_pod.stdout }}:/tmp/{{ db | trim }}.archive {{ backup_dir }}/databases/{{ item }}-{{ db | trim }}-{{ backup_timestamp }}.archive
                kubectl exec -n {{ item }} {{ mongodb_pod.stdout }} -- rm /tmp/{{ db | trim }}.archive
              with_items: "{{ mongodb_databases.stdout_lines }}"
              loop_control:
                loop_var: db
              register: mongodb_backup_results
              ignore_errors: yes
            
            - name: Enregistrement des résultats de sauvegarde MongoDB
              lineinfile:
                path: "{{ backup_log_file }}"
                line: "Sauvegarde MongoDB pour {{ item.item }} - {{ 'Succès' if item.rc == 0 else 'Échec' }}"
                create: yes
              with_items: "{{ mongodb_backup_results.results }}"
              ignore_errors: yes
          when: mongodb_pod.stdout is defined and mongodb_pod.stdout != ""
          loop: "{{ mongodb_namespaces.stdout_lines }}"
          ignore_errors: yes
        
        - name: Enregistrement de la sauvegarde MongoDB
          lineinfile:
            path: "{{ backup_log_file }}"
            line: "Sauvegarde des bases de données MongoDB terminée - {{ ansible_date_time.iso8601 }}"
            create: yes
          ignore_errors: yes
      when: backup_components | selectattr('name', 'equalto', 'Bases de données MongoDB') | selectattr('enabled') | list | length > 0
      ignore_errors: yes
    
    # Sauvegarde des volumes persistants Kubernetes
    - name: Sauvegarde des volumes persistants Kubernetes
      block:
        - name: Récupération de la liste des PVCs
          shell: kubectl get pvc --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}/{.metadata.name}{"\n"}{end}'
          register: kubernetes_pvcs
          changed_when: false
          ignore_errors: yes
        
        - name: Affichage des PVCs
          debug:
            msg: "PVCs trouvés: {{ kubernetes_pvcs.stdout_lines }}"
          when: kubernetes_pvcs.stdout != ""
        
        - name: Création d'un pod de sauvegarde pour chaque PVC
          shell: |
            NS=$(echo "{{ item }}" | cut -d'/' -f1)
            PVC=$(echo "{{ item }}" | cut -d'/' -f2)
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Pod
            metadata:
              name: backup-${PVC}
              namespace: ${NS}
              labels:
                app: backup-pod
            spec:
              volumes:
                - name: data
                  persistentVolumeClaim:
                    claimName: ${PVC}
                - name: backup
                  emptyDir: {}
              containers:
                - name: backup
                  image: busybox
                  command: ["sh", "-c", "tar -czf /backup/${PVC}.tar.gz -C /data ."]
                  volumeMounts:
                    - name: data
                      mountPath: /data
                    - name: backup
                      mountPath: /backup
              restartPolicy: Never
            EOF
          with_items: "{{ kubernetes_pvcs.stdout_lines }}"
          register: backup_pods_creation
          ignore_errors: yes
        
        - name: Attente de la fin des pods de sauvegarde
          shell: |
            NS=$(echo "{{ item.item }}" | cut -d'/' -f1)
            PVC=$(echo "{{ item.item }}" | cut -d'/' -f2)
            kubectl wait --for=condition=complete --timeout=300s pod/backup-${PVC} -n ${NS} || kubectl wait --for=condition=failed --timeout=10s pod/backup-${PVC} -n ${NS} || true
          with_items: "{{ backup_pods_creation.results }}"
          when: item is succeeded
          ignore_errors: yes
        
        - name: Copie des sauvegardes des PVCs
          shell: |
            NS=$(echo "{{ item.item }}" | cut -d'/' -f1)
            PVC=$(echo "{{ item.item }}" | cut -d'/' -f2)
            kubectl cp ${NS}/backup-${PVC}:/backup/${PVC}.tar.gz {{ backup_dir }}/kubernetes/${NS}-${PVC}-{{ backup_timestamp }}.tar.gz
          with_items: "{{ backup_pods_creation.results }}"
          when: item is succeeded
          register: pvc_backup_results
          ignore_errors: yes
        
        - name: Suppression des pods de sauvegarde
          shell: |
            NS=$(echo "{{ item.item.item }}" | cut -d'/' -f1)
            PVC=$(echo "{{ item.item.item }}" | cut -d'/' -f2)
            kubectl delete pod backup-${PVC} -n ${NS}
          with_items: "{{ pvc_backup_results.results }}"
          when: item is succeeded
          ignore_errors: yes
        
        - name: Enregistrement de la sauvegarde des volumes persistants
          lineinfile:
            path: "{{ backup_log_file }}"
            line: "Sauvegarde des volumes persistants Kubernetes terminée - {{ ansible_date_time.iso8601 }}"
            create: yes
          ignore_errors: yes
      when: backup_components | selectattr('name', 'equalto', 'Volumes persistants Kubernetes') | selectattr('enabled') | list | length > 0
      ignore_errors: yes
    
    # Sauvegarde des configurations Kubernetes
    - name: Sauvegarde des configurations Kubernetes
      block:
        - name: Sauvegarde des namespaces
          shell: kubectl get namespaces -o yaml > {{ backup_dir }}/kubernetes/namespaces-{{ backup_timestamp }}.yaml
          changed_when: false
          ignore_errors: yes
        
        - name: Sauvegarde des deployments
          shell: kubectl get deployments --all-namespaces -o yaml > {{ backup_dir }}/kubernetes/deployments-{{ backup_timestamp }}.yaml
          changed_when: false
          ignore_errors: yes
        
        - name: Sauvegarde des statefulsets
          shell: kubectl get statefulsets --all-namespaces -o yaml > {{ backup_dir }}/kubernetes/statefulsets-{{ backup_timestamp }}.yaml
          changed_when: false
          ignore_errors: yes
        
        - name: Sauvegarde des daemonsets
          shell: kubectl get daemonsets --all-namespaces -o yaml > {{ backup_dir }}/kubernetes/daemonsets-{{ backup_timestamp }}.yaml
          changed_when: false
          ignore_errors: yes
        
        - name: Sauvegarde des services
          shell: kubectl get services --all-namespaces -o yaml > {{ backup_dir }}/kubernetes/services-{{ backup_timestamp }}.yaml
          changed_when: false
          ignore_errors: yes
        
        - name: Sauvegarde des ingresses
          shell: kubectl get ingresses --all-namespaces -o yaml > {{ backup_dir }}/kubernetes/ingresses-{{ backup_timestamp }}.yaml
          changed_when: false
          ignore_errors: yes
        
        - name: Sauvegarde des configmaps
          shell: kubectl get configmaps --all-namespaces -o yaml > {{ backup_dir }}/kubernetes/configmaps-{{ backup_timestamp }}.yaml
          changed_when: false
          ignore_errors: yes
        
        - name: Enregistrement de la sauvegarde des configurations Kubernetes
          lineinfile:
            path: "{{ backup_log_file }}"
            line: "Sauvegarde des configurations Kubernetes terminée - {{ ansible_date_time.iso8601 }}"
            create: yes
          ignore_errors: yes
      when: backup_components | selectattr('name', 'equalto', 'Configurations Kubernetes') | selectattr('enabled') | list | length > 0
      ignore_errors: yes
    
    # Sauvegarde des certificats et secrets
    - name: Sauvegarde des certificats et secrets
      block:
        - name: Sauvegarde des certificats
          shell: kubectl get certificates --all-namespaces -o yaml > {{ backup_dir }}/certificates/certificates-{{ backup_timestamp }}.yaml
          changed_when: false
          ignore_errors: yes
        
        - name: Sauvegarde des secrets (sans les valeurs)
          shell: |
            kubectl get secrets --all-namespaces -o json | jq '.items[] |= (del(.data) | .metadata.managedFields = [])' > {{ backup_dir }}/certificates/secrets-structure-{{ backup_timestamp }}.json
          changed_when: false
          ignore_errors: yes
        
        - name: Enregistrement de la sauvegarde des certificats et secrets
          lineinfile:
            path: "{{ backup_log_file }}"
            line: "Sauvegarde des certificats et secrets terminée - {{ ansible_date_time.iso8601 }}"
            create: yes
          ignore_errors: yes
      when: backup_components | selectattr('name', 'equalto', 'Certificats et secrets') | selectattr('enabled') | list | length > 0
      ignore_errors: yes
    
    # Compression de la sauvegarde
    - name: Compression de la sauvegarde
      archive:
        path: "{{ backup_dir }}"
        dest: "{{ backup_root_dir }}/lions-backup-{{ backup_timestamp }}.tar.gz"
        format: gz
      ignore_errors: yes
    
    # Nettoyage des anciennes sauvegardes
    - name: Nettoyage des anciennes sauvegardes
      find:
        paths: "{{ backup_root_dir }}"
        patterns: "lions-backup-*.tar.gz"
        age: "{{ backup_retention_days }}d"
        recurse: no
      register: old_backups
    
    - name: Suppression des anciennes sauvegardes
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ old_backups.files }}"
      when: old_backups.matched > 0
      ignore_errors: yes
    
    - name: Nettoyage des répertoires de sauvegarde temporaires
      file:
        path: "{{ backup_dir }}"
        state: absent
      ignore_errors: yes
    
    - name: Affichage de la fin de la sauvegarde
      debug:
        msg: "Fin des tâches de sauvegarde - {{ ansible_date_time.iso8601 }}"
    
    - name: Enregistrement de la fin de la sauvegarde
      lineinfile:
        path: "{{ backup_log_file }}"
        line: "Fin des tâches de sauvegarde - {{ ansible_date_time.iso8601 }}"
        create: yes
        mode: '0640'
      ignore_errors: yes