---
# =========================================================================
# LIONS INFRASTRUCTURE 5.0 - PLAYBOOK HASHICORP VAULT
# =========================================================================
# Description: Installation et configuration compl√®te de HashiCorp Vault
# Version: 5.0.0
# Maintainer: DevOps Team LIONS
# Documentation: https://docs.lions.dev/infrastructure/vault
# =========================================================================

- name: "LIONS VAULT: Installation et configuration HashiCorp Vault"
  hosts: "{{ target_hosts | default('lions_vps') }}"
  become: true
  gather_facts: true
  serial: "{{ vault_install_serial | default('100%') }}"

  # =========================================================================
  # VARIABLES DE CONFIGURATION VAULT
  # =========================================================================
  vars:
    # Configuration principale Vault
    vault_version: "{{ lookup('env', 'LIONS_VAULT_VERSION') | default('1.15.2', true) }}"
    vault_namespace: "{{ lookup('env', 'LIONS_VAULT_NAMESPACE') | default('vault-system', true) }}"
    vault_service_name: "{{ lookup('env', 'LIONS_VAULT_SERVICE_NAME') | default('vault', true) }}"
    vault_port: "{{ lookup('env', 'LIONS_VAULT_PORT') | default('8200', true) | int }}"
    vault_cluster_port: "{{ vault_port | int + 1 }}"

    # Configuration des chemins et r√©pertoires
    vault_data_dir: "{{ lookup('env', 'LIONS_VAULT_DATA_DIR') | default('/opt/vault/data', true) }}"
    vault_config_dir: "{{ lookup('env', 'LIONS_VAULT_CONFIG_DIR') | default('/etc/vault.d', true) }}"
    vault_log_dir: "/var/log/vault"
    vault_binary_path: "/usr/local/bin/vault"
    vault_temp_dir: "/tmp/vault-install"

    # Configuration r√©seau et domaine
    vault_domain_base: "{{ lookup('env', 'LIONS_DNS_DOMAIN_BASE') | default('lions.local', true) }}"
    vault_domain_full: "{{ lookup('env', 'LIONS_DNS_FULL_DOMAIN') | default('dev.lions.local', true) }}"
    vault_addr: "{{ lookup('env', 'LIONS_VAULT_ADDR') | default('https://vault.' + vault_domain_full, true) }}"
    vault_skip_verify: "{{ lookup('env', 'LIONS_VAULT_SKIP_VERIFY') | default('false', true) | bool }}"

    # Configuration s√©curit√©
    vault_tls_enabled: "{{ lookup('env', 'LIONS_SECURITY_TLS_ENABLED') | default('true', true) | bool }}"
    vault_auto_unseal: "{{ lookup('env', 'LIONS_VAULT_AUTO_UNSEAL') | default('false', true) | bool }}"
    vault_seal_type: "{{ lookup('env', 'LIONS_VAULT_SEAL_TYPE') | default('shamir', true) }}"
    vault_ha_enabled: "{{ lookup('env', 'LIONS_VAULT_HA_ENABLED') | default('false', true) | bool }}"

    # Configuration utilisateur et permissions
    vault_user: "vault"
    vault_group: "vault"
    vault_uid: "1001"
    vault_gid: "1001"

    # Configuration backup et logging
    vault_audit_enabled: "{{ lookup('env', 'LIONS_AUDIT_ENABLED') | default('true', true) | bool }}"
    vault_log_level: "{{ lookup('env', 'LIONS_LOG_LEVEL') | default('INFO', true) }}"
    vault_log_format: "{{ lookup('env', 'LIONS_LOG_FORMAT') | default('json', true) }}"

    # Variables d'environnement pour l'ex√©cution
    vault_environment:
      LIONS_ENVIRONMENT: "{{ lookup('env', 'LIONS_ENVIRONMENT') | default('development', true) }}"
      VAULT_ADDR: "{{ vault_addr }}"
      VAULT_SKIP_VERIFY: "{{ vault_skip_verify | lower }}"
      VAULT_FORMAT: "json"
      VAULT_LOG_LEVEL: "{{ vault_log_level }}"

  # =========================================================================
  # T√ÇCHES DE PR√âPARATION ET VALIDATION
  # =========================================================================
  pre_tasks:
    - name: "VAULT PREP: Validation de la configuration"
      block:
        - name: "VAULT PREP: V√©rification des variables obligatoires"
          assert:
            that:
              - vault_version is defined and vault_version != ""
              - vault_domain_full is defined and vault_domain_full != ""
              - vault_addr is defined and vault_addr != ""
            fail_msg: "Variables de configuration Vault manquantes ou invalides"
            success_msg: "Configuration Vault valid√©e avec succ√®s"

        - name: "VAULT PREP: Affichage de la configuration"
          debug:
            msg:
              - "üèóÔ∏è  Installation HashiCorp Vault {{ vault_version }}"
              - "üåê Domaine: {{ vault_domain_full }}"
              - "üîó URL: {{ vault_addr }}"
              - "üîí TLS: {{ vault_tls_enabled | ternary('Activ√©', 'D√©sactiv√©') }}"
              - "‚ö° HA: {{ vault_ha_enabled | ternary('Activ√©', 'D√©sactiv√©') }}"
              - "üìÅ R√©pertoire donn√©es: {{ vault_data_dir }}"
          when: lookup('env', 'LIONS_DEBUG_MODE') | default('false', true) | bool

    - name: "VAULT PREP: V√©rification des pr√©requis syst√®me"
      block:
        - name: "VAULT PREP: V√©rification de l'espace disque disponible"
          shell: df -h {{ vault_data_dir | dirname }} | tail -1 | awk '{print $5}' | sed 's/%//'
          register: disk_usage
          changed_when: false
          failed_when: disk_usage.stdout | int > 85

        - name: "VAULT PREP: V√©rification de la m√©moire disponible"
          shell: free -m | awk 'NR==2{printf "%.1f", $3*100/$2}'
          register: memory_usage
          changed_when: false
          failed_when: memory_usage.stdout | float > 90.0

  # =========================================================================
  # T√ÇCHES PRINCIPALES D'INSTALLATION
  # =========================================================================
  tasks:
    # -------------------------------------------------------------------------
    # SECTION: Pr√©paration du syst√®me
    # -------------------------------------------------------------------------
    - name: "VAULT SYSTEM: Pr√©paration du syst√®me pour Vault"
      block:
        - name: "VAULT SYSTEM: Installation des paquets requis"
          package:
            name:
              - curl
              - unzip
              - jq
              - gpg
              - ca-certificates
            state: present
            update_cache: true

        - name: "VAULT SYSTEM: Cr√©ation du groupe vault"
          group:
            name: "{{ vault_group }}"
            gid: "{{ vault_gid }}"
            state: present

        - name: "VAULT SYSTEM: Cr√©ation de l'utilisateur vault"
          user:
            name: "{{ vault_user }}"
            uid: "{{ vault_uid }}"
            group: "{{ vault_group }}"
            system: true
            shell: /bin/false
            home: "{{ vault_data_dir }}"
            create_home: false
            state: present

        - name: "VAULT SYSTEM: Cr√©ation des r√©pertoires Vault"
          file:
            path: "{{ item.path }}"
            state: directory
            owner: "{{ item.owner | default(vault_user) }}"
            group: "{{ item.group | default(vault_group) }}"
            mode: "{{ item.mode | default('0755') }}"
          loop:
            - { path: "{{ vault_data_dir }}", mode: "0750" }
            - { path: "{{ vault_config_dir }}", mode: "0750" }
            - { path: "{{ vault_config_dir }}/tls", mode: "0700" }
            - { path: "{{ vault_config_dir }}/secure", mode: "0700", owner: "root", group: "root" }
            - { path: "{{ vault_log_dir }}", mode: "0755" }
            - { path: "{{ vault_temp_dir }}", mode: "0755", owner: "root", group: "root" }

    # -------------------------------------------------------------------------
    # SECTION: T√©l√©chargement et installation de Vault
    # -------------------------------------------------------------------------
    - name: "VAULT INSTALL: T√©l√©chargement et installation HashiCorp Vault"
      block:
        - name: "VAULT INSTALL: V√©rification de la version install√©e"
          command: "{{ vault_binary_path }} version"
          register: vault_current_version
          changed_when: false
          failed_when: false

        - name: "VAULT INSTALL: T√©l√©chargement de Vault {{ vault_version }}"
          get_url:
            url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
            dest: "{{ vault_temp_dir }}/vault.zip"
            mode: '0644'
            timeout: 300
          when: vault_current_version.rc != 0 or vault_version not in vault_current_version.stdout

        - name: "VAULT INSTALL: T√©l√©chargement des checksums"
          get_url:
            url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_SHA256SUMS"
            dest: "{{ vault_temp_dir }}/vault_checksums.txt"
            mode: '0644'
          when: vault_current_version.rc != 0 or vault_version not in vault_current_version.stdout

        - name: "VAULT INSTALL: V√©rification des checksums"
          shell: |
            cd {{ vault_temp_dir }}
            sha256sum -c vault_checksums.txt --ignore-missing
          when: vault_current_version.rc != 0 or vault_version not in vault_current_version.stdout

        - name: "VAULT INSTALL: Installation du binaire Vault"
          unarchive:
            src: "{{ vault_temp_dir }}/vault.zip"
            dest: "/usr/local/bin"
            remote_src: true
            owner: root
            group: root
            mode: '0755'
          when: vault_current_version.rc != 0 or vault_version not in vault_current_version.stdout
          notify:
            - restart vault
            - validate vault installation

        - name: "VAULT INSTALL: Cr√©ation des liens symboliques"
          file:
            src: "{{ vault_binary_path }}"
            dest: "/usr/bin/vault"
            state: link

    # -------------------------------------------------------------------------
    # SECTION: Configuration de Vault
    # -------------------------------------------------------------------------
    - name: "VAULT CONFIG: Configuration de HashiCorp Vault"
      block:
        - name: "VAULT CONFIG: G√©n√©ration de la configuration Vault"
          template:
            src: "../templates/vault.hcl.j2"
            dest: "{{ vault_config_dir }}/vault.hcl"
            owner: "{{ vault_user }}"
            group: "{{ vault_group }}"
            mode: '0640'
            backup: true
          notify: restart vault

        - name: "VAULT CONFIG: Configuration du service systemd"
          template:
            src: "../templates/vault.service.j2"
            dest: "/etc/systemd/system/vault.service"
            owner: root
            group: root
            mode: '0644'
            backup: true
          notify:
            - reload systemd
            - restart vault

        - name: "VAULT CONFIG: Configuration de l'environnement Vault"
          template:
            src: "../templates/vault.env.j2"
            dest: "/etc/default/vault"
            owner: root
            group: root
            mode: '0644'
          notify: restart vault

        - name: "VAULT CONFIG: Configuration de logrotate"
          template:
            src: "../templates/vault-logrotate.j2"
            dest: "/etc/logrotate.d/vault"
            owner: root
            group: root
            mode: '0644'

    # -------------------------------------------------------------------------
    # SECTION: D√©marrage et validation du service
    # -------------------------------------------------------------------------
    - name: "VAULT SERVICE: D√©marrage et activation du service Vault"
      block:
        - name: "VAULT SERVICE: Rechargement de systemd"
          systemd:
            daemon_reload: true

        - name: "VAULT SERVICE: Activation et d√©marrage du service"
          systemd:
            name: vault
            state: started
            enabled: true

        - name: "VAULT SERVICE: V√©rification du statut du service"
          systemd:
            name: vault
          register: vault_service_status

        - name: "VAULT SERVICE: Attente de la disponibilit√© de Vault"
          uri:
            url: "{{ vault_addr }}/v1/sys/health"
            method: GET
            validate_certs: "{{ not vault_skip_verify }}"
            status_code: [200, 429, 472, 501, 503]
            timeout: 10
          register: vault_health_check
          until: vault_health_check.status in [200, 429, 472, 501, 503]
          retries: 30
          delay: 10

    # -------------------------------------------------------------------------
    # SECTION: Initialisation de Vault
    # -------------------------------------------------------------------------
    - name: "VAULT INIT: Initialisation de HashiCorp Vault"
      block:
        - name: "VAULT INIT: V√©rification du statut d'initialisation"
          uri:
            url: "{{ vault_addr }}/v1/sys/init"
            method: GET
            validate_certs: "{{ not vault_skip_verify }}"
          register: vault_init_status
          environment: "{{ vault_environment }}"

        - name: "VAULT INIT: Initialisation de Vault (premi√®re installation)"
          uri:
            url: "{{ vault_addr }}/v1/sys/init"
            method: POST
            body_format: json
            body:
              secret_shares: 5
              secret_threshold: 3
              recovery_shares: 5
              recovery_threshold: 3
              stored_shares: 1
            validate_certs: "{{ not vault_skip_verify }}"
          register: vault_initialization
          when: not vault_init_status.json.initialized
          environment: "{{ vault_environment }}"

        - name: "VAULT INIT: Sauvegarde s√©curis√©e des cl√©s d'initialisation"
          copy:
            content: "{{ vault_initialization.json | to_nice_json }}"
            dest: "{{ vault_config_dir }}/secure/vault-init.json"
            owner: root
            group: root
            mode: '0600'
            backup: true
          when: vault_initialization is defined and vault_initialization.json is defined
          no_log: true

        - name: "VAULT INIT: D√©verrouillage automatique de Vault"
          uri:
            url: "{{ vault_addr }}/v1/sys/unseal"
            method: POST
            body_format: json
            body:
              key: "{{ item }}"
            validate_certs: "{{ not vault_skip_verify }}"
          loop: "{{ vault_initialization.json.keys[:3] }}"
          when:
            - vault_initialization is defined
            - vault_initialization.json is defined
            - vault_health_check.status == 503
          environment: "{{ vault_environment }}"
          no_log: true

    # -------------------------------------------------------------------------
    # SECTION: Configuration post-initialisation
    # -------------------------------------------------------------------------
    - name: "VAULT POST-CONFIG: Configuration post-initialisation"
      block:
        - name: "VAULT POST-CONFIG: Lecture du token root"
          slurp:
            src: "{{ vault_config_dir }}/secure/vault-init.json"
          register: vault_init_data
          no_log: true

        - name: "VAULT POST-CONFIG: Activation du moteur de secrets KV v2"
          uri:
            url: "{{ vault_addr }}/v1/sys/mounts/kv"
            method: POST
            headers:
              X-Vault-Token: "{{ (vault_init_data.content | b64decode | from_json).root_token }}"
            body_format: json
            body:
              type: kv
              options:
                version: "2"
            validate_certs: "{{ not vault_skip_verify }}"
            status_code: [200, 400]
          register: kv_enable_result
          failed_when:
            - kv_enable_result.status == 400
            - "'path is already in use' not in kv_enable_result.json.errors[0]"
          environment: "{{ vault_environment }}"
          no_log: true

        - name: "VAULT POST-CONFIG: Cr√©ation de la politique pour les applications"
          uri:
            url: "{{ vault_addr }}/v1/sys/policies/acl/lions-app-policy"
            method: PUT
            headers:
              X-Vault-Token: "{{ (vault_init_data.content | b64decode | from_json).root_token }}"
            body_format: json
            body:
              policy: |
                path "kv/data/lions/*" {
                  capabilities = ["read"]
                }
                path "kv/metadata/lions/*" {
                  capabilities = ["list", "read"]
                }
                path "auth/token/lookup-self" {
                  capabilities = ["read"]
                }
            validate_certs: "{{ not vault_skip_verify }}"
          environment: "{{ vault_environment }}"
          no_log: true

        - name: "VAULT POST-CONFIG: Activation de l'audit logging"
          uri:
            url: "{{ vault_addr }}/v1/sys/audit/file"
            method: PUT
            headers:
              X-Vault-Token: "{{ (vault_init_data.content | b64decode | from_json).root_token }}"
            body_format: json
            body:
              type: file
              options:
                file_path: "{{ vault_log_dir }}/vault-audit.log"
                log_raw: false
                hmac_accessor: true
                mode: "0640"
            validate_certs: "{{ not vault_skip_verify }}"
            status_code: [200, 400]
          register: audit_enable_result
          failed_when:
            - audit_enable_result.status == 400
            - "'path already in use' not in audit_enable_result.json.errors[0]"
          when: vault_audit_enabled
          environment: "{{ vault_environment }}"
          no_log: true

    # -------------------------------------------------------------------------
    # SECTION: D√©ploiement Kubernetes
    # -------------------------------------------------------------------------
    - name: "VAULT K8S: D√©ploiement des ressources Kubernetes"
      block:
        - name: "VAULT K8S: Cr√©ation du namespace Vault"
          kubernetes.core.k8s:
            name: "{{ vault_namespace }}"
            api_version: v1
            kind: Namespace
            state: present
            kubeconfig: "{{ lookup('env', 'KUBECONFIG') | default('/etc/rancher/k3s/k3s.yaml', true) }}"

        - name: "VAULT K8S: D√©ploiement du service externe Vault"
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ lookup('env', 'KUBECONFIG') | default('/etc/rancher/k3s/k3s.yaml', true) }}"
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: "{{ vault_service_name }}-external"
                namespace: "{{ vault_namespace }}"
                labels:
                  app: vault
                  component: external-service
                  managed-by: lions-infrastructure
              spec:
                type: ExternalName
                externalName: "{{ ansible_host }}"
                ports:
                  - name: http
                    port: "{{ vault_port }}"
                    targetPort: "{{ vault_port }}"
                    protocol: TCP
                  - name: cluster
                    port: "{{ vault_cluster_port }}"
                    targetPort: "{{ vault_cluster_port }}"
                    protocol: TCP

        - name: "VAULT K8S: D√©ploiement de l'Ingress Vault"
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ lookup('env', 'KUBECONFIG') | default('/etc/rancher/k3s/k3s.yaml', true) }}"
            definition:
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: "{{ vault_service_name }}"
                namespace: "{{ vault_namespace }}"
                labels:
                  app: vault
                  component: ingress
                  managed-by: lions-infrastructure
                annotations:
                  cert-manager.io/cluster-issuer: "{{ 'letsencrypt-prod' if not (lookup('env', 'LIONS_SECURITY_TLS_STAGING') | default('true', true) | bool) else 'letsencrypt-staging' }}"
                  traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
                  traefik.ingress.kubernetes.io/router.tls: "true"
                  traefik.ingress.kubernetes.io/router.middlewares: "{{ vault_namespace }}-vault-headers@kubernetescrd"
              spec:
                ingressClassName: traefik
                tls:
                  - hosts:
                      - "vault.{{ vault_domain_full }}"
                    secretName: vault-tls
                rules:
                  - host: "vault.{{ vault_domain_full }}"
                    http:
                      paths:
                        - path: /
                          pathType: Prefix
                          backend:
                            service:
                              name: "{{ vault_service_name }}-external"
                              port:
                                number: "{{ vault_port }}"

        - name: "VAULT K8S: Configuration des middlewares Traefik"
          kubernetes.core.k8s:
            state: present
            kubeconfig: "{{ lookup('env', 'KUBECONFIG') | default('/etc/rancher/k3s/k3s.yaml', true) }}"
            definition:
              apiVersion: traefik.containo.us/v1alpha1
              kind: Middleware
              metadata:
                name: vault-headers
                namespace: "{{ vault_namespace }}"
              spec:
                headers:
                  customRequestHeaders:
                    X-Forwarded-Proto: "https"
                  customResponseHeaders:
                    X-Frame-Options: "DENY"
                    X-Content-Type-Options: "nosniff"
                    Referrer-Policy: "strict-origin-when-cross-origin"

  # =========================================================================
  # T√ÇCHES POST-INSTALLATION
  # =========================================================================
  post_tasks:
    - name: "VAULT POST-INSTALL: Finalisation et validation"
      block:
        - name: "VAULT POST-INSTALL: Nettoyage des fichiers temporaires"
          file:
            path: "{{ vault_temp_dir }}"
            state: absent

        - name: "VAULT POST-INSTALL: Test final de connectivit√©"
          uri:
            url: "{{ vault_addr }}/v1/sys/health"
            method: GET
            validate_certs: "{{ not vault_skip_verify }}"
          register: final_health_check
          environment: "{{ vault_environment }}"

        - name: "VAULT POST-INSTALL: Affichage du r√©capitulatif d'installation"
          debug:
            msg:
              - "‚úÖ HashiCorp Vault {{ vault_version }} install√© avec succ√®s"
              - "üåê URL d'acc√®s: {{ vault_addr }}"
              - "üîë Interface Web: {{ vault_addr }}/ui"
              - "üîí Statut TLS: {{ vault_tls_enabled | ternary('Activ√©', 'D√©sactiv√©') }}"
              - "‚ö° Haute Disponibilit√©: {{ vault_ha_enabled | ternary('Activ√©', 'D√©sactiv√©') }}"
              - "üìÅ Donn√©es: {{ vault_data_dir }}"
              - "‚öôÔ∏è  Configuration: {{ vault_config_dir }}/vault.hcl"
              - "üîê Cl√©s d'initialisation: {{ vault_config_dir }}/secure/vault-init.json"
              - ""
              - "‚ö†Ô∏è  IMPORTANT: Sauvegardez le fichier d'initialisation dans un endroit s√©curis√©"
              - "‚ö†Ô∏è  Ce fichier contient les cl√©s de d√©verrouillage et le token root"

        - name: "VAULT POST-INSTALL: Cr√©ation du rapport d'installation"
          template:
            src: "../templates/vault-installation-report.j2"
            dest: "{{ vault_config_dir }}/installation-report-{{ ansible_date_time.date }}.json"
            owner: root
            group: root
            mode: '0600'

  # =========================================================================
  # GESTIONNAIRES D'√âV√âNEMENTS
  # =========================================================================
  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: true

    - name: restart vault
      systemd:
        name: vault
        state: restarted
      listen: "restart vault"

    - name: validate vault installation
      command: "{{ vault_binary_path }} version"
      register: vault_version_check
      changed_when: false
      failed_when: vault_version not in vault_version_check.stdout