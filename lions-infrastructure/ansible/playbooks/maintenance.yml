---
# ===============================================================================
# LIONS INFRASTRUCTURE - MAINTENANCE PLAYBOOK v5.0
# ===============================================================================
# Description: Effectue des t√¢ches de maintenance sur l'infrastructure avec variables d'environnement
# Version: 5.0.0
# Date: 01/06/2025
# Author: LIONS DevOps Team
# ===============================================================================

- name: "Maintenance de l'infrastructure LIONS {{ lions_environment | default(lookup('env', 'LIONS_ENVIRONMENT')) | upper }}"
  hosts: all
  become: true
  gather_facts: true
  
  vars:
    # =========================================================================
    # CONFIGURATION DE BASE DEPUIS VARIABLES D'ENVIRONNEMENT
    # =========================================================================
    lions_environment: "{{ lookup('env', 'LIONS_ENVIRONMENT') | default('development') }}"
    lions_project_name: "{{ lookup('env', 'LIONS_PROJECT_NAME') | default('lions-infrastructure') }}"
    lions_version: "{{ lookup('env', 'LIONS_VERSION') | default('5.0.0') }}"
    lions_deployment_id: "{{ lookup('env', 'LIONS_DEPLOYMENT_ID') | default(ansible_date_time.epoch) }}"
    
    # =========================================================================
    # CONFIGURATION MAINTENANCE
    # =========================================================================
    maintenance_enabled: "{{ lookup('env', 'LIONS_MAINTENANCE_ENABLED') | default('true') | bool }}"
    maintenance_window: "{{ lookup('env', 'LIONS_MAINTENANCE_WINDOW') | default('02:00-04:00') }}"
    maintenance_timezone: "{{ lookup('env', 'LIONS_MAINTENANCE_TIMEZONE') | default('UTC') }}"
    maintenance_log_path: "{{ lookup('env', 'LIONS_LOG_PATH') | default('/var/log/lions') }}/maintenance"
    maintenance_log_file: "{{ maintenance_log_path }}/maintenance-{{ lions_environment }}-{{ ansible_date_time.date }}.log"
    maintenance_notification_enabled: "{{ lookup('env', 'LIONS_MAINTENANCE_NOTIFICATION_ENABLED') | default('true') | bool }}"
    
    # =========================================================================
    # CONFIGURATION KUBERNETES
    # =========================================================================
    kube_config_path: "{{ lookup('env', 'LIONS_KUBE_CONFIG_PATH') | default(ansible_env.HOME + '/.kube/config') }}"
    kubectl_timeout: "{{ lookup('env', 'LIONS_KUBECTL_TIMEOUT') | default('5m') }}"
    namespace_prefix: "{{ lookup('env', 'LIONS_NAMESPACE_PREFIX') | default('lions-' + lions_environment) }}"
    
    # =========================================================================
    # CONFIGURATION NETTOYAGE
    # =========================================================================
    auto_update_enabled: "{{ lookup('env', 'LIONS_AUTO_UPDATE_ENABLED') | default('false') | bool }}"
    cleanup_enabled: "{{ lookup('env', 'LIONS_CRON_CLEANUP_ENABLED') | default('true') | bool }}"
    log_retention_days: "{{ lookup('env', 'LIONS_LOG_RETENTION_DAYS') | default('30') | int }}"
    backup_retention_days: "{{ lookup('env', 'LIONS_BACKUP_RETENTION_DAYS') | default('30') | int }}"
    
    # =========================================================================
    # CONFIGURATION DOCKER
    # =========================================================================
    docker_cleanup_enabled: "{{ lookup('env', 'LIONS_DOCKER_CLEANUP_ENABLED') | default('true') | bool }}"
    docker_prune_images: "{{ lookup('env', 'LIONS_DOCKER_PRUNE_IMAGES') | default('true') | bool }}"
    docker_prune_volumes: "{{ lookup('env', 'LIONS_DOCKER_PRUNE_VOLUMES') | default('true') | bool }}"
    docker_prune_networks: "{{ lookup('env', 'LIONS_DOCKER_PRUNE_NETWORKS') | default('true') | bool }}"
    
    # =========================================================================
    # CONFIGURATION CERTIFICATS
    # =========================================================================
    cert_check_enabled: "{{ lookup('env', 'LIONS_CERT_CHECK_ENABLED') | default('true') | bool }}"
    cert_expiry_warning_days: "{{ lookup('env', 'LIONS_CERT_EXPIRY_WARNING_DAYS') | default('30') | int }}"
    cert_auto_renewal: "{{ lookup('env', 'LIONS_CERT_AUTO_RENEWAL') | default('true') | bool }}"
    
    # =========================================================================
    # CONFIGURATION MONITORING
    # =========================================================================
    health_check_enabled: "{{ lookup('env', 'LIONS_HEALTH_CHECK_ENABLED') | default('true') | bool }}"
    disk_usage_threshold: "{{ lookup('env', 'LIONS_DISK_USAGE_THRESHOLD') | default('80') | int }}"
    memory_usage_threshold: "{{ lookup('env', 'LIONS_MEMORY_USAGE_THRESHOLD') | default('85') | int }}"
    cpu_usage_threshold: "{{ lookup('env', 'LIONS_CPU_USAGE_THRESHOLD') | default('90') | int }}"
    
    # =========================================================================
    # T√ÇCHES DE MAINTENANCE CONFIGURABLES
    # =========================================================================
    maintenance_tasks:
      - name: "Mise √† jour des packages syst√®me"
        enabled: "{{ auto_update_enabled }}"
        priority: 1
      - name: "Nettoyage des ressources inutilis√©es"
        enabled: "{{ cleanup_enabled }}"
        priority: 2
      - name: "V√©rification de l'√©tat du cluster"
        enabled: "{{ health_check_enabled }}"
        priority: 3
      - name: "Rotation et nettoyage des logs"
        enabled: "{{ cleanup_enabled }}"
        priority: 4
      - name: "V√©rification des sauvegardes"
        enabled: "{{ lookup('env', 'LIONS_BACKUP_ENABLED') | default('true') | bool }}"
        priority: 5
      - name: "V√©rification des certificats"
        enabled: "{{ cert_check_enabled }}"
        priority: 6
      - name: "Nettoyage Docker"
        enabled: "{{ docker_cleanup_enabled }}"
        priority: 7
      - name: "V√©rification des ressources syst√®me"
        enabled: "{{ health_check_enabled }}"
        priority: 8
      - name: "Optimisation des performances"
        enabled: "{{ lookup('env', 'LIONS_PERFORMANCE_OPTIMIZATION') | default('false') | bool }}"
        priority: 9

  environment:
    KUBECONFIG: "{{ kube_config_path }}"
    LIONS_ENVIRONMENT: "{{ lions_environment }}"
    LIONS_MAINTENANCE_ID: "{{ lions_deployment_id }}"

  pre_tasks:
    # =========================================================================
    # VALIDATION ET INITIALISATION
    # =========================================================================
    - name: "Validation de la configuration de maintenance"
      assert:
        that:
          - maintenance_enabled | bool
          - lions_environment is defined
          - maintenance_log_path is defined
        fail_msg: "Configuration de maintenance invalide"
        success_msg: "Configuration de maintenance valid√©e pour l'environnement {{ lions_environment }}"

    - name: "V√©rification de la fen√™tre de maintenance"
      debug:
        msg: 
          - "==============================================================================="
          - "LIONS INFRASTRUCTURE - MAINTENANCE PROGRAMM√âE"
          - "==============================================================================="
          - "Environnement: {{ lions_environment }}"
          - "Version: {{ lions_version }}"
          - "Fen√™tre de maintenance: {{ maintenance_window }} ({{ maintenance_timezone }})"
          - "ID de maintenance: {{ lions_deployment_id }}"
          - "Heure actuelle: {{ ansible_date_time.iso8601 }}"
          - "T√¢ches activ√©es: {{ maintenance_tasks | selectattr('enabled') | list | length }}/{{ maintenance_tasks | list | length }}"
          - "==============================================================================="

  tasks:
    # =========================================================================
    # INITIALISATION
    # =========================================================================
    - name: "Cr√©ation des r√©pertoires de maintenance"
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      loop:
        - "{{ maintenance_log_path }}"
        - "{{ maintenance_log_path }}/history"
        - "{{ maintenance_log_path }}/reports"
      tags: ['maintenance', 'init']

    - name: "Initialisation du log de maintenance"
      copy:
        content: |
          ===============================================================================
          LIONS INFRASTRUCTURE - LOG DE MAINTENANCE
          ===============================================================================
          Environnement: {{ lions_environment }}
          Version: {{ lions_version }}
          ID Maintenance: {{ lions_deployment_id }}
          Date de d√©but: {{ ansible_date_time.iso8601 }}
          Fen√™tre: {{ maintenance_window }} ({{ maintenance_timezone }})
          Serveur: {{ inventory_hostname }}
          ===============================================================================
        dest: "{{ maintenance_log_file }}"
        mode: '0644'
      tags: ['maintenance', 'init']

    # =========================================================================
    # T√ÇCHE 1: MISE √Ä JOUR DES PACKAGES SYST√àME
    # =========================================================================
    - name: "üì¶ T√ÇCHE 1 - Mise √† jour des packages syst√®me"
      block:
        - name: "Mise √† jour de la liste des packages (Debian/Ubuntu)"
          apt:
            update_cache: yes
            cache_valid_time: 3600
          when: ansible_os_family == "Debian"
          register: apt_update

        - name: "Mise √† jour des packages de s√©curit√© (Debian/Ubuntu)"
          apt:
            upgrade: safe
            autoremove: yes
            autoclean: yes
          when: 
            - ansible_os_family == "Debian"
            - auto_update_enabled | bool
          register: apt_upgrade

        - name: "Mise √† jour des packages (RedHat/CentOS/Fedora)"
          dnf:
            name: '*'
            state: latest
            security: yes
          when: 
            - ansible_os_family == "RedHat"
            - auto_update_enabled | bool
          register: dnf_upgrade

        - name: "Enregistrement des mises √† jour"
          lineinfile:
            path: "{{ maintenance_log_file }}"
            line: "‚úÖ Mise √† jour des packages termin√©e - {{ ansible_date_time.iso8601 }} - {{ (apt_upgrade.changed | default(false)) or (dnf_upgrade.changed | default(false)) | ternary('Mises √† jour install√©es', 'Aucune mise √† jour') }}"

      when: maintenance_tasks | selectattr('name', 'equalto', 'Mise √† jour des packages syst√®me') | selectattr('enabled') | list | length > 0
      tags: ['maintenance', 'updates']

    # =========================================================================
    # T√ÇCHE 2: NETTOYAGE DES RESSOURCES INUTILIS√âES
    # =========================================================================
    - name: "üßπ T√ÇCHE 2 - Nettoyage des ressources inutilis√©es"
      block:
        - name: "Nettoyage des packages inutilis√©s (Debian/Ubuntu)"
          apt:
            autoremove: yes
            autoclean: yes
            purge: yes
          when: ansible_os_family == "Debian"

        - name: "Nettoyage des packages inutilis√©s (RedHat/CentOS)"
          dnf:
            autoremove: yes
          when: ansible_os_family == "RedHat"

        - name: "Nettoyage du cache des packages"
          shell: |
            {{ ansible_os_family == 'Debian' | ternary('apt-get clean', 'dnf clean all') }}
          changed_when: false

        - name: "Nettoyage des pods Kubernetes termin√©s"
          shell: |
            kubectl get pods --all-namespaces --field-selector=status.phase=Succeeded -o json | \
            jq -r '.items[] | "kubectl delete pod \(.metadata.name) -n \(.metadata.namespace)"' | \
            head -10 | bash
          environment:
            KUBECONFIG: "{{ kube_config_path }}"
          ignore_errors: yes
          changed_when: false
          when: ansible_facts.packages.kubectl is defined

        - name: "Nettoyage des pods en √©chec"
          shell: |
            kubectl get pods --all-namespaces --field-selector=status.phase=Failed -o json | \
            jq -r '.items[] | "kubectl delete pod \(.metadata.name) -n \(.metadata.namespace)"' | \
            head -5 | bash
          environment:
            KUBECONFIG: "{{ kube_config_path }}"
          ignore_errors: yes
          changed_when: false
          when: ansible_facts.packages.kubectl is defined

        - name: "Enregistrement du nettoyage"
          lineinfile:
            path: "{{ maintenance_log_file }}"
            line: "‚úÖ Nettoyage des ressources termin√© - {{ ansible_date_time.iso8601 }}"

      when: maintenance_tasks | selectattr('name', 'equalto', 'Nettoyage des ressources inutilis√©es') | selectattr('enabled') | list | length > 0
      tags: ['maintenance', 'cleanup']

    # =========================================================================
    # T√ÇCHE 3: V√âRIFICATION DE L'√âTAT DU CLUSTER
    # =========================================================================
    - name: "üîç T√ÇCHE 3 - V√©rification de l'√©tat du cluster"
      block:
        - name: "V√©rification des n≈ìuds Kubernetes"
          shell: "kubectl get nodes -o wide --no-headers"
          environment:
            KUBECONFIG: "{{ kube_config_path }}"
          register: k8s_nodes
          changed_when: false
          when: ansible_facts.packages.kubectl is defined

        - name: "V√©rification des pods syst√®me critiques"
          shell: |
            kubectl get pods -n kube-system -o json | \
            jq -r '.items[] | select(.status.phase != "Running") | "\(.metadata.name): \(.status.phase)"'
          environment:
            KUBECONFIG: "{{ kube_config_path }}"
          register: k8s_system_issues
          changed_when: false
          when: ansible_facts.packages.kubectl is defined

        - name: "V√©rification des pods de l'application"
          shell: |
            kubectl get pods -n {{ namespace_prefix }} -o json | \
            jq -r '.items[] | select(.status.phase != "Running") | "\(.metadata.name): \(.status.phase)"'
          environment:
            KUBECONFIG: "{{ kube_config_path }}"
          register: k8s_app_issues
          ignore_errors: yes
          changed_when: false
          when: ansible_facts.packages.kubectl is defined

        - name: "V√©rification des √©v√©nements critiques"
          shell: |
            kubectl get events --all-namespaces --field-selector type=Warning \
            --sort-by='.lastTimestamp' | tail -10
          environment:
            KUBECONFIG: "{{ kube_config_path }}"
          register: k8s_warnings
          changed_when: false
          when: ansible_facts.packages.kubectl is defined

        - name: "Alertes si probl√®mes d√©tect√©s"
          debug:
            msg: 
              - "‚ö†Ô∏è  ALERTES CLUSTER D√âTECT√âES:"
              - "Pods syst√®me en erreur: {{ k8s_system_issues.stdout_lines | default([]) | length }}"
              - "Pods application en erreur: {{ k8s_app_issues.stdout_lines | default([]) | length }}"
              - "√âv√©nements d'avertissement r√©cents: {{ k8s_warnings.stdout_lines | default([]) | length }}"
          when: 
            - (k8s_system_issues.stdout_lines | default([]) | length > 0) or 
              (k8s_app_issues.stdout_lines | default([]) | length > 0)

        - name: "Enregistrement de la v√©rification cluster"
          lineinfile:
            path: "{{ maintenance_log_file }}"
            line: "‚úÖ V√©rification cluster termin√©e - {{ ansible_date_time.iso8601 }} - N≈ìuds: {{ k8s_nodes.stdout_lines | default([]) | length }}, Probl√®mes: {{ (k8s_system_issues.stdout_lines | default([]) | length) + (k8s_app_issues.stdout_lines | default([]) | length) }}"

      when: maintenance_tasks | selectattr('name', 'equalto', 'V√©rification de l\'√©tat du cluster') | selectattr('enabled') | list | length > 0
      tags: ['maintenance', 'cluster-check']

    # =========================================================================
    # T√ÇCHE 4: ROTATION ET NETTOYAGE DES LOGS
    # =========================================================================
    - name: "üìÑ T√ÇCHE 4 - Rotation et nettoyage des logs"
      block:
        - name: "V√©rification de l'espace disque"
          shell: "df -h /"
          register: disk_space
          changed_when: false

        - name: "Recherche des logs anciens"
          find:
            paths: 
              - "/var/log"
              - "{{ maintenance_log_path }}"
            patterns: "*.log"
            age: "{{ log_retention_days }}d"
            recurse: yes
            size: "+1M"
          register: old_logs

        - name: "Compression des logs anciens volumineux"
          archive:
            path: "{{ item.path }}"
            dest: "{{ item.path }}.{{ ansible_date_time.date }}.gz"
            remove: yes
            format: gz
          loop: "{{ old_logs.files[:20] }}"  # Limite √† 20 fichiers par ex√©cution
          when: old_logs.matched > 0

        - name: "Nettoyage des logs tr√®s anciens"
          find:
            paths: 
              - "/var/log"
              - "{{ maintenance_log_path }}"
            patterns: "*.gz"
            age: "{{ (log_retention_days * 2) }}d"
            recurse: yes
          register: very_old_logs

        - name: "Suppression des logs tr√®s anciens"
          file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ very_old_logs.files[:10] }}"  # Limite √† 10 fichiers par ex√©cution
          when: very_old_logs.matched > 0

        - name: "Enregistrement de la rotation des logs"
          lineinfile:
            path: "{{ maintenance_log_file }}"
            line: "‚úÖ Rotation des logs termin√©e - {{ ansible_date_time.iso8601 }} - Compress√©s: {{ old_logs.matched }}, Supprim√©s: {{ very_old_logs.matched }}"

      when: maintenance_tasks | selectattr('name', 'equalto', 'Rotation et nettoyage des logs') | selectattr('enabled') | list | length > 0
      tags: ['maintenance', 'logs']

    # =========================================================================
    # T√ÇCHE 5: V√âRIFICATION DES SAUVEGARDES
    # =========================================================================
    - name: "üíæ T√ÇCHE 5 - V√©rification des sauvegardes"
      block:
        - name: "Recherche des sauvegardes r√©centes"
          find:
            paths: 
              - "/var/backups"
              - "/var/backups/lions"
            patterns: "*.tar.gz,*.sql.gz,*.dump,*.gpg"
            age: "-{{ backup_retention_days }}d"
            recurse: yes
          register: recent_backups

        - name: "V√©rification de l'int√©grit√© des sauvegardes"
          shell: |
            if [[ "{{ item.path }}" == *.tar.gz ]]; then
              tar -tzf "{{ item.path }}" > /dev/null 2>&1 && echo "OK" || echo "CORRUPT"
            elif [[ "{{ item.path }}" == *.gz ]]; then
              gunzip -t "{{ item.path }}" 2>&1 && echo "OK" || echo "CORRUPT"
            else
              echo "OK"
            fi
          loop: "{{ recent_backups.files[:5] }}"  # V√©rifie les 5 plus r√©centes
          register: backup_integrity
          when: recent_backups.matched > 0
          changed_when: false

        - name: "Alerte si aucune sauvegarde r√©cente"
          debug:
            msg: "‚ö†Ô∏è  ALERTE: Aucune sauvegarde r√©cente trouv√©e (< {{ backup_retention_days }} jours)"
          when: recent_backups.matched == 0

        - name: "Alerte si sauvegardes corrompues"
          debug:
            msg: "‚ö†Ô∏è  ALERTE: Sauvegardes corrompues d√©tect√©es"
          when: 
            - backup_integrity is defined
            - backup_integrity.results | selectattr('stdout', 'equalto', 'CORRUPT') | list | length > 0

        - name: "Enregistrement de la v√©rification des sauvegardes"
          lineinfile:
            path: "{{ maintenance_log_file }}"
            line: "‚úÖ V√©rification sauvegardes termin√©e - {{ ansible_date_time.iso8601 }} - Trouv√©es: {{ recent_backups.matched }}, Int√®gres: {{ backup_integrity.results | default([]) | selectattr('stdout', 'equalto', 'OK') | list | length }}"

      when: maintenance_tasks | selectattr('name', 'equalto', 'V√©rification des sauvegardes') | selectattr('enabled') | list | length > 0
      tags: ['maintenance', 'backup-check']

    # =========================================================================
    # T√ÇCHE 6: V√âRIFICATION DES CERTIFICATS
    # =========================================================================
    - name: "üîê T√ÇCHE 6 - V√©rification des certificats"
      block:
        - name: "V√©rification des certificats Kubernetes"
          shell: "kubectl get certificates --all-namespaces -o json"
          environment:
            KUBECONFIG: "{{ kube_config_path }}"
          register: k8s_certs_raw
          changed_when: false
          when: ansible_facts.packages.kubectl is defined

        - name: "Analyse des certificats expirant bient√¥t"
          shell: |
            echo '{{ k8s_certs_raw.stdout | default("{}") }}' | \
            jq -r --argjson days {{ cert_expiry_warning_days }} \
            '.items[]? | select(.status.notAfter != null) | 
            select((.status.notAfter | fromdateiso8601) < (now + ($days * 24 * 60 * 60))) | 
            "\(.metadata.namespace)/\(.metadata.name): Expire le \(.status.notAfter)"'
          register: expiring_certs
          changed_when: false
          when: 
            - k8s_certs_raw is defined
            - k8s_certs_raw.stdout != ""

        - name: "V√©rification des certificats syst√®me"
          shell: |
            find /etc/ssl/certs /etc/pki/tls/certs -name "*.crt" -o -name "*.pem" 2>/dev/null | \
            head -10 | while read cert; do
              if openssl x509 -in "$cert" -noout -checkend {{ cert_expiry_warning_days * 86400 }} 2>/dev/null; then
                echo "$cert: OK"
              else
                echo "$cert: EXPIRING"
              fi
            done
          register: system_certs
          changed_when: false
          ignore_errors: yes

        - name: "Alerte pour certificats expirant"
          debug:
            msg: 
              - "‚ö†Ô∏è  CERTIFICATS EXPIRANT DANS {{ cert_expiry_warning_days }} JOURS:"
              - "{{ expiring_certs.stdout_lines | default([]) }}"
          when: 
            - expiring_certs is defined
            - expiring_certs.stdout_lines | default([]) | length > 0

        - name: "Enregistrement de la v√©rification des certificats"
          lineinfile:
            path: "{{ maintenance_log_file }}"
            line: "‚úÖ V√©rification certificats termin√©e - {{ ansible_date_time.iso8601 }} - Expirant: {{ expiring_certs.stdout_lines | default([]) | length }}"

      when: maintenance_tasks | selectattr('name', 'equalto', 'V√©rification des certificats') | selectattr('enabled') | list | length > 0
      tags: ['maintenance', 'cert-check']

    # =========================================================================
    # T√ÇCHE 7: NETTOYAGE DOCKER
    # =========================================================================
    - name: "üê≥ T√ÇCHE 7 - Nettoyage Docker"
      block:
        - name: "V√©rification de Docker"
          shell: "docker version"
          register: docker_version
          changed_when: false
          ignore_errors: yes

        - name: "Nettoyage des images Docker inutilis√©es"
          shell: "docker image prune -af --filter 'until=24h'"
          register: docker_image_prune
          when: 
            - docker_version.rc == 0
            - docker_prune_images | bool

        - name: "Nettoyage des volumes Docker inutilis√©s"
          shell: "docker volume prune -f"
          register: docker_volume_prune
          when: 
            - docker_version.rc == 0
            - docker_prune_volumes | bool

        - name: "Nettoyage des r√©seaux Docker inutilis√©s"
          shell: "docker network prune -f"
          register: docker_network_prune
          when: 
            - docker_version.rc == 0
            - docker_prune_networks | bool

        - name: "Nettoyage du cache de build Docker"
          shell: "docker builder prune -af"
          register: docker_builder_prune
          when: docker_version.rc == 0
          ignore_errors: yes

        - name: "Enregistrement du nettoyage Docker"
          lineinfile:
            path: "{{ maintenance_log_file }}"
            line: "‚úÖ Nettoyage Docker termin√© - {{ ansible_date_time.iso8601 }} - Images: {{ docker_image_prune.changed | default(false) }}, Volumes: {{ docker_volume_prune.changed | default(false) }}"

      when: maintenance_tasks | selectattr('name', 'equalto', 'Nettoyage Docker') | selectattr('enabled') | list | length > 0
      tags: ['maintenance', 'docker-cleanup']

    # =========================================================================
    # T√ÇCHE 8: V√âRIFICATION DES RESSOURCES SYST√àME
    # =========================================================================
    - name: "üìä T√ÇCHE 8 - V√©rification des ressources syst√®me"
      block:
        - name: "V√©rification de l'utilisation du disque"
          shell: "df -h / | tail -1 | awk '{print $5}' | sed 's/%//'"
          register: disk_usage
          changed_when: false

        - name: "V√©rification de l'utilisation de la m√©moire"
          shell: "free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'"
          register: memory_usage
          changed_when: false

        - name: "V√©rification de la charge CPU"
          shell: "top -bn1 | grep 'Cpu(s)' | awk '{print $2}' | sed 's/%us,//'"
          register: cpu_usage
          changed_when: false

        - name: "Alerte utilisation disque √©lev√©e"
          debug:
            msg: "‚ö†Ô∏è  ALERTE: Utilisation disque √©lev√©e: {{ disk_usage.stdout }}%"
          when: disk_usage.stdout | int > disk_usage_threshold

        - name: "Alerte utilisation m√©moire √©lev√©e"
          debug:
            msg: "‚ö†Ô∏è  ALERTE: Utilisation m√©moire √©lev√©e: {{ memory_usage.stdout }}%"
          when: memory_usage.stdout | int > memory_usage_threshold

        - name: "Alerte utilisation CPU √©lev√©e"
          debug:
            msg: "‚ö†Ô∏è  ALERTE: Utilisation CPU √©lev√©e: {{ cpu_usage.stdout }}%"
          when: cpu_usage.stdout | int > cpu_usage_threshold

        - name: "Enregistrement de la v√©rification des ressources"
          lineinfile:
            path: "{{ maintenance_log_file }}"
            line: "‚úÖ V√©rification ressources termin√©e - {{ ansible_date_time.iso8601 }} - Disque: {{ disk_usage.stdout }}%, RAM: {{ memory_usage.stdout }}%, CPU: {{ cpu_usage.stdout }}%"

      when: maintenance_tasks | selectattr('name', 'equalto', 'V√©rification des ressources syst√®me') | selectattr('enabled') | list | length > 0
      tags: ['maintenance', 'resource-check']

    # =========================================================================
    # FINALISATION ET RAPPORT
    # =========================================================================
    - name: "üìä G√©n√©ration du rapport de maintenance"
      copy:
        content: |
          ===============================================================================
          LIONS INFRASTRUCTURE - RAPPORT DE MAINTENANCE
          ===============================================================================
          Date: {{ ansible_date_time.iso8601 }}
          Environnement: {{ lions_environment }}
          Serveur: {{ inventory_hostname }}
          ID Maintenance: {{ lions_deployment_id }}
          Fen√™tre: {{ maintenance_window }} ({{ maintenance_timezone }})
          
          T√¢ches ex√©cut√©es: {{ maintenance_tasks | selectattr('enabled') | list | length }}/{{ maintenance_tasks | list | length }}
          
          R√©sultats:
            - Packages mis √† jour: {{ auto_update_enabled }}
            - Ressources nettoy√©es: {{ cleanup_enabled }}
            - Cluster v√©rifi√©: {{ health_check_enabled }}
            - Logs rot√©s: {{ cleanup_enabled }}
            - Sauvegardes v√©rifi√©es: {{ lookup('env', 'LIONS_BACKUP_ENABLED') | default('true') | bool }}
            - Certificats v√©rifi√©s: {{ cert_check_enabled }}
            - Docker nettoy√©: {{ docker_cleanup_enabled }}
            - Ressources syst√®me v√©rifi√©es: {{ health_check_enabled }}
          
          Alertes:
            - Disque: {{ disk_usage.stdout | default('N/A') }}% (seuil: {{ disk_usage_threshold }}%)
            - M√©moire: {{ memory_usage.stdout | default('N/A') }}% (seuil: {{ memory_usage_threshold }}%)
            - CPU: {{ cpu_usage.stdout | default('N/A') }}% (seuil: {{ cpu_usage_threshold }}%)
            - Certificats expirant: {{ expiring_certs.stdout_lines | default([]) | length }}
            - Sauvegardes r√©centes: {{ recent_backups.matched | default('N/A') }}
          
          ===============================================================================
        dest: "{{ maintenance_log_path }}/reports/maintenance-report-{{ lions_deployment_id }}.txt"
        mode: '0644'
      tags: ['maintenance', 'report']

    - name: "Finalisation du log de maintenance"
      lineinfile:
        path: "{{ maintenance_log_file }}"
        line: |
          ===============================================================================
          ‚úÖ MAINTENANCE TERMIN√âE AVEC SUCC√àS
          Date de fin: {{ ansible_date_time.iso8601 }}
          Dur√©e: {{ ((ansible_date_time.epoch | int) - (maintenance_log_file | regex_replace('.*-(\\d{4}-\\d{2}-\\d{2})\\.log', '\\1') | to_datetime('%Y-%m-%d') | int)) // 60 }} minutes
          Rapport: {{ maintenance_log_path }}/reports/maintenance-report-{{ lions_deployment_id }}.txt
          ===============================================================================
      tags: ['maintenance', 'finalize']

  post_tasks:
    # =========================================================================
    # NOTIFICATION DE FIN DE MAINTENANCE
    # =========================================================================
    - name: "Notification de fin de maintenance"
      uri:
        url: "{{ lookup('env', 'LIONS_NOTIFICATION_WEBHOOK_URL') }}"
        method: POST
        body_format: json
        body:
          text: "‚úÖ Maintenance LIONS {{ lions_environment }} termin√©e avec succ√®s"
          environment: "{{ lions_environment }}"
          server: "{{ inventory_hostname }}"
          maintenance_id: "{{ lions_deployment_id }}"
          tasks_executed: "{{ maintenance_tasks | selectattr('enabled') | list | length }}"
          disk_usage: "{{ disk_usage.stdout | default('N/A') }}%"
          memory_usage: "{{ memory_usage.stdout | default('N/A') }}%"
          expiring_certificates: "{{ expiring_certs.stdout_lines | default([]) | length }}"
          recent_backups: "{{ recent_backups.matched | default('N/A') }}"
      when: 
        - lookup('env', 'LIONS_NOTIFICATION_WEBHOOK_URL') != ""
        - maintenance_notification_enabled | bool
      ignore_errors: yes

  handlers:
    - name: "Notification d'√©chec de maintenance"
      uri:
        url: "{{ lookup('env', 'LIONS_NOTIFICATION_WEBHOOK_URL') }}"
        method: POST
        body_format: json
        body:
          text: "‚ùå √âchec de maintenance LIONS {{ lions_environment }} sur {{ inventory_hostname }}"
          environment: "{{ lions_environment }}"
          server: "{{ inventory_hostname }}"
          maintenance_id: "{{ lions_deployment_id }}"
          error: "{{ ansible_failed_result.msg | default('Unknown error') }}"
      when: lookup('env', 'LIONS_NOTIFICATION_WEBHOOK_URL') != ""
      listen: "maintenance failed"