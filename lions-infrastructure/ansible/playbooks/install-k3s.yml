---
# =============================================================================
# LIONS Infrastructure - Playbook d'Installation K3s Complet avec Monitoring
# =============================================================================
# Titre: Playbook d'installation K3s optimis√© avec Prometheus/Grafana int√©gr√©
# Description: Installe et configure K3s sur VPS avec monitoring complet
# Auteur: √âquipe LIONS Infrastructure
# Date: 2025-05-23
# Version: 2.1.0
#
# Corrections appliqu√©es:
# - Suppression du flag d√©pr√©ci√© RemoveSelfLink=false
# - Correction de la syntaxe des flags --disable
# - Ajout du d√©ploiement Prometheus/Grafana optimis√©
# - Configuration monitoring haute performance
# - Am√©lioration de la documentation et du logging
# - Application des meilleures pratiques DevOps
# =============================================================================

- name: "LIONS K3s Installation - Production Ready Deployment with Monitoring"
  hosts: vps
  become: yes
  gather_facts: yes

  # =============================================================================
  # VARIABLES DE CONFIGURATION
  # =============================================================================
  vars:
    # Version K3s - Version LTS stable recommand√©e
    k3s_version: "v1.28.6+k3s2"

    # Configuration K3s optimis√©e (FLAGS CORRIG√âS)
    k3s_server_args: >-
      server
      --disable=traefik
      --disable=servicelb
      --write-kubeconfig-mode=644
      --kubelet-arg=cgroup-driver=systemd
      --kubelet-arg=feature-gates=GracefulNodeShutdown=false

    # Chemins et configurations
    kubeconfig_local_path: "~/.kube/config"
    k3s_service_file: "/etc/systemd/system/k3s.service"
    k3s_kubeconfig: "/etc/rancher/k3s/k3s.yaml"

    # Versions des composants
    traefik_chart_version: "25.0.0"
    metallb_chart_version: "0.13.12"
    cert_manager_version: "v1.13.3"
    kube_prometheus_stack_version: "55.5.0"

    # Flags d√©pr√©ci√©s √† supprimer automatiquement
    deprecated_flags:
      - pattern: "--kube-controller-manager-arg.*feature-gates=.*RemoveSelfLink=false.*"
        replacement: ""
        description: "Flag RemoveSelfLink d√©pr√©ci√©"
      - pattern: "--no-deploy ([a-zA-Z0-9-]+)"
        replacement: "--disable=\\1"
        description: "Syntaxe --no-deploy d√©pr√©ci√©e"

    # Configuration monitoring optimis√©e
    monitoring_config:
      namespace: "monitoring"
      domain: "{{ lions_domain | default('dev.lions.dev') }}"
      grafana_admin_password: "{{ lions_grafana_password | default('admin123!') }}"
      prometheus_retention: "15d"
      prometheus_storage: "10Gi"
      grafana_storage: "5Gi"
      resource_limits:
        prometheus_cpu: "1000m"
        prometheus_memory: "2Gi"
        grafana_cpu: "500m"
        grafana_memory: "512Mi"

    # Configuration des domaines et services
    services_domains:
      lions_main: "{{ lions_domain | default('dev.lions.dev') }}"
      grafana: "grafana.{{ lions_domain | default('dev.lions.dev') }}"
      prometheus: "prometheus.{{ lions_domain | default('dev.lions.dev') }}"
      k3s_dashboard: "k3s.{{ lions_domain | default('dev.lions.dev') }}"
      keycloak: "keycloak.{{ lions_domain | default('dev.lions.dev') }}"
      pgadmin: "pgadmin.{{ lions_domain | default('dev.lions.dev') }}"
      gitea: "git.{{ lions_domain | default('dev.lions.dev') }}"

  # =============================================================================
  # T√ÇCHES PRINCIPALES
  # =============================================================================
  tasks:

    # =========================================================================
    # PHASE 1: V√âRIFICATIONS PR√âLIMINAIRES ET NETTOYAGE
    # =========================================================================

    - name: "üìã PHASE 1 - V√©rifications pr√©liminaires"
      debug:
        msg: |
          ==========================================================
          üöÄ D√âMARRAGE INSTALLATION K3S - LIONS INFRASTRUCTURE
          ==========================================================
          Version K3s: {{ k3s_version }}
          Host cible: {{ ansible_host }}
          Environment: {{ lions_env | default('development') }}
          Monitoring: ‚úÖ Prometheus + Grafana inclus
          ==========================================================

    - name: "üîç V√©rification de l'environnement syst√®me"
      block:
        - name: "V√©rification des ressources syst√®me minimales"
          assert:
            that:
              - ansible_memtotal_mb >= 2048  # Augment√© pour le monitoring
              - ansible_processor_vcpus >= 2
            fail_msg: "Ressources syst√®me insuffisantes pour le monitoring (RAM: {{ ansible_memtotal_mb }}MB, CPU: {{ ansible_processor_vcpus }})"
            success_msg: "‚úÖ Ressources syst√®me suffisantes (RAM: {{ ansible_memtotal_mb }}MB, CPU: {{ ansible_processor_vcpus }})"

        - name: "V√©rification de l'espace disque disponible"
          shell: df / | awk 'NR==2 {print $4}'
          register: disk_space_check
          changed_when: false

        - name: "Validation de l'espace disque"
          assert:
            that:
              - disk_space_check.stdout | int > 10000000  # 10GB minimum pour le monitoring
            fail_msg: "Espace disque insuffisant: {{ (disk_space_check.stdout | int / 1000 / 1000) | round(1) }}GB disponible"
            success_msg: "‚úÖ Espace disque suffisant: {{ (disk_space_check.stdout | int / 1000 / 1000) | round(1) }}GB disponible"

      rescue:
        - name: "‚ùå √âchec des v√©rifications pr√©liminaires"
          fail:
            msg: "Les v√©rifications syst√®me ont √©chou√©. Installation annul√©e."

    - name: "üßπ D√©tection et nettoyage de l'installation K3s existante"
      block:
        - name: "V√©rification de l'existence du binaire K3s"
          stat:
            path: /usr/local/bin/k3s
          register: k3s_binary_exists

        - name: "V√©rification du service K3s existant"
          systemd:
            name: k3s
          register: k3s_service_check
          ignore_errors: true

        - name: "Analyse de l'√©tat du service K3s"
          debug:
            msg: |
              K3s Binary: {{ 'Pr√©sent' if k3s_binary_exists.stat.exists else 'Absent' }}
              Service K3s: {{ k3s_service_check.status.ActiveState | default('Inexistant') }}

        - name: "Correction proactive des flags d√©pr√©ci√©s"
          block:
            - name: "Lecture du fichier de service K3s"
              slurp:
                src: "{{ k3s_service_file }}"
              register: k3s_service_content_raw
              when: k3s_binary_exists.stat.exists

            - name: "D√©codage du contenu du service"
              set_fact:
                k3s_service_content: "{{ k3s_service_content_raw.content | b64decode }}"
              when: k3s_service_content_raw is defined

            - name: "üîç Diagnostic du contenu du service K3s"
              debug:
                msg: |
                  Contenu du service K3s:
                  {{ k3s_service_content }}
              when: k3s_service_content is defined

            - name: "D√©tection des flags d√©pr√©ci√©s"
              set_fact:
                deprecated_flags_found: "{{ deprecated_flags_found | default([]) + [item] }}"
              loop: "{{ deprecated_flags }}"
              when:
                - k3s_service_content is defined
                - k3s_service_content is search(item.pattern)

            - name: "Notification des flags d√©pr√©ci√©s d√©tect√©s"
              debug:
                msg: |
                  ‚ö†Ô∏è  FLAGS D√âPR√âCI√âS D√âTECT√âS:
                  {% for flag in deprecated_flags_found | default([]) %}
                  - {{ flag.description }}
                  {% endfor %}
              when: deprecated_flags_found is defined and deprecated_flags_found | length > 0

            - name: "Suppression des flags d√©pr√©ci√©s"
              replace:
                path: "{{ k3s_service_file }}"
                regexp: "{{ item.pattern }}"
                replace: "{{ item.replacement | default('') }}"
                backup: yes
              loop: "{{ deprecated_flags }}"
              when:
                - k3s_service_content is defined
                - k3s_service_content is search(item.pattern)
              register: flags_corrected
              notify: "reload systemd and restart k3s"

            - name: "üîß Correction forc√©e du flag RemoveSelfLink (solution de secours)"
              replace:
                path: "{{ k3s_service_file }}"
                regexp: "RemoveSelfLink=false"
                replace: ""
                backup: yes
              when:
                - k3s_service_content is defined
                - "'RemoveSelfLink=false' in k3s_service_content"
              register: forced_correction
              notify: "reload systemd and restart k3s"

            - name: "üìã Rapport de correction des flags"
              debug:
                msg: |
                  Flags corrig√©s automatiquement: {{ 'Oui' if flags_corrected.changed else 'Non' }}
                  Correction forc√©e effectu√©e: {{ 'Oui' if forced_correction.changed else 'Non' }}

          when: k3s_binary_exists.stat.exists

    # =========================================================================
    # PHASE 2: INSTALLATION K3S
    # =========================================================================

    - name: "üöÄ PHASE 2 - Installation K3s"
      debug:
        msg: "D√©marrage de l'installation K3s avec la configuration corrig√©e"

    - name: "üì• T√©l√©chargement du script d'installation K3s"
      get_url:
        url: "https://get.k3s.io"
        dest: "/tmp/k3s-install.sh"
        mode: '0755'
        timeout: 30
      register: k3s_script_download
      retries: 3
      delay: 5

    - name: "‚öôÔ∏è  Installation K3s avec configuration optimis√©e"
      command: "/tmp/k3s-install.sh"
      environment:
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
        INSTALL_K3S_EXEC: "{{ k3s_server_args }}"
        K3S_KUBECONFIG_MODE: "644"
      register: k3s_installation
      when: not k3s_binary_exists.stat.exists or (deprecated_flags_found is defined and deprecated_flags_found | length > 0)

    - name: "üîÑ D√©marrage et activation du service K3s"
      systemd:
        name: k3s
        state: started
        enabled: yes
        daemon_reload: yes
      register: k3s_service_start
      retries: 3
      delay: 10

    # =========================================================================
    # PHASE 3: V√âRIFICATIONS POST-INSTALLATION
    # =========================================================================

    - name: "‚úÖ PHASE 3 - V√©rifications post-installation"
      debug:
        msg: "V√©rification de l'installation K3s"

    - name: "‚è≥ Attente de la disponibilit√© de l'API K3s"
      wait_for:
        port: 6443
        host: localhost
        delay: 10
        timeout: 300
      register: k3s_api_ready

    - name: "üîç V√©rification de l'√©tat du service K3s"
      systemd:
        name: k3s
      register: k3s_final_status

    - name: "üìä Validation de l'installation K3s"
      block:
        - name: "Test de connectivit√© kubectl"
          command: "/usr/local/bin/k3s kubectl get nodes"
          register: k3s_nodes_check
          changed_when: false
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "V√©rification des pods syst√®me"
          command: "/usr/local/bin/k3s kubectl get pods -n kube-system"
          register: k3s_system_pods
          changed_when: false
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "üìà Rapport d'√©tat K3s"
          debug:
            msg: |
              ==========================================================
              ‚úÖ K3S INSTALLATION R√âUSSIE
              ==========================================================
              Service Status: {{ k3s_final_status.status.ActiveState }}
              API Port: ‚úÖ Accessible sur :6443
              Nodes: {{ k3s_nodes_check.stdout_lines | length }} n≈ìud(s) d√©tect√©(s)
              System Pods: {{ k3s_system_pods.stdout_lines | length - 1 }} pod(s) syst√®me
              ==========================================================

      rescue:
        - name: "üîß Diagnostic en cas d'√©chec"
          block:
            - name: "Collecte des logs K3s"
              command: "journalctl -u k3s -n 20 --no-pager"
              register: k3s_logs

            - name: "üîç V√©rification du contenu actuel du service K3s"
              slurp:
                src: "{{ k3s_service_file }}"
              register: current_service_content

            - name: "üìã Diagnostic d√©taill√©"
              debug:
                msg: |
                  ‚ùå √âCHEC DE L'INSTALLATION K3S - DIAGNOSTIC D√âTAILL√â
                  ==========================================================
                  Service Status: {{ k3s_final_status.status.ActiveState | default('Unknown') }}

                  Contenu actuel du service K3s:
                  {{ current_service_content.content | b64decode }}

                  Derniers logs:
                  {{ k3s_logs.stdout }}
                  ==========================================================

            - name: "üîß Nettoyage complet et r√©installation si flag RemoveSelfLink d√©tect√©"
              block:
                - name: "Arr√™t du service K3s"
                  systemd:
                    name: k3s
                    state: stopped
                  ignore_errors: true

                - name: "D√©sinstallation compl√®te de K3s"
                  shell: |
                    /usr/local/bin/k3s-uninstall.sh || true
                    rm -rf /etc/rancher/k3s/*
                    rm -rf /var/lib/rancher/k3s/*
                    rm -f /etc/systemd/system/k3s.service*
                  ignore_errors: true

                - name: "Rechargement systemd"
                  systemd:
                    daemon_reload: yes

                - name: "R√©installation propre de K3s"
                  command: "/tmp/k3s-install.sh"
                  environment:
                    INSTALL_K3S_VERSION: "{{ k3s_version }}"
                    INSTALL_K3S_EXEC: "{{ k3s_server_args }}"
                    K3S_KUBECONFIG_MODE: "644"

                - name: "D√©marrage du service K3s apr√®s r√©installation"
                  systemd:
                    name: k3s
                    state: started
                    enabled: yes
                    daemon_reload: yes
                  register: k3s_fresh_start

                - name: "Attente de l'API apr√®s r√©installation"
                  wait_for:
                    port: 6443
                    host: localhost
                    timeout: 120
                  when: k3s_fresh_start is succeeded

              when: "'RemoveSelfLink=false' in (current_service_content.content | b64decode)"

            - name: "‚ùå √âchec d√©finitif si probl√®me persiste"
              fail:
                msg: |
                  ‚ùå INSTALLATION K3S √âCHOU√âE D√âFINITIVEMENT
                  Le flag RemoveSelfLink=false cause toujours des probl√®mes.
                  V√©rifiez manuellement le fichier {{ k3s_service_file }}
                  et supprimez toute r√©f√©rence √† RemoveSelfLink=false
              when:
                - "'RemoveSelfLink=false' in (current_service_content.content | b64decode)"
                - k3s_fresh_start is failed

    # =========================================================================
    # PHASE 4: CONFIGURATION KUBECTL ET KUBECONFIG
    # =========================================================================

    - name: "üîß PHASE 4 - Configuration kubectl et kubeconfig"
      debug:
        msg: "Configuration de l'acc√®s kubectl"

    - name: "üîç D√©tection de l'utilisateur courant"
      set_fact:
        current_user: "{{ ansible_user | default(ansible_user_id) | default('root') }}"
        current_user_home: "{{ ansible_user_dir | default('/root') }}"

    - name: "üìÅ Cr√©ation des r√©pertoires de configuration"
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
      loop:
        - "{{ current_user_home }}/.kube"
        - "/root/.kube"

    - name: "üìÑ Configuration du kubeconfig utilisateur"
      copy:
        src: "{{ k3s_kubeconfig }}"
        dest: "{{ current_user_home }}/.kube/config"
        remote_src: yes
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0600'
      when:
        - k3s_kubeconfig is exists
        - current_user_home != '/root'

    - name: "üìÑ Configuration du kubeconfig root"
      copy:
        src: "{{ k3s_kubeconfig }}"
        dest: "/root/.kube/config"
        remote_src: yes
        mode: '0600'
      when: k3s_kubeconfig is exists

    - name: "üåê Mise √† jour du kubeconfig avec l'IP externe (utilisateur)"
      replace:
        path: "{{ current_user_home }}/.kube/config"
        regexp: 'https://127.0.0.1:6443'
        replace: 'https://{{ ansible_host }}:6443'
      when: current_user_home != '/root'

    - name: "üåê Mise √† jour du kubeconfig avec l'IP externe (root)"
      replace:
        path: "/root/.kube/config"
        regexp: 'https://127.0.0.1:6443'
        replace: 'https://{{ ansible_host }}:6443'

    - name: "üìÅ Cr√©ation du fichier .bashrc si n√©cessaire"
      file:
        path: "{{ current_user_home }}/.bashrc"
        state: touch
        owner: "{{ current_user }}"
        group: "{{ current_user }}"
        mode: '0644'
      when: current_user_home != '/root'

    - name: "‚öôÔ∏è  Configuration de l'environnement bash"
      lineinfile:
        path: "{{ current_user_home }}/.bashrc"
        line: "export KUBECONFIG={{ current_user_home }}/.kube/config"
        state: present
      when: current_user_home != '/root'

    # =========================================================================
    # PHASE 5: INSTALLATION DES OUTILS COMPL√âMENTAIRES
    # =========================================================================

    - name: "üõ†Ô∏è  PHASE 5 - Installation des outils compl√©mentaires"
      debug:
        msg: "Installation de kubectl et Helm"

    - name: "üì¶ Installation de kubectl"
      block:
        - name: "Cr√©ation du r√©pertoire pour les cl√©s GPG"
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: "T√©l√©chargement de la cl√© GPG Kubernetes"
          get_url:
            url: "https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key"
            dest: "/tmp/kubernetes-release.key"
            mode: '0644'

        - name: "Installation de la cl√© GPG Kubernetes"
          shell: |
            cat /tmp/kubernetes-release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          args:
            creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

        - name: "Ajout du d√©p√¥t Kubernetes"
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
            state: present
            filename: kubernetes

        - name: "Installation de kubectl"
          apt:
            name: kubectl
            state: present
            update_cache: yes

    - name: "üéõÔ∏è  Installation de Helm"
      block:
        - name: "T√©l√©chargement du script d'installation Helm"
          get_url:
            url: "https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
            dest: "/tmp/get-helm-3.sh"
            mode: '0755'

        - name: "Ex√©cution de l'installation Helm"
          command: "/tmp/get-helm-3.sh"
          args:
            creates: /usr/local/bin/helm

    - name: "üêç Installation des d√©pendances Python Kubernetes"
      pip:
        name:
          - kubernetes>=28.0.0
          - openshift>=0.13.0
          - PyYAML>=6.0
        state: present
        extra_args: "--upgrade"

    # =========================================================================
    # PHASE 6: D√âPLOIEMENT DE L'INFRASTRUCTURE DE BASE
    # =========================================================================

    - name: "üèóÔ∏è  PHASE 6 - D√©ploiement de l'infrastructure de base"
      debug:
        msg: "D√©ploiement des composants d'infrastructure essentiels"

    - name: "üåê D√©ploiement de Traefik (Ingress Controller)"
      block:
        - name: "Ajout du d√©p√¥t Helm Traefik"
          kubernetes.core.helm_repository:
            name: traefik
            repo_url: "https://helm.traefik.io/traefik"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Cr√©ation du namespace Traefik"
          kubernetes.core.k8s:
            name: traefik
            api_version: v1
            kind: Namespace
            state: present
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "D√©ploiement de Traefik via Helm"
          kubernetes.core.helm:
            name: traefik
            chart_ref: "traefik/traefik"
            chart_version: "{{ traefik_chart_version }}"
            release_namespace: traefik
            create_namespace: true
            wait: true
            wait_timeout: "600s"
            values:
              deployment:
                replicas: 1
              ports:
                web:
                  port: 80
                  expose: true
                  exposedPort: 80
                websecure:
                  port: 443
                  expose: true
                  exposedPort: 443
              service:
                type: LoadBalancer
                spec:
                  externalIPs:
                    - "{{ ansible_host }}"
              ingressClass:
                enabled: true
                isDefaultClass: true
              logs:
                general:
                  level: INFO
              metrics:
                prometheus:
                  enabled: true
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    - name: "üîí D√©ploiement de cert-manager (Gestion TLS)"
      block:
        - name: "Ajout du d√©p√¥t Helm cert-manager"
          kubernetes.core.helm_repository:
            name: jetstack
            repo_url: "https://charts.jetstack.io"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Nettoyage des CRDs cert-manager orphelins"
          kubernetes.core.k8s:
            name: "{{ item }}"
            api_version: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            state: absent
          loop:
            - certificaterequests.cert-manager.io
            - certificates.cert-manager.io
            - challenges.acme.cert-manager.io
            - clusterissuers.cert-manager.io
            - issuers.cert-manager.io
            - orders.acme.cert-manager.io
          ignore_errors: true
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "D√©ploiement de cert-manager"
          kubernetes.core.helm:
            name: cert-manager
            chart_ref: "jetstack/cert-manager"
            chart_version: "{{ cert_manager_version }}"
            release_namespace: cert-manager
            create_namespace: true
            wait: true
            wait_timeout: "600s"
            values:
              installCRDs: true
              global:
                leaderElection:
                  namespace: cert-manager
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    - name: "‚öñÔ∏è  D√©ploiement de MetalLB (Load Balancer)"
      block:
        - name: "Ajout du d√©p√¥t Helm MetalLB"
          kubernetes.core.helm_repository:
            name: metallb
            repo_url: "https://metallb.github.io/metallb"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "D√©ploiement de MetalLB"
          kubernetes.core.helm:
            name: metallb
            chart_ref: "metallb/metallb"
            chart_version: "{{ metallb_chart_version }}"
            release_namespace: metallb-system
            create_namespace: true
            wait: true
            wait_timeout: "600s"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Configuration IPAddressPool MetalLB"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: metallb.io/v1beta1
              kind: IPAddressPool
              metadata:
                name: lions-ip-pool
                namespace: metallb-system
              spec:
                addresses:
                  - "{{ ansible_host }}/32"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Configuration L2Advertisement MetalLB"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: metallb.io/v1beta1
              kind: L2Advertisement
              metadata:
                name: lions-l2-advert
                namespace: metallb-system
              spec:
                ipAddressPools:
                  - lions-ip-pool
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    # =========================================================================
    # PHASE 7: D√âPLOIEMENT DU MONITORING COMPLET (NOUVELLE PHASE)
    # =========================================================================

    - name: "üìä PHASE 7 - D√©ploiement du syst√®me de monitoring complet"
      debug:
        msg: |
          D√©ploiement de Prometheus et Grafana avec configuration optimis√©e
          Namespace: {{ monitoring_config.namespace }}
          R√©tention Prometheus: {{ monitoring_config.prometheus_retention }}

    - name: "üìä Pr√©paration du monitoring"
      block:
        - name: "Cr√©ation du namespace monitoring"
          kubernetes.core.k8s:
            name: "{{ monitoring_config.namespace }}"
            api_version: v1
            kind: Namespace
            state: present
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Ajout du d√©p√¥t Helm Prometheus Community"
          kubernetes.core.helm_repository:
            name: prometheus-community
            repo_url: "https://prometheus-community.github.io/helm-charts"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Mise √† jour des d√©p√¥ts Helm"
          command: "helm repo update"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    - name: "üîç Nettoyage complet des installations monitoring pr√©c√©dentes"
      block:
        - name: "Suppression compl√®te du namespace monitoring"
          kubernetes.core.k8s:
            name: "{{ monitoring_config.namespace }}"
            api_version: v1
            kind: Namespace
            state: absent
            wait: true
            wait_timeout: 60
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"
          ignore_errors: yes

        - name: "Suppression des CRDs Prometheus existants"
          shell: |
            kubectl delete crd --ignore-not-found=true \
              prometheuses.monitoring.coreos.com \
              prometheusrules.monitoring.coreos.com \
              servicemonitors.monitoring.coreos.com \
              podmonitors.monitoring.coreos.com \
              alertmanagers.monitoring.coreos.com \
              alertmanagerconfigs.monitoring.coreos.com \
              thanosrulers.monitoring.coreos.com \
              probes.monitoring.coreos.com \
              prometheusagents.monitoring.coreos.com \
              scrapeconfigs.monitoring.coreos.com || true
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"
          ignore_errors: yes

        - name: "Suppression forc√©e des releases Helm existantes"
          shell: |
            helm uninstall prometheus -n {{ monitoring_config.namespace }} --ignore-not-found || true
            helm uninstall kube-prometheus-stack -n {{ monitoring_config.namespace }} --ignore-not-found || true
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"
          ignore_errors: yes

        - name: "Attente de la suppression compl√®te"
          pause:
            seconds: 15

        - name: "Recr√©ation du namespace monitoring"
          kubernetes.core.k8s:
            name: "{{ monitoring_config.namespace }}"
            api_version: v1
            kind: Namespace
            state: present
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    - name: "üöÄ D√©ploiement de kube-prometheus-stack simplifi√©"
      block:
        - name: "Installation avec timeout court et retry"
          kubernetes.core.helm:
            name: prometheus
            chart_ref: "prometheus-community/kube-prometheus-stack"
            chart_version: "{{ kube_prometheus_stack_version }}"
            release_namespace: "{{ monitoring_config.namespace }}"
            create_namespace: false
            wait: true
            wait_timeout: "2400s"  # Augment√© de 1200s √† 2400s
            atomic: false  # D√©sactiv√© pour √©viter la suppression automatique en cas d'√©chec
            timeout: 2400
            values:
              # Configuration Prometheus simplifi√©e
              prometheus:
                enabled: true
                prometheusSpec:
                  retention: "1d"  # R√©duit de 3d √† 1d
                  retentionSize: "1GB"  # R√©duit de 2GB √† 1GB
                  maximumStartupDurationSeconds: 2400  # Augment√© de 1200 √† 2400
                  scrapeInterval: "5m"  # Augment√© de 2m √† 5m
                  evaluationInterval: "5m"  # Augment√© de 2m √† 5m
                  enableAdminAPI: false
                  walCompression: true
                  storageSpec:
                    volumeClaimTemplate:
                      spec:
                        storageClassName: "local-path"
                        accessModes: ["ReadWriteOnce"]
                        resources:
                          requests:
                            storage: "1Gi"  # R√©duit de 2Gi √† 1Gi
                  resources:
                    requests:
                      cpu: "10m"  # R√©duit de 25m √† 10m
                      memory: "32Mi"  # R√©duit de 64Mi √† 32Mi
                    limits:
                      cpu: "50m"  # R√©duit de 100m √† 50m
                      memory: "128Mi"  # R√©duit de 256Mi √† 128Mi
                  scrapeTimeout: "30s"
                service:
                  type: ClusterIP
                  port: 9090

              # Configuration Grafana simplifi√©e
              grafana:
                enabled: true
                adminPassword: "{{ monitoring_config.grafana_admin_password }}"
                persistence:
                  enabled: true
                  storageClassName: "local-path"
                  size: "1Gi"  # R√©duit de 2Gi √† 1Gi
                  accessModes: ["ReadWriteOnce"]
                service:
                  type: NodePort
                  nodePort: 30000
                  port: 80
                resources:
                  requests:
                    cpu: "25m"  # R√©duit de 50m √† 25m
                    memory: "32Mi"  # R√©duit de 64Mi √† 32Mi
                  limits:
                    cpu: "100m"  # R√©duit de 200m √† 100m
                    memory: "128Mi"  # R√©duit de 256Mi √† 128Mi
                defaultDashboardsEnabled: true
                sidecar:
                  dashboards:
                    enabled: true
                  datasources:
                    enabled: true

              # AlertManager d√©sactiv√© pour r√©duire la charge
              alertmanager:
                enabled: false

              # Node Exporter avec ressources minimales
              nodeExporter:
                enabled: true
                resources:
                  requests:
                    cpu: "5m"
                    memory: "16Mi"
                  limits:
                    cpu: "25m"
                    memory: "32Mi"

              # Kube State Metrics avec ressources minimales
              kubeStateMetrics:
                enabled: true
                resources:
                  requests:
                    cpu: "5m"
                    memory: "16Mi"
                  limits:
                    cpu: "25m"
                    memory: "32Mi"

              # Configuration minimale pour Prometheus Operator
              prometheusOperator:
                enabled: true
                resources:
                  requests:
                    cpu: "5m"  # R√©duit de 10m √† 5m
                    memory: "16Mi"  # R√©duit de 32Mi √† 16Mi
                  limits:
                    cpu: "25m"  # R√©duit de 50m √† 25m
                    memory: "32Mi"  # R√©duit de 64Mi √† 32Mi
                admissionWebhooks:
                  enabled: false  # D√©sactiv√© pour r√©duire la charge
                tls:
                  enabled: false  # D√©sactiv√© pour r√©duire la charge
                manageCrds: false  # Les CRDs sont d√©j√† install√©s

              # D√©sactivation de composants lourds
              kubeApiServer:
                enabled: false
              kubelet:
                enabled: true
              kubeControllerManager:
                enabled: false
              coreDns:
                enabled: false
              kubeEtcd:
                enabled: false
              kubeScheduler:
                enabled: false
              kubeProxy:
                enabled: false

          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"
          register: prometheus_install_result
          retries: 2
          delay: 30

      rescue:
        - name: "D√©ploiement de fallback minimal"
          block:
            - name: "Diagnostic de l'√©chec"
              shell: |
                echo "=== Diagnostic de l'√©chec de l'installation de Prometheus ==="
                echo "--- Pods en cours d'ex√©cution ---"
                kubectl get pods -n {{ monitoring_config.namespace }} || true
                echo "--- √âv√©nements r√©cents ---"
                kubectl get events -n {{ monitoring_config.namespace }} --sort-by='.lastTimestamp' | tail -20 || true
                echo "--- Ressources du n≈ìud ---"
                kubectl describe node || true
                echo "--- Ressources utilis√©es ---"
                kubectl top nodes || true
                kubectl top pods --all-namespaces || true
              register: diagnostic_output
              environment:
                KUBECONFIG: "{{ k3s_kubeconfig }}"
              ignore_errors: yes

            - name: "Affichage du diagnostic"
              debug:
                msg: "{{ diagnostic_output.stdout_lines }}"
              when: diagnostic_output.stdout_lines is defined

            - name: "Nettoyage apr√®s √©chec"
              shell: |
                echo "Nettoyage des ressources Prometheus..."
                helm uninstall prometheus -n {{ monitoring_config.namespace }} --ignore-not-found || true
                kubectl delete namespace {{ monitoring_config.namespace }} --ignore-not-found || true
                echo "Attente de la suppression compl√®te..."
                sleep 20
                echo "Recr√©ation du namespace monitoring..."
                kubectl create namespace {{ monitoring_config.namespace }} || true
              environment:
                KUBECONFIG: "{{ k3s_kubeconfig }}"

            - name: "Ajout du d√©p√¥t Grafana"
              kubernetes.core.helm_repository:
                name: grafana
                repo_url: "https://grafana.github.io/helm-charts"
              environment:
                KUBECONFIG: "{{ k3s_kubeconfig }}"

            - name: "Installation Grafana standalone ultra-l√©ger"
              kubernetes.core.helm:
                name: grafana
                chart_ref: "grafana/grafana"
                release_namespace: "{{ monitoring_config.namespace }}"
                create_namespace: false
                wait: true
                wait_timeout: "300s"
                timeout: 300
                values:
                  adminPassword: "{{ monitoring_config.grafana_admin_password }}"
                  replicas: 1
                  persistence:
                    enabled: false
                  service:
                    type: NodePort
                    nodePort: 30000
                  resources:
                    requests:
                      cpu: "10m"  # R√©duit au minimum
                      memory: "32Mi"
                    limits:
                      cpu: "50m"  # R√©duit au minimum
                      memory: "64Mi"
                  # D√©sactivation des fonctionnalit√©s non essentielles
                  rbac:
                    pspEnabled: false
                  testFramework:
                    enabled: false
                  downloadDashboardsImage:
                    enabled: false
                  initChownData:
                    enabled: false
                  # Configuration pour utiliser Prometheus s'il est install√© manuellement plus tard
                  datasources:
                    datasources.yaml:
                      apiVersion: 1
                      datasources:
                        - name: Prometheus
                          type: prometheus
                          url: http://prometheus-server.monitoring.svc.cluster.local:9090
                          access: proxy
                          isDefault: true
                        - name: Prometheus-Alt
                          type: prometheus
                          url: http://prometheus-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090
                          access: proxy
                          isDefault: false
                  # D√©sactivation des plugins et dashboards par d√©faut pour r√©duire la charge
                  plugins: []
                  dashboardProviders:
                    dashboardproviders.yaml:
                      apiVersion: 1
                      providers:
                        - name: 'default'
                          orgId: 1
                          folder: ''
                          type: file
                          disableDeletion: false
                          editable: true
                          options:
                            path: /var/lib/grafana/dashboards/default
                  dashboards:
                    default:
                      welcome:
                        json: |
                          {
                            "annotations": {
                              "list": []
                            },
                            "editable": true,
                            "fiscalYearStartMonth": 0,
                            "graphTooltip": 0,
                            "links": [],
                            "liveNow": false,
                            "panels": [
                              {
                                "gridPos": {
                                  "h": 8,
                                  "w": 24,
                                  "x": 0,
                                  "y": 0
                                },
                                "id": 1,
                                "options": {
                                  "code": {
                                    "language": "plaintext",
                                    "showLineNumbers": false,
                                    "showMiniMap": false
                                  },
                                  "content": "# Bienvenue sur Grafana LIONS Infrastructure\n\n## √âtat du monitoring\n\nGrafana est actuellement d√©ploy√© en mode standalone l√©ger.\n\nPour connecter Grafana √† Prometheus, vous pouvez:\n\n1. Installer Prometheus manuellement\n2. V√©rifier les datasources pr√©configur√©es\n3. Importer des dashboards pour visualiser vos m√©triques\n\n## Liens utiles\n\n- [Documentation Grafana](https://grafana.com/docs/)\n- [Documentation Prometheus](https://prometheus.io/docs/)\n- [Documentation LIONS Infrastructure](https://github.com/lions-infrastructure)",
                                  "mode": "markdown"
                                },
                                "pluginVersion": "10.0.0",
                                "title": "LIONS Infrastructure - Monitoring",
                                "type": "text"
                              }
                            ],
                            "refresh": "",
                            "schemaVersion": 38,
                            "style": "dark",
                            "tags": [],
                            "templating": {
                              "list": []
                            },
                            "time": {
                              "from": "now-6h",
                              "to": "now"
                            },
                            "timepicker": {},
                            "timezone": "",
                            "title": "LIONS Infrastructure - Accueil",
                            "uid": "lions-welcome",
                            "version": 1,
                            "weekStart": ""
                          }
              environment:
                KUBECONFIG: "{{ k3s_kubeconfig }}"

            - name: "D√©finition du r√©sultat d'√©chec"
              set_fact:
                prometheus_install_result: "{{ {'failed': true} }}"

            - name: "Message de fallback d√©taill√©"
              debug:
                msg: |
                  ‚ö†Ô∏è  INSTALLATION DE PROMETHEUS √âCHOU√âE - FALLBACK ACTIV√â
                  ==========================================================

                  ‚úÖ Grafana standalone ultra-l√©ger a √©t√© d√©ploy√© avec succ√®s

                  üìä INSTALLATION MANUELLE DE PROMETHEUS:

                  1. V√©rifiez les ressources disponibles sur votre VPS:
                     kubectl top nodes

                  2. Installez Prometheus manuellement avec des ressources r√©duites:
                     helm install prometheus prometheus-community/kube-prometheus-stack \
                       --namespace monitoring \
                       --set prometheus.prometheusSpec.resources.requests.cpu=10m \
                       --set prometheus.prometheusSpec.resources.requests.memory=32Mi \
                       --set prometheus.prometheusSpec.resources.limits.cpu=50m \
                       --set prometheus.prometheusSpec.resources.limits.memory=128Mi \
                       --set prometheus.prometheusSpec.retention=1d \
                       --set alertmanager.enabled=false \
                       --set grafana.enabled=false

                  3. V√©rifiez que Prometheus est en cours d'ex√©cution:
                     kubectl get pods -n monitoring

                  4. Grafana est d√©j√† configur√© pour se connecter √† Prometheus
                     automatiquement une fois qu'il sera disponible.

                  ‚ö†Ô∏è REMARQUE: L'installation de Prometheus a √©chou√© probablement en raison
                  de ressources insuffisantes sur le VPS. Consid√©rez augmenter les ressources
                  du VPS ou r√©duire davantage les demandes de ressources.

    - name: "‚è≥ V√©rification du d√©ploiement du monitoring"
      block:
        - name: "V√©rification de l'installation r√©ussie"
          debug:
            msg: "Installation Prometheus r√©ussie: {{ prometheus_install_result is succeeded }}"

        - name: "Attente de la disponibilit√© des pods (si installation r√©ussie)"
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Pod
            namespace: "{{ monitoring_config.namespace }}"
            label_selectors:
              - "app.kubernetes.io/name=grafana"
            wait: true
            wait_condition:
              type: Ready
              status: "True"
            wait_timeout: 180
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"
          when: prometheus_install_result is succeeded
          ignore_errors: yes

        - name: "V√©rification de l'√©tat des services monitoring"
          command: "/usr/local/bin/k3s kubectl get pods -n {{ monitoring_config.namespace }}"
          register: monitoring_pods_status
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Affichage de l'√©tat du monitoring"
          debug:
            msg: |
              ==========================================================
              üìä √âTAT DU MONITORING
              ==========================================================
              {{ monitoring_pods_status.stdout }}
              ==========================================================

    - name: "üîó Configuration des acc√®s monitoring"
      block:
        - name: "Cr√©ation du service NodePort pour Prometheus (si install√©)"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: prometheus-external
                namespace: "{{ monitoring_config.namespace }}"
                labels:
                  app: prometheus-external
              spec:
                type: NodePort
                ports:
                  - port: 9090
                    targetPort: 9090
                    nodePort: 30090
                    protocol: TCP
                    name: prometheus
                selector:
                  app.kubernetes.io/name: prometheus
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"
          when: prometheus_install_result is succeeded
          ignore_errors: yes

        - name: "R√©cup√©ration du mot de passe Grafana (si install√©)"
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: prometheus-grafana
            namespace: "{{ monitoring_config.namespace }}"
          register: grafana_secret
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"
          when: prometheus_install_result is succeeded
          ignore_errors: yes

        - name: "Affichage des informations d'acc√®s (installation compl√®te)"
          debug:
            msg: |
              ==========================================================
              üîê INFORMATIONS D'ACC√àS MONITORING COMPLET
              ==========================================================
              üéØ Grafana:
                URL HTTPS: https://{{ services_domains.grafana }}
                URL NodePort: http://{{ ansible_host }}:30000
                Utilisateur: admin
                Mot de passe: {{ monitoring_config.grafana_admin_password }}

              üìä Prometheus:
                URL HTTPS: https://{{ services_domains.prometheus }}
                URL NodePort: http://{{ ansible_host }}:30090
                Interface Web: https://{{ services_domains.prometheus }}/graph

              üö® AlertManager:
                URL interne: http://prometheus-kube-prometheus-alertmanager:9093

              üåê Site Principal:
                URL: https://{{ services_domains.lions_main }}
              ==========================================================
          when: prometheus_install_result is succeeded

        - name: "Affichage des informations d'acc√®s (fallback)"
          debug:
            msg: |
              ==========================================================
              üîê INFORMATIONS D'ACC√àS MONITORING (FALLBACK)
              ==========================================================
              üéØ Grafana Standalone:
                URL HTTPS: https://{{ services_domains.grafana }}
                URL NodePort: http://{{ ansible_host }}:30000
                Utilisateur: admin
                Mot de passe: {{ monitoring_config.grafana_admin_password }}

              üåê Site Principal:
                URL: https://{{ services_domains.lions_main }}

              ‚ö†Ô∏è  Prometheus n'est pas install√© - configuration manuelle requise

              üìã Services √† venir:
              ‚Ä¢ Keycloak: https://{{ services_domains.keycloak }}
              ‚Ä¢ Kubernetes Dashboard: https://{{ services_domains.k3s_dashboard }}
              ‚Ä¢ pgAdmin: https://{{ services_domains.pgadmin }}
              ‚Ä¢ Gitea: https://{{ services_domains.gitea }}
              ==========================================================
          when: prometheus_install_result is failed

    # =========================================================================
    # PHASE 7.5: CONFIGURATION DES INGRESS ET EXPOSITION DES SERVICES
    # =========================================================================

    - name: "üåê PHASE 7.5 - Configuration des Ingress pour l'exposition des services"
      debug:
        msg: |
          Configuration des acc√®s HTTPS via Traefik et Let's Encrypt
          Domaine principal: {{ services_domains.lions_main }}

    - name: "üîó Configuration des Ingress pour les services de monitoring"
      block:
        - name: "Cr√©ation de l'Ingress pour Grafana"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: grafana-ingress
                namespace: "{{ monitoring_config.namespace }}"
                annotations:
                  kubernetes.io/ingress.class: "traefik"
                  traefik.ingress.kubernetes.io/router.entrypoints: "web,websecure"
                  traefik.ingress.kubernetes.io/router.tls: "true"
                  cert-manager.io/cluster-issuer: "letsencrypt-prod"
                  traefik.ingress.kubernetes.io/redirect-to-https: "true"
              spec:
                tls:
                  - hosts:
                      - "{{ services_domains.grafana }}"
                    secretName: grafana-tls
                rules:
                  - host: "{{ services_domains.grafana }}"
                    http:
                      paths:
                        - path: /
                          pathType: Prefix
                          backend:
                            service:
                              name: grafana
                              port:
                                number: 80
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Cr√©ation de l'Ingress pour Prometheus (si install√©)"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: prometheus-ingress
                namespace: "{{ monitoring_config.namespace }}"
                annotations:
                  kubernetes.io/ingress.class: "traefik"
                  traefik.ingress.kubernetes.io/router.entrypoints: "web,websecure"
                  traefik.ingress.kubernetes.io/router.tls: "true"
                  cert-manager.io/cluster-issuer: "letsencrypt-prod"
                  traefik.ingress.kubernetes.io/redirect-to-https: "true"
                  traefik.ingress.kubernetes.io/router.middlewares: "monitoring-auth@kubernetescrd"
              spec:
                tls:
                  - hosts:
                      - "{{ services_domains.prometheus }}"
                    secretName: prometheus-tls
                rules:
                  - host: "{{ services_domains.prometheus }}"
                    http:
                      paths:
                        - path: /
                          pathType: Prefix
                          backend:
                            service:
                              name: prometheus-kube-prometheus-prometheus
                              port:
                                number: 9090
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"
          when: prometheus_install_result is succeeded

    - name: "üîê Configuration des middlewares d'authentification Traefik"
      block:
        - name: "Cr√©ation du middleware d'authentification basique"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: traefik.containo.us/v1alpha1
              kind: Middleware
              metadata:
                name: auth
                namespace: "{{ monitoring_config.namespace }}"
              spec:
                basicAuth:
                  secret: basic-auth-secret
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Cr√©ation du secret d'authentification"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: basic-auth-secret
                namespace: "{{ monitoring_config.namespace }}"
              type: Opaque
              stringData:
                users: "admin:$2y$10$K8kRt5rWLhKhXpHr2xJy8OKiCqWkKznRv8.LKz9v5KzWPgWmWV7G."
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    - name: "üéõÔ∏è Pr√©paration des Ingress pour les services futurs"
      block:
        - name: "Cr√©ation du namespace lions-infrastructure pour les futurs services"
          kubernetes.core.k8s:
            name: lions-infrastructure
            api_version: v1
            kind: Namespace
            state: present
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Configuration de l'Ingress pour le site principal"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: lions-main-ingress
                namespace: lions-infrastructure
                annotations:
                  kubernetes.io/ingress.class: "traefik"
                  traefik.ingress.kubernetes.io/router.entrypoints: "web,websecure"
                  traefik.ingress.kubernetes.io/router.tls: "true"
                  cert-manager.io/cluster-issuer: "letsencrypt-prod"
                  traefik.ingress.kubernetes.io/redirect-to-https: "true"
              spec:
                tls:
                  - hosts:
                      - "{{ services_domains.lions_main }}"
                    secretName: lions-main-tls
                rules:
                  - host: "{{ services_domains.lions_main }}"
                    http:
                      paths:
                        - path: /
                          pathType: Prefix
                          backend:
                            service:
                              name: lions-main-service
                              port:
                                number: 80
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Service placeholder pour le site principal"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: lions-main-service
                namespace: lions-infrastructure
              spec:
                selector:
                  app: lions-main
                ports:
                  - protocol: TCP
                    port: 80
                    targetPort: 80
                type: ClusterIP
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "D√©ploiement d'une page d'accueil temporaire"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: lions-main-placeholder
                namespace: lions-infrastructure
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: lions-main
                template:
                  metadata:
                    labels:
                      app: lions-main
                  spec:
                    containers:
                      - name: nginx
                        image: nginx:alpine
                        ports:
                          - containerPort: 80
                        resources:
                          requests:
                            cpu: "50m"
                            memory: "64Mi"
                          limits:
                            cpu: "100m"
                            memory: "128Mi"
                        volumeMounts:
                          - name: html
                            mountPath: /usr/share/nginx/html
                    volumes:
                      - name: html
                        configMap:
                          name: lions-main-html
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Configuration HTML pour la page d'accueil"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: lions-main-html
                namespace: lions-infrastructure
              data:
                index.html: |
                  <!DOCTYPE html>
                  <html lang="fr">
                  <head>
                      <meta charset="UTF-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>LIONS Infrastructure - En cours de d√©ploiement</title>
                      <style>
                          * { margin: 0; padding: 0; box-sizing: border-box; }
                          body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                                 background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                                 min-height: 100vh; display: flex; align-items: center; justify-content: center; }
                          .container { text-align: center; color: white; padding: 2rem; }
                          .logo { font-size: 4rem; font-weight: bold; margin-bottom: 1rem; }
                          .subtitle { font-size: 1.5rem; margin-bottom: 2rem; opacity: 0.9; }
                          .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
                                    gap: 1rem; margin-top: 2rem; }
                          .service { background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 8px; 
                                   backdrop-filter: blur(10px); transition: transform 0.3s; }
                          .service:hover { transform: translateY(-5px); }
                          .service a { color: white; text-decoration: none; font-weight: 500; }
                          .status { background: #4CAF50; color: white; padding: 0.5rem 1rem; 
                                  border-radius: 20px; font-size: 0.9rem; margin-left: 0.5rem; }
                          .coming-soon { background: #FF9800; }
                      </style>
                  </head>
                  <body>
                      <div class="container">
                          <div class="logo">ü¶Å LIONS</div>
                          <div class="subtitle">Infrastructure de D√©ploiement Automatis√©</div>
                          <p>Votre infrastructure Kubernetes est pr√™te !</p>

                          <div class="services">
                              <div class="service">
                                  <a href="/grafana">üìä Grafana</a>
                                  <span class="status">Actif</span>
                              </div>
                              <div class="service">
                                  <a href="/prometheus">üìà Prometheus</a>
                                  <span class="status">Variable</span>
                              </div>
                              <div class="service">
                                  <a href="/k8s">‚öôÔ∏è K8s Dashboard</a>
                                  <span class="status coming-soon">Bient√¥t</span>
                              </div>
                              <div class="service">
                                  <a href="/keycloak">üîê Keycloak</a>
                                  <span class="status coming-soon">Bient√¥t</span>
                              </div>
                              <div class="service">
                                  <a href="/git">üîß Git</a>
                                  <span class="status coming-soon">Bient√¥t</span>
                              </div>
                              <div class="service">
                                  <a href="/pgadmin">üóÑÔ∏è pgAdmin</a>
                                  <span class="status coming-soon">Bient√¥t</span>
                              </div>
                          </div>

                          <div style="margin-top: 2rem; font-size: 0.9rem; opacity: 0.8;">
                              Infrastructure LIONS d√©ploy√©e avec succ√®s
                          </div>
                      </div>
                  </body>
                  </html>
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    - name: "‚è≥ Attente de la cr√©ation des certificats SSL"
      pause:
        seconds: 30
        prompt: "Attente de la g√©n√©ration des certificats Let's Encrypt..."

    - name: "üîç V√©rification des certificats SSL"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: grafana-tls
        namespace: "{{ monitoring_config.namespace }}"
      register: grafana_cert_check
      environment:
        KUBECONFIG: "{{ k3s_kubeconfig }}"
      ignore_errors: yes

    # =========================================================================
    # PHASE 8: V√âRIFICATIONS FINALES ET RAPPORT
    # =========================================================================

    - name: "‚úÖ PHASE 9 - V√©rifications finales et tests d'int√©gration"
      debug:
        msg: "Validation finale de l'installation compl√®te avec monitoring et exposition HTTPS"

    - name: "üè• Tests de sant√© des composants"
      block:
        - name: "V√©rification des n≈ìuds K3s"
          command: "/usr/local/bin/k3s kubectl get nodes -o wide"
          register: final_nodes_check
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "V√©rification des pods syst√®me"
          command: "/usr/local/bin/k3s kubectl get pods --all-namespaces"
          register: final_pods_check
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "V√©rification des services"
          command: "/usr/local/bin/k3s kubectl get services --all-namespaces"
          register: final_services_check
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "V√©rification sp√©cifique du monitoring"
          command: "/usr/local/bin/k3s kubectl get pods -n {{ monitoring_config.namespace }} -o wide"
          register: monitoring_final_check
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"
          ignore_errors: yes

    - name: "üéØ Tests de connectivit√© des services"
      block:
        - name: "Test de connectivit√© Traefik"
          uri:
            url: "http://{{ ansible_host }}"
            method: GET
            status_code: [200, 404, 503]
            timeout: 10
          register: traefik_connectivity
          ignore_errors: true

        - name: "Test de connectivit√© site principal HTTPS"
          uri:
            url: "https://{{ services_domains.lions_main }}"
            method: GET
            status_code: [200, 404, 503]
            timeout: 15
            validate_certs: false
          register: lions_main_connectivity
          ignore_errors: true

        - name: "Test de connectivit√© Grafana HTTPS"
          uri:
            url: "https://{{ services_domains.grafana }}"
            method: GET
            status_code: [200, 302, 404]
            timeout: 15
            validate_certs: false
          register: grafana_https_connectivity
          ignore_errors: true

        - name: "Test de connectivit√© Grafana NodePort (fallback)"
          uri:
            url: "http://{{ ansible_host }}:30000"
            method: GET
            status_code: [200, 302]
            timeout: 15
          register: grafana_nodeport_connectivity
          ignore_errors: true

        - name: "Test de connectivit√© Prometheus HTTPS (si install√©)"
          uri:
            url: "https://{{ services_domains.prometheus }}"
            method: GET
            status_code: [200, 401, 404]
            timeout: 15
            validate_certs: false
          register: prometheus_https_connectivity
          ignore_errors: true
          when: prometheus_install_result is succeeded

        - name: "Test de connectivit√© Prometheus NodePort (si install√©)"
          uri:
            url: "http://{{ ansible_host }}:30090"
            method: GET
            status_code: [200]
            timeout: 15
          register: prometheus_nodeport_connectivity
          ignore_errors: true
          when: prometheus_install_result is succeeded

    - name: "üìä RAPPORT FINAL D'INSTALLATION COMPL√àTE"
      debug:
        msg: |
          ==========================================================
          üéâ INSTALLATION K3S LIONS + MONITORING TERMIN√âE
          ==========================================================

          üìç INFORMATIONS G√âN√âRALES:
          ‚Ä¢ Host: {{ ansible_host }}
          ‚Ä¢ Version K3s: {{ k3s_version }}
          ‚Ä¢ Environment: {{ lions_env | default('development') }}
          ‚Ä¢ Date: {{ ansible_date_time.iso8601 }}

          üîß COMPOSANTS INSTALL√âS:
          ‚Ä¢ ‚úÖ K3s Server (API: :6443)
          ‚Ä¢ ‚úÖ kubectl
          ‚Ä¢ ‚úÖ Helm v3
          ‚Ä¢ ‚úÖ Traefik Ingress Controller
          ‚Ä¢ ‚úÖ cert-manager (TLS)
          ‚Ä¢ ‚úÖ MetalLB Load Balancer
          ‚Ä¢ ‚úÖ Prometheus Stack {{ kube_prometheus_stack_version }}
          ‚Ä¢ ‚úÖ Grafana avec dashboards
          ‚Ä¢ ‚úÖ AlertManager
          ‚Ä¢ ‚úÖ Node Exporter

          üåê ACC√àS SERVICES:
          ‚Ä¢ API Kubernetes: https://{{ ansible_host }}:6443
          ‚Ä¢ Site Principal: https://{{ services_domains.lions_main }} {{ '‚úÖ' if lions_main_connectivity.status in [200, 404] else '‚ö†Ô∏è' }}
          ‚Ä¢ Traefik (HTTP): http://{{ ansible_host }} {{ '‚úÖ' if traefik_connectivity.status == 200 else '‚ö†Ô∏è' }}

          üìä MONITORING:
          ‚Ä¢ Grafana HTTPS: https://{{ services_domains.grafana }} {{ '‚úÖ' if grafana_https_connectivity.status in [200, 302] else '‚ö†Ô∏è' }}
          ‚Ä¢ Grafana NodePort: http://{{ ansible_host }}:30000 {{ '‚úÖ' if grafana_nodeport_connectivity.status in [200, 302] else '‚ö†Ô∏è' }}
          {% if prometheus_install_result is succeeded %}
          ‚Ä¢ Prometheus HTTPS: https://{{ services_domains.prometheus }} {{ '‚úÖ' if prometheus_https_connectivity is defined and prometheus_https_connectivity.status in [200, 401] else '‚ö†Ô∏è' }}
          ‚Ä¢ Prometheus NodePort: http://{{ ansible_host }}:30090 {{ '‚úÖ' if prometheus_nodeport_connectivity is defined and prometheus_nodeport_connectivity.status == 200 else '‚ö†Ô∏è' }}
          {% else %}
          ‚Ä¢ Prometheus: Non install√© (fallback mode)
          {% endif %}

          üîÆ SERVICES √Ä VENIR:
          ‚Ä¢ Keycloak: https://{{ services_domains.keycloak }}
          ‚Ä¢ Kubernetes Dashboard: https://{{ services_domains.k3s_dashboard }}
          ‚Ä¢ pgAdmin: https://{{ services_domains.pgadmin }}
          ‚Ä¢ Gitea: https://{{ services_domains.gitea }}

          üîê CREDENTIALS:
          ‚Ä¢ Grafana User: admin
          ‚Ä¢ Grafana Password: {{ monitoring_config.grafana_admin_password }}

          üìà STATISTIQUES:
          ‚Ä¢ N≈ìuds: {{ final_nodes_check.stdout_lines | length - 1 }}
          ‚Ä¢ Namespaces: {{ (final_pods_check.stdout_lines | select('match', '^[^\\s]+\\s+[^\\s]+\\s+') | list | map('regex_replace', '^([^\\s]+)\\s+.*', '\\1') | unique | list) | length }}
          ‚Ä¢ Pods actifs: {{ (final_pods_check.stdout_lines | select('match', '.*Running.*') | list) | length }}
          ‚Ä¢ Pods monitoring: {{ (monitoring_final_check.stdout_lines | select('match', '.*Running.*') | list) | length if monitoring_final_check is succeeded else 'N/A' }} / {{ monitoring_final_check.stdout_lines | length - 1 if monitoring_final_check is succeeded else 'N/A' }}

          üöÄ PROCHAINES √âTAPES:
          {% if prometheus_install_result is succeeded %}
          1. ‚úÖ Infrastructure compl√®te op√©rationnelle
          2. ‚úÖ Certificats SSL Let's Encrypt configur√©s
          3. Personnaliser les dashboards Grafana
          4. D√©ployer les applications LIONS (Keycloak, Gitea, etc.)
          5. Configurer les sauvegardes automatiques
          {% else %}
          1. ‚úÖ Infrastructure de base op√©rationnelle
          2. ‚úÖ Certificats SSL Let's Encrypt configur√©s
          3. Installer Prometheus manuellement si n√©cessaire
          4. D√©ployer les applications LIONS (Keycloak, Gitea, etc.)
          5. Configurer les sauvegardes automatiques
          {% endif %}

          üí° CONSEILS D'UTILISATION:
          ‚Ä¢ Utilisez les URLs HTTPS pour un acc√®s s√©curis√©
          ‚Ä¢ Les certificats SSL sont automatiquement renouvel√©s
          ‚Ä¢ Le site principal affiche tous les services disponibles
          {% if prometheus_install_result is succeeded %}
          ‚Ä¢ Acc√©dez √† Grafana pour visualiser vos m√©triques
          ‚Ä¢ Consultez Prometheus pour les requ√™tes avanc√©es
          ‚Ä¢ Les dashboards par d√©faut sont pr√©-install√©s
          ‚Ä¢ Le monitoring est configur√© pour une r√©tention de 1 jour pour √©conomiser les ressources
          {% else %}
          ‚Ä¢ Grafana est configur√© mais sans sources de donn√©es Prometheus
          ‚Ä¢ Vous pouvez installer Prometheus s√©par√©ment plus tard
          ‚Ä¢ Les URLs NodePort restent disponibles en backup
          {% endif %}

          üîê DNS CONFIGURATION REQUISE:
          Configurez vos DNS pour pointer vers {{ ansible_host }}:
          {% for service_name, domain in services_domains.items() %}
          ‚Ä¢ {{ domain }} ‚Üí {{ ansible_host }}
          {% endfor %}

          ==========================================================

  # =============================================================================
  # HANDLERS
  # =============================================================================
  handlers:
    - name: "reload systemd and restart k3s"
      listen: "reload systemd and restart k3s"
      systemd:
        name: k3s
        state: restarted
        daemon_reload: yes
      register: k3s_handler_restart

    - name: "verify k3s after handler restart"
      listen: "reload systemd and restart k3s"
      wait_for:
        port: 6443
        host: localhost
        timeout: 120
      when: k3s_handler_restart is succeeded
