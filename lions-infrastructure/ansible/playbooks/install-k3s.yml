---
# =============================================================================
# LIONS INFRASTRUCTURE 5.0 - PLAYBOOK K3S REFACTORIS√â
# =============================================================================
# Description: Installation K3s avec int√©gration compl√®te des variables d'environnement
# Version: 5.0.0
# Date: 2025-05-26
# Architecture: Modulaire, scalable, production-ready
# Compatibilit√©: Ubuntu 20.04+, Debian 11+, CentOS 8+
# =============================================================================

- name: "LIONS K3s Installation - Production-Ready Deployment with Full Environment Integration"
  hosts: "{{ lions_k8s_target_group | default('kubernetes') }}"
  become: true
  gather_facts: true
  any_errors_fatal: false

  # =============================================================================
  # CONFIGURATION CENTRALIS√âE DES VARIABLES
  # =============================================================================
  vars:
    # Int√©gration des variables d'environnement LIONS
    lions_config:
      environment: "{{ lookup('env', 'LIONS_ENVIRONMENT') | default('development') }}"
      debug_mode: "{{ lookup('env', 'LIONS_DEBUG_MODE') | default('false') | bool }}"
      dry_run: "{{ lookup('env', 'LIONS_DRY_RUN') | default('false') | bool }}"
      deployment_mode: "{{ lookup('env', 'LIONS_DEPLOYMENT_MODE') | default('single') }}"

    # Configuration Kubernetes
    k8s_config:
      version: "{{ lookup('env', 'LIONS_K8S_VERSION') | default('v1.30.2+k3s1') }}"
      channel: "{{ lookup('env', 'LIONS_K8S_INSTALL_CHANNEL') | default('stable') }}"
      data_dir: "{{ lookup('env', 'LIONS_K8S_DATA_DIR') | default('/var/lib/rancher/k3s') }}"
      config_file: "{{ lookup('env', 'LIONS_K8S_CONFIG_FILE') | default('/etc/rancher/k3s/k3s.yaml') }}"
      cluster_cidr: "{{ lookup('env', 'LIONS_K8S_CLUSTER_CIDR') | default('10.42.0.0/16') }}"
      service_cidr: "{{ lookup('env', 'LIONS_K8S_SERVICE_CIDR') | default('10.43.0.0/16') }}"
      dns_domain: "{{ lookup('env', 'LIONS_K8S_DNS_DOMAIN') | default('cluster.local') }}"

    # Configuration Haute Disponibilit√©
    ha_config:
      enabled: "{{ lookup('env', 'LIONS_K8S_HA_ENABLED') | default('false') | bool }}"
      cluster_secret: "{{ lookup('env', 'LIONS_K8S_HA_CLUSTER_SECRET') | default('') }}"
      datastore_endpoint: "{{ lookup('env', 'LIONS_K8S_HA_DATASTORE_ENDPOINT') | default('') }}"

    # Configuration Infrastructure
    infra_config:
      target_host: "{{ lookup('env', 'LIONS_INFRA_TARGET_HOST') }}"
      target_port: "{{ lookup('env', 'LIONS_INFRA_TARGET_PORT') | default('22') | int }}"
      target_user: "{{ lookup('env', 'LIONS_INFRA_TARGET_USER') | default('lions-admin') }}"

    # Configuration DNS
    dns_config:
      domain_base: "{{ lookup('env', 'LIONS_DNS_DOMAIN_BASE') | default('lions.local') }}"
      subdomain_prefix: "{{ lookup('env', 'LIONS_DNS_SUBDOMAIN_PREFIX') | default(lions_config.environment) }}"
      full_domain: "{{ lookup('env', 'LIONS_DNS_SUBDOMAIN_PREFIX') | default(lions_config.environment) }}.{{ lookup('env', 'LIONS_DNS_DOMAIN_BASE') | default('lions.local') }}"

    # Configuration S√©curit√©
    security_config:
      tls_enabled: "{{ lookup('env', 'LIONS_SECURITY_TLS_ENABLED') | default('true') | bool }}"
      network_policies: "{{ lookup('env', 'LIONS_SECURITY_NETWORK_POLICIES') | default('true') | bool }}"
      encryption_at_rest: "{{ lookup('env', 'LIONS_SECURITY_ENCRYPTION_AT_REST') | default('true') | bool }}"
      pod_security_standards: "{{ lookup('env', 'LIONS_SECURITY_POD_SECURITY_STANDARDS') | default('restricted') }}"

    # Configuration Monitoring
    monitoring_config:
      enabled: "{{ lookup('env', 'LIONS_MONITORING_ENABLED') | default('true') | bool }}"
      namespace: "{{ lookup('env', 'LIONS_MONITORING_NAMESPACE') | default('monitoring') }}"
      prometheus_enabled: "{{ lookup('env', 'LIONS_PROMETHEUS_ENABLED') | default('true') | bool }}"
      grafana_enabled: "{{ lookup('env', 'LIONS_GRAFANA_ENABLED') | default('true') | bool }}"
      prometheus_retention: "{{ lookup('env', 'LIONS_PROMETHEUS_RETENTION') | default('30d') }}"
      prometheus_storage: "{{ lookup('env', 'LIONS_PROMETHEUS_STORAGE_SIZE') | default('50Gi') }}"

    # Configuration Stockage
    storage_config:
      class_default: "{{ lookup('env', 'LIONS_STORAGE_CLASS_DEFAULT') | default('local-path') }}"
      provisioner: "{{ lookup('env', 'LIONS_STORAGE_PROVISIONER') | default('rancher.io/local-path') }}"
      reclaim_policy: "{{ lookup('env', 'LIONS_STORAGE_RECLAIM_POLICY') | default('Retain') }}"
      base_path: "{{ lookup('env', 'LIONS_STORAGE_BASE_PATH') | default('/opt/lions/storage') }}"

    # Configuration des Ressources par D√©faut
    resources_config:
      small:
        cpu_request: "{{ lookup('env', 'LIONS_RESOURCES_SMALL_CPU_REQUEST') | default('100m') }}"
        cpu_limit: "{{ lookup('env', 'LIONS_RESOURCES_SMALL_CPU_LIMIT') | default('500m') }}"
        memory_request: "{{ lookup('env', 'LIONS_RESOURCES_SMALL_MEMORY_REQUEST') | default('128Mi') }}"
        memory_limit: "{{ lookup('env', 'LIONS_RESOURCES_SMALL_MEMORY_LIMIT') | default('512Mi') }}"
      medium:
        cpu_request: "{{ lookup('env', 'LIONS_RESOURCES_MEDIUM_CPU_REQUEST') | default('200m') }}"
        cpu_limit: "{{ lookup('env', 'LIONS_RESOURCES_MEDIUM_CPU_LIMIT') | default('1000m') }}"
        memory_request: "{{ lookup('env', 'LIONS_RESOURCES_MEDIUM_MEMORY_REQUEST') | default('512Mi') }}"
        memory_limit: "{{ lookup('env', 'LIONS_RESOURCES_MEDIUM_MEMORY_LIMIT') | default('2Gi') }}"

    # Configuration des Timeouts
    timeout_config:
      default: "{{ lookup('env', 'LIONS_TIMEOUT_DEFAULT') | default('300') | int }}"
      deployment: "{{ lookup('env', 'LIONS_TIMEOUT_DEPLOYMENT') | default('1800') | int }}"
      rollback: "{{ lookup('env', 'LIONS_TIMEOUT_ROLLBACK') | default('600') | int }}"

    # Chemins et fichiers critiques
    paths:
      kubeconfig: "{{ k8s_config.config_file }}"
      encryption_config: "/etc/rancher/k3s/encryption-config.yaml"
      audit_log: "/var/log/k3s-audit.log"
      service_file: "/etc/systemd/system/k3s.service"

    # Versions des composants (centralis√©es)
    component_versions:
      traefik: "28.0.0"
      metallb: "0.14.3"
      cert_manager: "v1.14.2"
      prometheus_stack: "59.0.0"

  # =============================================================================
  # VALIDATION PR√âLIMINAIRE ET CONFIGURATION
  # =============================================================================
  pre_tasks:
    - name: "üîç Validation de la configuration d'environnement"
      block:
        - name: "Validation des variables critiques"
          assert:
            that:
              - infra_config.target_host is defined and infra_config.target_host != ""
              - dns_config.domain_base is defined and dns_config.domain_base != ""
              - k8s_config.version is defined
            fail_msg: "Variables d'environnement critiques manquantes. V√©rifiez LIONS_INFRA_TARGET_HOST et LIONS_DNS_DOMAIN_BASE"
            success_msg: "‚úÖ Configuration d'environnement valid√©e"

        - name: "Affichage de la configuration active"
          debug:
            msg: |
              üöÄ CONFIGURATION LIONS INFRASTRUCTURE 5.0
              ==========================================
              Environment: {{ lions_config.environment }}
              Mode: {{ lions_config.deployment_mode }}
              Debug: {{ lions_config.debug_mode }}
              Dry Run: {{ lions_config.dry_run }}
              
              üéØ CIBLE
              Host: {{ infra_config.target_host }}
              User: {{ infra_config.target_user }}
              
              üåê DNS
              Domaine: {{ dns_config.full_domain }}
              Base: {{ dns_config.domain_base }}
              
              ‚öôÔ∏è KUBERNETES
              Version: {{ k8s_config.version }}
              HA: {{ ha_config.enabled }}
              
              üìä MONITORING
              Enabled: {{ monitoring_config.enabled }}
              Prometheus: {{ monitoring_config.prometheus_enabled }}
              Grafana: {{ monitoring_config.grafana_enabled }}
              ==========================================
          when: lions_config.debug_mode

        - name: "Configuration du mode dry-run"
          set_fact:
            ansible_check_mode: true
          when: lions_config.dry_run

  # =============================================================================
  # T√ÇCHES PRINCIPALES RESTRUCTUR√âES
  # =============================================================================
  tasks:
    # Phase 1: V√©rifications syst√®me
    - name: "üìã PHASE 1 - V√©rifications syst√®me et pr√©requis"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-system-checks.yml"
      tags: ['system-checks', 'validation']

    # Phase 2: Pr√©paration de l'environnement
    - name: "üõ†Ô∏è PHASE 2 - Pr√©paration de l'environnement"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-environment-setup.yml"
      tags: ['environment', 'setup']

    # Phase 3: Installation K3s
    - name: "üöÄ PHASE 3 - Installation K3s"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-installation.yml"
      tags: ['k3s', 'installation']

    # Phase 4: Configuration post-installation
    - name: "‚öôÔ∏è PHASE 4 - Configuration post-installation"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-post-install.yml"
      tags: ['post-install', 'configuration']

    # Phase 5: Haute disponibilit√© (si activ√©e)
    - name: "üîÑ PHASE 5 - Configuration haute disponibilit√©"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-ha-setup.yml"
      when: ha_config.enabled
      tags: ['ha', 'high-availability']

    # Phase 6: Infrastructure de base
    - name: "üèóÔ∏è PHASE 6 - D√©ploiement infrastructure de base"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-base-infrastructure.yml"
      tags: ['infrastructure', 'ingress', 'storage']

    # Phase 7: Monitoring (si activ√©)
    - name: "üìä PHASE 7 - D√©ploiement monitoring"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-monitoring-setup.yml"
      when: monitoring_config.enabled
      tags: ['monitoring', 'prometheus', 'grafana']

    # Phase 8: S√©curisation
    - name: "üîí PHASE 8 - Configuration s√©curit√© avanc√©e"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-security-hardening.yml"
      tags: ['security', 'hardening']

    # Phase 9: Tests et validation
    - name: "‚úÖ PHASE 9 - Tests et validation finale"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-validation-tests.yml"
      tags: ['validation', 'tests']

  # =============================================================================
  # T√ÇCHES POST-EX√âCUTION
  # =============================================================================
  post_tasks:
    - name: "üìä RAPPORT FINAL D'INSTALLATION"
      include_tasks: "{{ playbook_dir }}/tasks/k3s-final-report.yml"
      tags: ['report', 'summary']

  # =============================================================================
  # GESTION DES ERREURS ET R√âCUP√âRATION
  # =============================================================================
  rescue:
    - name: "üö® Gestion d'erreur globale"
      block:
        - name: "Collecte des informations de diagnostic"
          shell: |
            echo "=== DIAGNOSTIC D'ERREUR LIONS K3S ==="
            echo "Date: $(date)"
            echo "Host: {{ ansible_host }}"
            echo "User: {{ ansible_user }}"
            echo ""
            echo "=== √âTAT DU SYST√àME ==="
            systemctl status k3s || echo "Service K3s non trouv√©"
            echo ""
            echo "=== LOGS K3S ==="
            journalctl -u k3s -n 20 --no-pager || echo "Logs K3s non disponibles"
            echo ""
            echo "=== RESSOURCES SYST√àME ==="
            free -h
            df -h
            echo ""
            echo "=== PROCESSUS K3S ==="
            ps aux | grep k3s || echo "Aucun processus K3s trouv√©"
          register: diagnostic_info
          ignore_errors: true

        - name: "Sauvegarde du diagnostic"
          copy:
            content: "{{ diagnostic_info.stdout }}"
            dest: "/tmp/lions-k3s-diagnostic-{{ ansible_date_time.epoch }}.log"
            mode: '0644'
          ignore_errors: true

        - name: "Affichage du diagnostic d'erreur"
          debug:
            msg: |
              ‚ùå ERREUR CRITIQUE LORS DE L'INSTALLATION K3S
              ===============================================
              {{ diagnostic_info.stdout }}
              ===============================================
              
              üîß ACTIONS RECOMMAND√âES:
              1. V√©rifiez les logs: journalctl -u k3s -f
              2. V√©rifiez les ressources: free -h && df -h
              3. Consultez le diagnostic: /tmp/lions-k3s-diagnostic-{{ ansible_date_time.epoch }}.log
              4. Relancez l'installation apr√®s correction
              
              üí° AIDE:
              - Documentation: https://docs.lions.dev/troubleshooting
              - Support: support@lions.dev

  # =============================================================================
  # HANDLERS
  # =============================================================================
  handlers:
    - name: "reload systemd daemon"
      systemd:
        daemon_reload: true
      listen: "systemd reload"

    - name: "restart k3s service"
      systemd:
        name: k3s
        state: restarted
      listen: "k3s restart"
      register: k3s_restart_result

    - name: "verify k3s after restart"
      wait_for:
        port: 6443
        host: localhost
        timeout: "{{ timeout_config.default }}"
      listen: "k3s restart"
      when: k3s_restart_result is succeeded

    - name: "restart keepalived"
      systemd:
        name: keepalived
        state: restarted
      listen: "keepalived restart"
      when:
        - ha_config.enabled
        - inventory_hostname in groups['k3s_server'] | default(['kubernetes'])

    - name: "reload firewall"
      systemd:
        name: "{{ ansible_facts['os_family'] == 'RedHat' | ternary('firewalld', 'ufw') }}"
        state: reloaded
      listen: "firewall reload"
      ignore_errors: true

# =============================================================================
# VARIABLES D'ENVIRONNEMENT REQUISES
# =============================================================================
# Ce playbook n√©cessite les variables d'environnement suivantes:
#
# OBLIGATOIRES:
# - LIONS_INFRA_TARGET_HOST: Adresse IP du serveur cible
# - LIONS_DNS_DOMAIN_BASE: Domaine de base (ex: lions.dev)
#
# OPTIONNELLES (avec valeurs par d√©faut):
# - LIONS_ENVIRONMENT: development|staging|production
# - LIONS_K8S_VERSION: Version K3s √† installer
# - LIONS_MONITORING_ENABLED: Activer le monitoring
# - LIONS_SECURITY_TLS_ENABLED: Activer TLS/SSL
# - Et toutes les autres variables d√©finies dans .env
#
# =============================================================================