---
# =============================================================================
# LIONS Infrastructure - Playbook d'Installation K3s Corrig√©
# =============================================================================
# Titre: Playbook d'installation K3s optimis√© et corrig√©
# Description: Installe et configure K3s sur VPS avec gestion d'erreurs robuste
# Auteur: √âquipe LIONS Infrastructure
# Date: 2025-05-22
# Version: 2.0.0
#
# Corrections appliqu√©es:
# - Suppression du flag d√©pr√©ci√© RemoveSelfLink=false
# - Correction de la syntaxe des flags --disable
# - Simplification de la logique de r√©cup√©ration
# - Am√©lioration de la documentation et du logging
# - Application des meilleures pratiques DevOps
# =============================================================================

- name: "LIONS K3s Installation - Production Ready Deployment"
  hosts: vps
  become: yes
  gather_facts: yes

  # =============================================================================
  # VARIABLES DE CONFIGURATION
  # =============================================================================
  vars:
    # Version K3s - Version LTS stable recommand√©e
    k3s_version: "v1.28.6+k3s2"

    # Configuration K3s optimis√©e (FLAGS CORRIG√âS)
    k3s_server_args: >-
      server
      --disable=traefik
      --disable=servicelb
      --disable=local-storage
      --write-kubeconfig-mode=644
      --kubelet-arg=cgroup-driver=systemd
      --kubelet-arg=feature-gates=GracefulNodeShutdown=false

    # Chemins et configurations
    kubeconfig_local_path: "~/.kube/config"
    k3s_service_file: "/etc/systemd/system/k3s.service"
    k3s_kubeconfig: "/etc/rancher/k3s/k3s.yaml"

    # Versions des composants
    traefik_chart_version: "25.0.0"
    metallb_chart_version: "0.13.12"
    cert_manager_version: "v1.13.3"

    # Timeouts et retries
    k3s_startup_timeout: 300
    api_ready_timeout: 600
    max_retries: 3

    # Flags d√©pr√©ci√©s √† supprimer automatiquement
    deprecated_flags:
      - pattern: "--kube-controller-manager-arg feature-gates=RemoveSelfLink=false"
        description: "Flag RemoveSelfLink d√©pr√©ci√©"
      - pattern: "--no-deploy ([a-zA-Z0-9-]+)"
        replacement: "--disable=\\1"
        description: "Syntaxe --no-deploy d√©pr√©ci√©e"

  # =============================================================================
  # T√ÇCHES PRINCIPALES
  # =============================================================================
  tasks:

    # =========================================================================
    # PHASE 1: V√âRIFICATIONS PR√âLIMINAIRES ET NETTOYAGE
    # =========================================================================

    - name: "üìã PHASE 1 - V√©rifications pr√©liminaires"
      debug:
        msg: |
          ==========================================================
          üöÄ D√âMARRAGE INSTALLATION K3S - LIONS INFRASTRUCTURE
          ==========================================================
          Version K3s: {{ k3s_version }}
          Host cible: {{ ansible_host }}
          Environment: {{ lions_env | default('development') }}
          ==========================================================

    - name: "üîç V√©rification de l'environnement syst√®me"
      block:
        - name: "V√©rification des ressources syst√®me minimales"
          assert:
            that:
              - ansible_memtotal_mb >= 1024
              - ansible_processor_vcpus >= 1
            fail_msg: "Ressources syst√®me insuffisantes (RAM: {{ ansible_memtotal_mb }}MB, CPU: {{ ansible_processor_vcpus }})"
            success_msg: "‚úÖ Ressources syst√®me suffisantes (RAM: {{ ansible_memtotal_mb }}MB, CPU: {{ ansible_processor_vcpus }})"

        - name: "V√©rification de l'espace disque disponible"
          shell: df / | awk 'NR==2 {print $4}'
          register: disk_space_check
          changed_when: false

        - name: "Validation de l'espace disque"
          assert:
            that:
              - disk_space_check.stdout | int > 5000000  # 5GB minimum
            fail_msg: "Espace disque insuffisant: {{ (disk_space_check.stdout | int / 1024 / 1024) | round(1) }}GB disponible"
            success_msg: "‚úÖ Espace disque suffisant: {{ (disk_space_check.stdout | int / 1024 / 1024) | round(1) }}GB disponible"

      rescue:
        - name: "‚ùå √âchec des v√©rifications pr√©liminaires"
          fail:
            msg: "Les v√©rifications syst√®me ont √©chou√©. Installation annul√©e."

    - name: "üßπ D√©tection et nettoyage de l'installation K3s existante"
      block:
        - name: "V√©rification de l'existence du binaire K3s"
          stat:
            path: /usr/local/bin/k3s
          register: k3s_binary_exists

        - name: "V√©rification du service K3s existant"
          systemd:
            name: k3s
          register: k3s_service_check
          ignore_errors: true

        - name: "Analyse de l'√©tat du service K3s"
          debug:
            msg: |
              K3s Binary: {{ 'Pr√©sent' if k3s_binary_exists.stat.exists else 'Absent' }}
              Service K3s: {{ k3s_service_check.status.ActiveState | default('Inexistant') }}

        - name: "Correction proactive des flags d√©pr√©ci√©s"
          block:
            - name: "Lecture du fichier de service K3s"
              slurp:
                src: "{{ k3s_service_file }}"
              register: k3s_service_content_raw
              when: k3s_binary_exists.stat.exists

            - name: "D√©codage du contenu du service"
              set_fact:
                k3s_service_content: "{{ k3s_service_content_raw.content | b64decode }}"
              when: k3s_service_content_raw is defined

            - name: "D√©tection des flags d√©pr√©ci√©s"
              set_fact:
                deprecated_flags_found: "{{ deprecated_flags_found | default([]) + [item] }}"
              loop: "{{ deprecated_flags }}"
              when:
                - k3s_service_content is defined
                - item.pattern in k3s_service_content

            - name: "Notification des flags d√©pr√©ci√©s d√©tect√©s"
              debug:
                msg: |
                  ‚ö†Ô∏è  FLAGS D√âPR√âCI√âS D√âTECT√âS:
                  {% for flag in deprecated_flags_found | default([]) %}
                  - {{ flag.description }}
                  {% endfor %}
              when: deprecated_flags_found is defined and deprecated_flags_found | length > 0

            - name: "Suppression des flags d√©pr√©ci√©s"
              replace:
                path: "{{ k3s_service_file }}"
                regexp: "{{ item.pattern }}"
                replace: "{{ item.replacement | default('') }}"
                backup: yes
              loop: "{{ deprecated_flags }}"
              when:
                - k3s_service_content is defined
                - item.pattern in k3s_service_content
              register: flags_corrected
              notify: "reload systemd and restart k3s"

          when: k3s_binary_exists.stat.exists

    # =========================================================================
    # PHASE 2: INSTALLATION K3S
    # =========================================================================

    - name: "üöÄ PHASE 2 - Installation K3s"
      debug:
        msg: "D√©marrage de l'installation K3s avec la configuration corrig√©e"

    - name: "üì• T√©l√©chargement du script d'installation K3s"
      get_url:
        url: "https://get.k3s.io"
        dest: "/tmp/k3s-install.sh"
        mode: '0755'
        timeout: 30
      register: k3s_script_download
      retries: "{{ max_retries }}"
      delay: 5

    - name: "‚öôÔ∏è  Installation K3s avec configuration optimis√©e"
      command: "/tmp/k3s-install.sh"
      environment:
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
        INSTALL_K3S_EXEC: "{{ k3s_server_args }}"
        K3S_KUBECONFIG_MODE: "644"
      register: k3s_installation
      when: not k3s_binary_exists.stat.exists or (deprecated_flags_found is defined and deprecated_flags_found | length > 0)

    - name: "üîÑ D√©marrage et activation du service K3s"
      systemd:
        name: k3s
        state: started
        enabled: yes
        daemon_reload: yes
      register: k3s_service_start
      retries: "{{ max_retries }}"
      delay: 10

    # =========================================================================
    # PHASE 3: V√âRIFICATIONS POST-INSTALLATION
    # =========================================================================

    - name: "‚úÖ PHASE 3 - V√©rifications post-installation"
      debug:
        msg: "V√©rification de l'installation K3s"

    - name: "‚è≥ Attente de la disponibilit√© de l'API K3s"
      wait_for:
        port: 6443
        host: localhost
        delay: 10
        timeout: "{{ k3s_startup_timeout }}"
      register: k3s_api_ready

    - name: "üîç V√©rification de l'√©tat du service K3s"
      systemd:
        name: k3s
      register: k3s_final_status

    - name: "üìä Validation de l'installation K3s"
      block:
        - name: "Test de connectivit√© kubectl"
          command: "/usr/local/bin/k3s kubectl get nodes"
          register: k3s_nodes_check
          changed_when: false
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "V√©rification des pods syst√®me"
          command: "/usr/local/bin/k3s kubectl get pods -n kube-system"
          register: k3s_system_pods
          changed_when: false
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "üìà Rapport d'√©tat K3s"
          debug:
            msg: |
              ==========================================================
              ‚úÖ K3S INSTALLATION R√âUSSIE
              ==========================================================
              Service Status: {{ k3s_final_status.status.ActiveState }}
              API Port: ‚úÖ Accessible sur :6443
              Nodes: {{ k3s_nodes_check.stdout_lines | length }} n≈ìud(s) d√©tect√©(s)
              System Pods: {{ k3s_system_pods.stdout_lines | length - 1 }} pod(s) syst√®me
              ==========================================================

      rescue:
        - name: "üîß Diagnostic en cas d'√©chec"
          block:
            - name: "Collecte des logs K3s"
              command: "journalctl -u k3s -n 20 --no-pager"
              register: k3s_logs

            - name: "Analyse des erreurs K3s"
              debug:
                msg: |
                  ‚ùå √âCHEC DE L'INSTALLATION K3S
                  ==========================================================
                  Service Status: {{ k3s_final_status.status.ActiveState | default('Unknown') }}
                  Derniers logs:
                  {{ k3s_logs.stdout }}
                  ==========================================================

            - name: "Tentative de r√©cup√©ration automatique"
              systemd:
                name: k3s
                state: restarted
              register: k3s_recovery_attempt

            - name: "V√©rification apr√®s r√©cup√©ration"
              wait_for:
                port: 6443
                host: localhost
                timeout: 60
              register: k3s_recovery_check
              ignore_errors: true

            - name: "√âchec d√©finitif si r√©cup√©ration impossible"
              fail:
                msg: |
                  ‚ùå INSTALLATION K3S √âCHOU√âE D√âFINITIVEMENT
                  L'API K3s n'est pas accessible apr√®s tentative de r√©cup√©ration.
                  V√©rifiez les logs syst√®me et les ressources disponibles.
              when: k3s_recovery_check is failed

    # =========================================================================
    # PHASE 4: CONFIGURATION KUBECTL ET KUBECONFIG
    # =========================================================================

    - name: "üîß PHASE 4 - Configuration kubectl et kubeconfig"
      debug:
        msg: "Configuration de l'acc√®s kubectl"

    - name: "üìÅ Cr√©ation des r√©pertoires de configuration"
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - "/home/{{ ansible_user }}/.kube"
        - "/root/.kube"

    - name: "üìÑ Configuration du kubeconfig utilisateur"
      copy:
        src: "{{ k3s_kubeconfig }}"
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      when: k3s_kubeconfig is exists

    - name: "üìÑ Configuration du kubeconfig root"
      copy:
        src: "{{ k3s_kubeconfig }}"
        dest: "/root/.kube/config"
        remote_src: yes
        mode: '0600'
      when: k3s_kubeconfig is exists

    - name: "üåê Mise √† jour du kubeconfig avec l'IP externe"
      replace:
        path: "/home/{{ ansible_user }}/.kube/config"
        regexp: 'https://127.0.0.1:6443'
        replace: 'https://{{ ansible_host }}:6443'

    - name: "‚öôÔ∏è  Configuration de l'environnement bash"
      lineinfile:
        path: "/home/{{ ansible_user }}/.bashrc"
        line: "export KUBECONFIG=/home/{{ ansible_user }}/.kube/config"
        state: present

    # =========================================================================
    # PHASE 5: INSTALLATION DES OUTILS COMPL√âMENTAIRES
    # =========================================================================

    - name: "üõ†Ô∏è  PHASE 5 - Installation des outils compl√©mentaires"
      debug:
        msg: "Installation de kubectl et Helm"

    - name: "üì¶ Installation de kubectl"
      block:
        - name: "Cr√©ation du r√©pertoire pour les cl√©s GPG"
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: "T√©l√©chargement de la cl√© GPG Kubernetes"
          get_url:
            url: "https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key"
            dest: "/tmp/kubernetes-release.key"
            mode: '0644'

        - name: "Installation de la cl√© GPG Kubernetes"
          shell: |
            cat /tmp/kubernetes-release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          args:
            creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

        - name: "Ajout du d√©p√¥t Kubernetes"
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
            state: present
            filename: kubernetes

        - name: "Installation de kubectl"
          apt:
            name: kubectl
            state: present
            update_cache: yes

    - name: "üéõÔ∏è  Installation de Helm"
      block:
        - name: "T√©l√©chargement du script d'installation Helm"
          get_url:
            url: "https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
            dest: "/tmp/get-helm-3.sh"
            mode: '0755'

        - name: "Ex√©cution de l'installation Helm"
          command: "/tmp/get-helm-3.sh"
          args:
            creates: /usr/local/bin/helm

    - name: "üêç Installation des d√©pendances Python Kubernetes"
      pip:
        name:
          - kubernetes>=28.0.0
          - openshift>=0.13.0
          - PyYAML>=6.0
        state: present
        extra_args: "--upgrade"

    # =========================================================================
    # PHASE 6: D√âPLOIEMENT DE L'INFRASTRUCTURE DE BASE
    # =========================================================================

    - name: "üèóÔ∏è  PHASE 6 - D√©ploiement de l'infrastructure de base"
      debug:
        msg: "D√©ploiement des composants d'infrastructure essentiels"

    - name: "üåê D√©ploiement de Traefik (Ingress Controller)"
      block:
        - name: "Ajout du d√©p√¥t Helm Traefik"
          kubernetes.core.helm_repository:
            name: traefik
            repo_url: "https://helm.traefik.io/traefik"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Cr√©ation du namespace Traefik"
          kubernetes.core.k8s:
            name: traefik
            api_version: v1
            kind: Namespace
            state: present
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "D√©ploiement de Traefik via Helm"
          kubernetes.core.helm:
            name: traefik
            chart_ref: "traefik/traefik"
            chart_version: "{{ traefik_chart_version }}"
            release_namespace: traefik
            create_namespace: true
            wait: true
            wait_timeout: 600
            values:
              deployment:
                replicas: 1
              ports:
                web:
                  port: 80
                  expose: true
                  exposedPort: 80
                websecure:
                  port: 443
                  expose: true
                  exposedPort: 443
              service:
                type: LoadBalancer
                spec:
                  externalIPs:
                    - "{{ ansible_host }}"
              ingressClass:
                enabled: true
                isDefaultClass: true
              logs:
                general:
                  level: INFO
              metrics:
                prometheus:
                  enabled: true
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    - name: "üîí D√©ploiement de cert-manager (Gestion TLS)"
      block:
        - name: "Ajout du d√©p√¥t Helm cert-manager"
          kubernetes.core.helm_repository:
            name: jetstack
            repo_url: "https://charts.jetstack.io"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "D√©ploiement de cert-manager"
          kubernetes.core.helm:
            name: cert-manager
            chart_ref: "jetstack/cert-manager"
            chart_version: "{{ cert_manager_version }}"
            release_namespace: cert-manager
            create_namespace: true
            wait: true
            wait_timeout: 600
            values:
              installCRDs: true
              global:
                leaderElection:
                  namespace: cert-manager
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    - name: "‚öñÔ∏è  D√©ploiement de MetalLB (Load Balancer)"
      block:
        - name: "Ajout du d√©p√¥t Helm MetalLB"
          kubernetes.core.helm_repository:
            name: metallb
            repo_url: "https://metallb.github.io/metallb"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "D√©ploiement de MetalLB"
          kubernetes.core.helm:
            name: metallb
            chart_ref: "metallb/metallb"
            chart_version: "{{ metallb_chart_version }}"
            release_namespace: metallb-system
            create_namespace: true
            wait: true
            wait_timeout: 600
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Configuration IPAddressPool MetalLB"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: metallb.io/v1beta1
              kind: IPAddressPool
              metadata:
                name: lions-ip-pool
                namespace: metallb-system
              spec:
                addresses:
                  - "{{ ansible_host }}/32"
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "Configuration L2Advertisement MetalLB"
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: metallb.io/v1beta1
              kind: L2Advertisement
              metadata:
                name: lions-l2-advert
                namespace: metallb-system
              spec:
                ipAddressPools:
                  - lions-ip-pool
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    # =========================================================================
    # PHASE 7: V√âRIFICATIONS FINALES ET RAPPORT
    # =========================================================================

    - name: "‚úÖ PHASE 7 - V√©rifications finales"
      debug:
        msg: "Validation finale de l'installation"

    - name: "üè• Tests de sant√© des composants"
      block:
        - name: "V√©rification des n≈ìuds K3s"
          command: "/usr/local/bin/k3s kubectl get nodes -o wide"
          register: final_nodes_check
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "V√©rification des pods syst√®me"
          command: "/usr/local/bin/k3s kubectl get pods --all-namespaces"
          register: final_pods_check
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

        - name: "V√©rification des services"
          command: "/usr/local/bin/k3s kubectl get services --all-namespaces"
          register: final_services_check
          environment:
            KUBECONFIG: "{{ k3s_kubeconfig }}"

    - name: "üéØ Test de connectivit√© Traefik"
      uri:
        url: "http://{{ ansible_host }}"
        method: GET
        status_code: [200, 404, 503]
        timeout: 10
      register: traefik_connectivity
      ignore_errors: true

    - name: "üìä RAPPORT FINAL D'INSTALLATION"
      debug:
        msg: |
          ==========================================================
          üéâ INSTALLATION K3S LIONS TERMIN√âE AVEC SUCC√àS
          ==========================================================
          
          üìç INFORMATIONS G√âN√âRALES:
          ‚Ä¢ Host: {{ ansible_host }}
          ‚Ä¢ Version K3s: {{ k3s_version }}
          ‚Ä¢ Environment: {{ lions_env | default('development') }}
          ‚Ä¢ Date: {{ ansible_date_time.iso8601 }}
          
          üîß COMPOSANTS INSTALL√âS:
          ‚Ä¢ ‚úÖ K3s Server (API: :6443)
          ‚Ä¢ ‚úÖ kubectl
          ‚Ä¢ ‚úÖ Helm v3
          ‚Ä¢ ‚úÖ Traefik Ingress Controller
          ‚Ä¢ ‚úÖ cert-manager (TLS)
          ‚Ä¢ ‚úÖ MetalLB Load Balancer
          
          üåê ACC√àS:
          ‚Ä¢ API Kubernetes: https://{{ ansible_host }}:6443
          ‚Ä¢ Traefik Dashboard: http://{{ ansible_host }}
          ‚Ä¢ Kubeconfig: /home/{{ ansible_user }}/.kube/config
          
          üìà STATISTIQUES:
          ‚Ä¢ N≈ìuds: {{ final_nodes_check.stdout_lines | length - 1 }}
          ‚Ä¢ Namespaces: {{ (final_pods_check.stdout_lines | select('match', '^[^\\s]+\\s+[^\\s]+\\s+') | list | map('regex_replace', '^([^\\s]+)\\s+.*', '\\1') | unique | list) | length }}
          ‚Ä¢ Pods actifs: {{ (final_pods_check.stdout_lines | select('match', '.*Running.*') | list) | length }}
          
          üöÄ PROCHAINES √âTAPES:
          1. Configurer les certificats SSL (Let's Encrypt)
          2. D√©ployer le monitoring (Prometheus/Grafana)
          3. Configurer les sauvegardes automatiques
          4. D√©ployer les applications LIONS
          
          ==========================================================

  # =============================================================================
  # HANDLERS
  # =============================================================================
  handlers:
    - name: "reload systemd and restart k3s"
      listen: "reload systemd and restart k3s"
      systemd:
        name: k3s
        state: restarted
        daemon_reload: yes
      register: k3s_handler_restart

    - name: "verify k3s after handler restart"
      listen: "reload systemd and restart k3s"
      wait_for:
        port: 6443
        host: localhost
        timeout: 120
      when: k3s_handler_restart is succeeded