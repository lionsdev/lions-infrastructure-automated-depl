#!/bin/bash
# =============================================================================
# LIONS Infrastructure - Script de d√©sinstallation
# =============================================================================
# Titre: Script de d√©sinstallation de l'infrastructure LIONS
# Description: Supprime tous les composants de l'infrastructure LIONS
# Auteur: √âquipe LIONS Infrastructure
# Date: 2025-05-26
# Version: 1.0.0
# =============================================================================

# Activation du mode strict
set -euo pipefail

# Configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
readonly LOG_DIR="${PROJECT_ROOT}/logs/uninstall"
readonly LOG_FILE="${LOG_DIR}/uninstall-$(date +%Y%m%d-%H%M%S).log"
readonly ANSIBLE_DIR="${PROJECT_ROOT}/ansible"
readonly DEFAULT_ENV="${LIONS_ENV:-development}"

# Cr√©ation du r√©pertoire de logs
mkdir -p "${LOG_DIR}"

# Chargement des variables d'environnement
if [ -f "${SCRIPT_DIR}/load-env.sh" ]; then
    source "${SCRIPT_DIR}/load-env.sh"
fi

# Couleurs pour l'affichage
readonly COLOR_RESET="\033[0m"
readonly COLOR_RED="\033[0;31m"
readonly COLOR_GREEN="\033[0;32m"
readonly COLOR_YELLOW="\033[0;33m"
readonly COLOR_BLUE="\033[0;34m"
readonly COLOR_MAGENTA="\033[0;35m"
readonly COLOR_CYAN="\033[0;36m"
readonly COLOR_WHITE="\033[0;37m"
readonly COLOR_BOLD="\033[1m"

# Fonction de logging
function log() {
    local level="$1"
    local message="$2"
    local timestamp="$(date +"%Y-%m-%d %H:%M:%S")"
    local icon=""
    
    # S√©lection de l'ic√¥ne et de la couleur en fonction du niveau
    local color="${COLOR_RESET}"
    case "${level}" in
        "INFO")     color="${COLOR_BLUE}"; icon="‚ÑπÔ∏è " ;;
        "WARNING")  color="${COLOR_YELLOW}"; icon="‚ö†Ô∏è " ;;
        "ERROR")    color="${COLOR_RED}"; icon="‚ùå " ;;
        "DEBUG")    color="${COLOR_MAGENTA}"; icon="üîç " ;;
        "SUCCESS")  color="${COLOR_GREEN}"; icon="‚úÖ " ;;
        "STEP")     color="${COLOR_CYAN}${COLOR_BOLD}"; icon="üîÑ " ;;
    esac
    
    # Affichage du message avec formatage
    echo -e "${color}${icon}[${timestamp}] [${level}] ${message}${COLOR_RESET}"
    
    # Enregistrement dans un fichier de log
    echo "[${timestamp}] [${level}] ${message}" >> "${LOG_FILE}"
}

# Fonction d'affichage de l'aide
function afficher_aide() {
    cat << EOF
Script de D√©sinstallation de l'Infrastructure LIONS

Ce script supprime tous les composants de l'infrastructure LIONS.

Usage:
    $0 [options]

Options:
    -e, --environment <env>   Environnement cible (production, staging, development)
                             Par d√©faut: development
    -i, --inventory <file>    Fichier d'inventaire Ansible sp√©cifique
                             Par d√©faut: inventories/development/hosts.yml
    -f, --force               Ne pas demander de confirmation
    -d, --debug               Active le mode debug
    -h, --help                Affiche cette aide

Exemples:
    $0
    $0 --environment staging
    $0 --force

ATTENTION: Cette op√©ration supprimera toutes les applications et donn√©es associ√©es √† l'environnement sp√©cifi√©.
EOF
}

# Fonction pour ex√©cuter des commandes sudo avec demande de mot de passe
function secure_sudo() {
    sudo -k "$@"  # -k force √† demander le mot de passe
}

# Fonction pour v√©rifier si un service est actif
function is_service_active() {
    local service_name="$1"
    systemctl is-active --quiet "${service_name}" 2>/dev/null
    return $?
}

# Fonction pour d√©sinstaller Vault
function uninstall_vault() {
    log "STEP" "D√©sinstallation de HashiCorp Vault..."
    
    # V√©rification que Vault est install√©
    if ! command -v vault &> /dev/null; then
        log "INFO" "HashiCorp Vault n'est pas install√©, rien √† faire"
        return 0
    fi
    
    # Arr√™t du service Vault
    if is_service_active "vault"; then
        log "INFO" "Arr√™t du service Vault..."
        secure_sudo systemctl stop vault
        secure_sudo systemctl disable vault
        log "SUCCESS" "Service Vault arr√™t√© et d√©sactiv√©"
    else
        log "INFO" "Le service Vault n'est pas actif"
    fi
    
    # Suppression des fichiers Vault
    log "INFO" "Suppression des fichiers Vault..."
    secure_sudo rm -f /usr/local/bin/vault
    secure_sudo rm -f /etc/systemd/system/vault.service
    secure_sudo rm -rf /etc/vault.d
    secure_sudo rm -rf /opt/vault
    secure_sudo rm -rf /var/log/vault
    
    # Suppression du namespace Vault dans Kubernetes
    if command -v kubectl &> /dev/null; then
        log "INFO" "Suppression du namespace Vault dans Kubernetes..."
        kubectl delete namespace vault --ignore-not-found=true
    fi
    
    log "SUCCESS" "HashiCorp Vault d√©sinstall√© avec succ√®s"
}

# Fonction pour d√©sinstaller K3s
function uninstall_k3s() {
    log "STEP" "D√©sinstallation de K3s..."
    
    # V√©rification que K3s est install√©
    if [ ! -f /usr/local/bin/k3s-uninstall.sh ]; then
        log "INFO" "K3s n'est pas install√©, rien √† faire"
        return 0
    fi
    
    # Ex√©cution du script de d√©sinstallation K3s
    log "INFO" "Ex√©cution du script de d√©sinstallation K3s..."
    secure_sudo /usr/local/bin/k3s-uninstall.sh
    
    # Nettoyage des r√©pertoires persistants
    log "INFO" "Nettoyage des r√©pertoires persistants..."
    secure_sudo rm -rf /var/lib/rancher/k3s
    secure_sudo rm -rf /etc/rancher/k3s
    secure_sudo rm -rf /var/lib/kubelet
    secure_sudo rm -rf /var/lib/cni
    secure_sudo rm -rf /var/log/pods
    secure_sudo rm -rf /var/log/containers
    
    # Suppression des interfaces r√©seau CNI
    log "INFO" "Suppression des interfaces r√©seau CNI..."
    for iface in $(ip -o link show | grep -E 'cni|flannel|calico' | awk -F': ' '{print $2}'); do
        secure_sudo ip link delete "$iface" 2>/dev/null || true
    done
    
    # Nettoyage des r√®gles iptables
    log "INFO" "Nettoyage des r√®gles iptables..."
    secure_sudo iptables -F
    secure_sudo iptables -X
    secure_sudo iptables -t nat -F
    secure_sudo iptables -t nat -X
    secure_sudo iptables -t mangle -F
    secure_sudo iptables -t mangle -X
    secure_sudo iptables -P INPUT ACCEPT
    secure_sudo iptables -P FORWARD ACCEPT
    secure_sudo iptables -P OUTPUT ACCEPT
    
    log "SUCCESS" "K3s d√©sinstall√© avec succ√®s"
}

# Fonction pour nettoyer les donn√©es persistantes
function cleanup_data() {
    log "STEP" "Nettoyage des donn√©es persistantes..."
    
    # Suppression des donn√©es persistantes
    log "INFO" "Suppression des donn√©es persistantes..."
    secure_sudo rm -rf /opt/lions-data
    secure_sudo rm -rf /var/lib/lions
    
    # Suppression des logs
    log "INFO" "Suppression des logs..."
    secure_sudo rm -rf /var/log/lions
    
    # Suppression des backups
    log "INFO" "Suppression des backups..."
    secure_sudo rm -rf "${PROJECT_ROOT}/backups"
    
    log "SUCCESS" "Donn√©es persistantes nettoy√©es avec succ√®s"
}

# Fonction pour d√©sinstaller l'infrastructure compl√®te
function uninstall_infrastructure() {
    local environment="$1"
    local inventory_file="$2"
    local force="$3"
    
    log "STEP" "D√©sinstallation de l'infrastructure LIONS pour l'environnement ${environment}..."
    
    # Demande de confirmation si --force n'est pas sp√©cifi√©
    if [ "${force}" != "true" ]; then
        echo -e "${COLOR_RED}${COLOR_BOLD}ATTENTION: Cette op√©ration va supprimer toutes les applications et donn√©es associ√©es √† l'environnement ${environment}.${COLOR_RESET}"
        echo -e "${COLOR_RED}${COLOR_BOLD}Cette action est IRR√âVERSIBLE.${COLOR_RESET}"
        echo ""
        read -p "√ätes-vous s√ªr de vouloir continuer? (tapez 'oui' pour confirmer): " confirmation
        if [ "${confirmation}" != "oui" ]; then
            log "INFO" "D√©sinstallation annul√©e par l'utilisateur"
            exit 0
        fi
    fi
    
    # D√©sinstallation des composants dans l'ordre inverse d'installation
    
    # 1. D√©sinstallation des applications
    log "INFO" "D√©sinstallation des applications..."
    if command -v kubectl &> /dev/null; then
        # Suppression des namespaces d'applications
        kubectl delete namespace gitea-${environment} --ignore-not-found=true
        kubectl delete namespace keycloak-${environment} --ignore-not-found=true
        kubectl delete namespace postgres-${environment} --ignore-not-found=true
        kubectl delete namespace pgadmin-${environment} --ignore-not-found=true
        kubectl delete namespace registry-${environment} --ignore-not-found=true
        kubectl delete namespace ollama-${environment} --ignore-not-found=true
        kubectl delete namespace monitoring --ignore-not-found=true
        kubectl delete namespace cert-manager --ignore-not-found=true
        kubectl delete namespace traefik --ignore-not-found=true
    fi
    
    # 2. D√©sinstallation de Vault
    uninstall_vault
    
    # 3. D√©sinstallation de K3s
    uninstall_k3s
    
    # 4. Nettoyage des donn√©es persistantes
    cleanup_data
    
    log "SUCCESS" "D√©sinstallation de l'infrastructure LIONS termin√©e avec succ√®s"
    log "INFO" "Journal de d√©sinstallation: ${LOG_FILE}"
}

# Parsing des arguments
environment="${DEFAULT_ENV}"
inventory_file="inventories/${environment}/hosts.yml"
force="false"
debug_mode="false"

while [[ $# -gt 0 ]]; do
    case "$1" in
        -e|--environment)
            environment="$2"
            inventory_file="inventories/${environment}/hosts.yml"
            shift 2
            ;;
        -i|--inventory)
            inventory_file="$2"
            shift 2
            ;;
        -f|--force)
            force="true"
            shift
            ;;
        -d|--debug)
            debug_mode="true"
            shift
            ;;
        -h|--help)
            afficher_aide
            exit 0
            ;;
        *)
            log "ERROR" "Argument inconnu: $1"
            afficher_aide
            exit 1
            ;;
    esac
done

# Affichage du titre
echo -e "${COLOR_RED}${COLOR_BOLD}"
echo -e "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo -e "‚ïë                                                                   ‚ïë"
echo -e "‚ïë      ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                      ‚ïë"
echo -e "‚ïë      ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù                      ‚ïë"
echo -e "‚ïë      ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                      ‚ïë"
echo -e "‚ïë      ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë                      ‚ïë"
echo -e "‚ïë      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë                      ‚ïë"
echo -e "‚ïë      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                      ‚ïë"
echo -e "‚ïë                                                                   ‚ïë"
echo -e "‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó       ‚ïë"
echo -e "‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù       ‚ïë"
echo -e "‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë          ‚ïë"
echo -e "‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë          ‚ïë"
echo -e "‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë          ‚ïë"
echo -e "‚ïë     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù          ‚ïë"
echo -e "‚ïë                                                                   ‚ïë"
echo -e "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${COLOR_RESET}"
echo -e "${COLOR_YELLOW}${COLOR_BOLD}     Script de D√©sinstallation - v1.0.0${COLOR_RESET}"
echo -e "${COLOR_RED}  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${COLOR_RESET}\n"

# Affichage des param√®tres
log "INFO" "Environnement: ${environment}"
log "INFO" "Fichier d'inventaire: ${inventory_file}"
log "INFO" "Mode force: ${force}"
log "INFO" "Mode debug: ${debug_mode}"
log "INFO" "Fichier de log: ${LOG_FILE}"

# Ex√©cution de la d√©sinstallation
uninstall_infrastructure "${environment}" "${inventory_file}" "${force}"

exit 0