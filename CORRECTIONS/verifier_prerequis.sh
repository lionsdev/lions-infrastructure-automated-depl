#!/bin/bash
# Fonction am√©lior√©e de v√©rification des pr√©requis pour le script install.sh

function verifier_prerequis() {
  echo "üîç V√©rification des pr√©requis du syst√®me..."
  
  # V√©rification de l'OS
  if ! grep -q "Ubuntu\|Debian" /etc/os-release; then
    echo "‚ùå Ce script n√©cessite Ubuntu ou Debian. Syst√®me actuel: $(cat /etc/os-release | grep PRETTY_NAME | cut -d '=' -f2 | tr -d '"')"
    return 1
  fi
  
  # V√©rification WSL2
  if grep -i microsoft /proc/version > /dev/null; then
    echo "‚ö†Ô∏è Environnement WSL2 d√©tect√©. Installation directe non recommand√©e."
    echo "üìù Utilisez plut√¥t le script remote-install.sh pour une installation directe sur le VPS."
    read -p "Voulez-vous continuer malgr√© les risques? (o/N): " confirm
    if [[ "$confirm" != "o" && "$confirm" != "O" ]]; then
      echo "üìã Installation annul√©e. Utilisez le script remote-install.sh."
      return 1
    fi
  fi
  
  # V√©rification de l'espace disque
  disk_space=$(df -h / | awk 'NR==2 {print $4}')
  disk_space_gb=${disk_space%G*}
  # Si format est en M, convertir en fraction de GB
  if [[ "$disk_space" == *"M"* ]]; then
    disk_space_gb=$(echo "${disk_space%M*} / 1024" | bc -l | awk '{printf "%.2f", $0}')
  fi
  
  if (( $(echo "$disk_space_gb < 10" | bc -l) )); then
    echo "‚ùå Espace disque insuffisant: $disk_space disponible. Minimum 10GB requis."
    return 1
  fi
  
  # V√©rification de la RAM
  mem_total=$(free -m | awk 'NR==2 {print $2}')
  if [[ $mem_total -lt 3800 ]]; then
    echo "‚ùå RAM insuffisante: ${mem_total}M disponible. Minimum 4GB requis."
    return 1
  fi
  
  # V√©rification des CPU
  cpu_count=$(nproc)
  if [[ $cpu_count -lt 2 ]]; then
    echo "‚ùå CPUs insuffisants: $cpu_count disponible. Minimum 2 requis."
    return 1
  fi
  
  # V√©rification des ports
  required_ports=(22 80 443 6443)
  busy_ports=()
  
  # Installer netstat si n√©cessaire
  if ! command -v netstat &> /dev/null; then
    echo "Installation de net-tools pour la v√©rification des ports..."
    apt-get update -qq && apt-get install -qq -y net-tools
  fi
  
  for port in "${required_ports[@]}"; do
    if netstat -tuln | grep -q ":$port "; then
      busy_ports+=($port)
    fi
  done
  
  if [[ ${#busy_ports[@]} -gt 0 ]]; then
    echo "‚ö†Ô∏è Les ports suivants sont d√©j√† utilis√©s: ${busy_ports[*]}"
    echo "Ces ports sont n√©cessaires pour le fonctionnement de l'infrastructure LIONS."
    read -p "Voulez-vous continuer malgr√© ce conflit potentiel? (o/N): " confirm
    if [[ "$confirm" != "o" && "$confirm" != "O" ]]; then
      echo "üìã Installation annul√©e. Lib√©rez ces ports avant de r√©essayer."
      return 1
    fi
  fi
  
  # V√©rification des d√©pendances essentielles
  dependencies=(curl wget git)
  missing_deps=()
  
  for dep in "${dependencies[@]}"; do
    if ! command -v $dep &> /dev/null; then
      missing_deps+=($dep)
    fi
  done
  
  if [[ ${#missing_deps[@]} -gt 0 ]]; then
    echo "Installation des d√©pendances manquantes: ${missing_deps[*]}"
    apt-get update -qq && apt-get install -y ${missing_deps[*]}
    if [[ $? -ne 0 ]]; then
      echo "‚ùå √âchec de l'installation des d√©pendances. V√©rifiez votre connexion internet et les droits d'administration."
      return 1
    fi
  fi
  
  # V√©rification d'acc√®s internet
  if ! ping -c 1 github.com > /dev/null 2>&1 && ! ping -c 1 get.k3s.io > /dev/null 2>&1; then
    echo "‚ùå Pas d'acc√®s √† Internet. V√©rifiez votre connexion."
    return 1
  fi
  
  # V√©rification de permissions sudo
  if ! sudo -n true 2>/dev/null; then
    echo "‚ùå Permissions sudo requises pour l'installation."
    return 1
  fi
  
  echo "‚úÖ Tous les pr√©requis sont satisfaits."
  return 0
}

# Cette fonction doit √™tre int√©gr√©e dans le script install.sh
echo "Fonction de v√©rification des pr√©requis pour le script install.sh"
echo "Int√©grez cette fonction dans le script install.sh pour remplacer la fonction existante."