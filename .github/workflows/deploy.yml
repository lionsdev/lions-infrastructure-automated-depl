name: Deploy Application

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      java_version:
        description: 'Java version'
        required: false
        default: '17'
        type: choice
        options:
          - '11'
          - '17'
      profile:
        description: 'Maven profile'
        required: false
        default: ''
        type: string
      notify:
        description: 'Email notifications (comma-separated)'
        required: false
        default: ''
        type: string

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment based on branch or input
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              echo "environment=production" >> $GITHUB_OUTPUT
            elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
            else
              echo "environment=development" >> $GITHUB_OUTPUT
            fi
          fi

  deploy:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Download lionsctl
        run: |
          curl -L -o lionsctl.tar.gz https://github.com/lionsdev/lionsctl/releases/latest/download/lionsctl-Linux-x86-64.tar.gz
          tar -xzvf lionsctl.tar.gz
          chmod +x lionsctl
          sudo mv lionsctl /usr/local/bin/

      - name: Install test dependencies
        run: |
          pip install pytest pytest-kubernetes pytest-html requests

      - name: Configure environment variables for lionsctl
        run: |
          # Export environment variables with LIONS_ prefix
          echo "LIONS_DOCKER_REGISTRY_URL=${{ secrets.DOCKER_REGISTRY_URL }}" >> $GITHUB_ENV
          echo "LIONS_GIT_USERNAME=${{ secrets.GIT_USERNAME }}" >> $GITHUB_ENV
          echo "LIONS_GIT_EMAIL=${{ secrets.GIT_EMAIL }}" >> $GITHUB_ENV
          echo "LIONS_GIT_PASSWORD=${{ secrets.GIT_PASSWORD }}" >> $GITHUB_ENV
          echo "LIONS_GIT_DEFAULT_BRANCH=main" >> $GITHUB_ENV
          echo "LIONS_GIT_DOMAIN=github.com" >> $GITHUB_ENV
          echo "LIONS_GIT_BASE_URL=https://github.com" >> $GITHUB_ENV
          echo "LIONS_GIT_ENV_URL=https://github.com/lionsdev/" >> $GITHUB_ENV
          echo "LIONS_GIT_USER_API_ENDPOINT=/api/v3/user/repos" >> $GITHUB_ENV
          echo "LIONS_GIT_REPO_API_ENDPOINT=/api/v3/repos" >> $GITHUB_ENV
          echo "LIONS_GIT_ACCESS_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "LIONS_HELM_CONFIG_REPO_URL=https://github.com/lionsdev/config" >> $GITHUB_ENV
          echo "LIONS_HELM_CONFIG_REPO_TOKEN=${{ secrets.CONFIG_REPO_TOKEN }}" >> $GITHUB_ENV
          echo "LIONS_NOTIFICATION_FROM=${{ secrets.NOTIFICATION_FROM }}" >> $GITHUB_ENV
          echo "LIONS_NOTIFICATION_SMTP_URL=${{ secrets.SMTP_URL }}" >> $GITHUB_ENV
          echo "LIONS_NOTIFICATION_SERVER_TOKEN=${{ secrets.SMTP_TOKEN }}" >> $GITHUB_ENV
          echo "LIONS_ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_ENV
          echo "LIONS_KUBECTL_VERSION=v1.28.0" >> $GITHUB_ENV
          echo "LIONS_HELM_VERSION=v3.12.0" >> $GITHUB_ENV

      - name: Initialize application (if not already initialized)
        run: |
          # Extract app name from repository name
          APP_NAME=$(echo ${{ github.repository }} | cut -d '/' -f 2)

          # Try to initialize the application (ignore errors if already initialized)
          lionsctl init -n $APP_NAME -e ${{ needs.determine-environment.outputs.environment }} -i || true

      - name: Deploy application
        run: |
          # Extract app name from repository name
          APP_NAME=$(echo ${{ github.repository }} | cut -d '/' -f 2)

          # Determine Java version
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            JAVA_VERSION="${{ github.event.inputs.java_version }}"
            PROFILE="${{ github.event.inputs.profile }}"
            NOTIFY="${{ github.event.inputs.notify }}"
          else
            JAVA_VERSION="17"
            PROFILE=""
            NOTIFY=""
          fi

          # Build command
          CMD="lionsctl pipeline -u https://github.com/${{ github.repository }} -b ${{ github.ref_name }} -e ${{ needs.determine-environment.outputs.environment }} -j $JAVA_VERSION"

          # Add profile if specified
          if [ ! -z "$PROFILE" ]; then
            CMD="$CMD -p $PROFILE"
          fi

          # Add notifications if specified
          if [ ! -z "$NOTIFY" ]; then
            CMD="$CMD -m $NOTIFY"
          fi

          # Execute command
          echo "Executing: $CMD"
          eval $CMD

      - name: Notify on success
        if: success()
        run: |
          echo "Deployment to ${{ needs.determine-environment.outputs.environment }} successful!"
          # Add additional notification logic here if needed

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          # Add additional notification logic here if needed
