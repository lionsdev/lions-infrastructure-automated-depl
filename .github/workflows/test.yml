name: Run Tests

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: go test -v ./... -coverprofile=coverage.txt -covermode=atomic

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Start Docker containers for integration tests
        run: |
          docker-compose -f docker-compose.test.yml up -d

      - name: Run integration tests
        run: |
          go test -v -tags=integration ./integration/... -coverprofile=integration-coverage.txt

      - name: Stop Docker containers
        run: |
          docker-compose -f docker-compose.test.yml down

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./integration-coverage.txt
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build
        run: go build -v ./...

      - name: Test build artifacts
        run: |
          # Ensure the binary was built correctly
          if [ -f "./lionsctl" ]; then
            ./lionsctl --version
          else
            echo "Binary not found"
            exit 1
          fi